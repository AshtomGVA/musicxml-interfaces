// Auto-generated by emitBuilders.js. Modification is unwise.
var TextArrayBuilder = (function () {
    function TextArrayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextArrayBuilder.prototype._i = function () {
    };
    TextArrayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TextArray";
        return this._p;
    };
    TextArrayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextArrayBuilder.prototype.acc = function (build) {
        this._b["acc"] = build(new AccidentalTextBuilder(this._o && this._o["acc"]));
        this._m["acc"] = true;
        return this;
    };
    TextArrayBuilder.prototype.text = function (build) {
        this._b["text"] = build(new DisplayTextBuilder(this._o && this._o["text"]));
        this._m["text"] = true;
        return this;
    };
    return TextArrayBuilder;
})();
function patchTextArray(base) { return new TextArrayBuilder(base); }
exports.patchTextArray = patchTextArray;
function buildTextArray() { return new TextArrayBuilder(); }
exports.buildTextArray = buildTextArray;
var EncodingDateBuilder = (function () {
    function EncodingDateBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EncodingDateBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["month"]) || this._b["month"] !== undefined || this._p.month !== undefined, "month is a required field");
        console.assert((this._o && !this._m["day"]) || this._b["day"] !== undefined || this._p.day !== undefined, "day is a required field");
        console.assert((this._o && !this._m["year"]) || this._b["year"] !== undefined || this._p.year !== undefined, "year is a required field");
    };
    EncodingDateBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "EncodingDate";
        return this._p;
    };
    EncodingDateBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EncodingDateBuilder.prototype.month = function (month) {
        this._p.month = month;
        this._m["month"] = true;
        return this;
    };
    EncodingDateBuilder.prototype.day = function (day) {
        this._p.day = day;
        this._m["day"] = true;
        return this;
    };
    EncodingDateBuilder.prototype.year = function (year) {
        this._p.year = year;
        this._m["year"] = true;
        return this;
    };
    return EncodingDateBuilder;
})();
function patchEncodingDate(base) { return new EncodingDateBuilder(base); }
exports.patchEncodingDate = patchEncodingDate;
function buildEncodingDate() { return new EncodingDateBuilder(); }
exports.buildEncodingDate = buildEncodingDate;
var CalendarDateBuilder = (function () {
    function CalendarDateBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CalendarDateBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["month"]) || this._b["month"] !== undefined || this._p.month !== undefined, "month is a required field");
        console.assert((this._o && !this._m["day"]) || this._b["day"] !== undefined || this._p.day !== undefined, "day is a required field");
        console.assert((this._o && !this._m["year"]) || this._b["year"] !== undefined || this._p.year !== undefined, "year is a required field");
    };
    CalendarDateBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "CalendarDate";
        return this._p;
    };
    CalendarDateBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CalendarDateBuilder.prototype.month = function (month) {
        this._p.month = month;
        this._m["month"] = true;
        return this;
    };
    CalendarDateBuilder.prototype.day = function (day) {
        this._p.day = day;
        this._m["day"] = true;
        return this;
    };
    CalendarDateBuilder.prototype.year = function (year) {
        this._p.year = year;
        this._m["year"] = true;
        return this;
    };
    return CalendarDateBuilder;
})();
function patchCalendarDate(base) { return new CalendarDateBuilder(base); }
exports.patchCalendarDate = patchCalendarDate;
function buildCalendarDate() { return new CalendarDateBuilder(); }
exports.buildCalendarDate = buildCalendarDate;
var PositionBuilder = (function () {
    function PositionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PositionBuilder.prototype._i = function () {
    };
    PositionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Position";
        return this._p;
    };
    PositionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PositionBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PositionBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PositionBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PositionBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PositionBuilder;
})();
function patchPosition(base) { return new PositionBuilder(base); }
exports.patchPosition = patchPosition;
function buildPosition() { return new PositionBuilder(); }
exports.buildPosition = buildPosition;
var PlacementBuilder = (function () {
    function PlacementBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PlacementBuilder.prototype._i = function () {
    };
    PlacementBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Placement";
        return this._p;
    };
    PlacementBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PlacementBuilder.prototype.placement = function (placement) {
        this._p.placement = placement;
        this._m["placement"] = true;
        return this;
    };
    return PlacementBuilder;
})();
function patchPlacement(base) { return new PlacementBuilder(base); }
exports.patchPlacement = patchPlacement;
function buildPlacement() { return new PlacementBuilder(); }
exports.buildPlacement = buildPlacement;
var OrientationBuilder = (function () {
    function OrientationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OrientationBuilder.prototype._i = function () {
    };
    OrientationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Orientation";
        return this._p;
    };
    OrientationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OrientationBuilder.prototype.orientation = function (orientation) {
        this._p.orientation = orientation;
        this._m["orientation"] = true;
        return this;
    };
    return OrientationBuilder;
})();
function patchOrientation(base) { return new OrientationBuilder(base); }
exports.patchOrientation = patchOrientation;
function buildOrientation() { return new OrientationBuilder(); }
exports.buildOrientation = buildOrientation;
var DirectiveEntityBuilder = (function () {
    function DirectiveEntityBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DirectiveEntityBuilder.prototype._i = function () {
    };
    DirectiveEntityBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DirectiveEntity";
        return this._p;
    };
    DirectiveEntityBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DirectiveEntityBuilder.prototype.directive = function (directive) {
        this._p.directive = directive;
        this._m["directive"] = true;
        return this;
    };
    return DirectiveEntityBuilder;
})();
function patchDirectiveEntity(base) { return new DirectiveEntityBuilder(base); }
exports.patchDirectiveEntity = patchDirectiveEntity;
function buildDirectiveEntity() { return new DirectiveEntityBuilder(); }
exports.buildDirectiveEntity = buildDirectiveEntity;
var BezierBuilder = (function () {
    function BezierBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BezierBuilder.prototype._i = function () {
    };
    BezierBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Bezier";
        return this._p;
    };
    BezierBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BezierBuilder.prototype.bezierX2 = function (bezierX2) {
        this._p.bezierX2 = bezierX2;
        this._m["bezierX2"] = true;
        return this;
    };
    BezierBuilder.prototype.bezierOffset = function (bezierOffset) {
        this._p.bezierOffset = bezierOffset;
        this._m["bezierOffset"] = true;
        return this;
    };
    BezierBuilder.prototype.bezierOffset2 = function (bezierOffset2) {
        this._p.bezierOffset2 = bezierOffset2;
        this._m["bezierOffset2"] = true;
        return this;
    };
    BezierBuilder.prototype.bezierX = function (bezierX) {
        this._p.bezierX = bezierX;
        this._m["bezierX"] = true;
        return this;
    };
    BezierBuilder.prototype.bezierY = function (bezierY) {
        this._p.bezierY = bezierY;
        this._m["bezierY"] = true;
        return this;
    };
    BezierBuilder.prototype.bezierY2 = function (bezierY2) {
        this._p.bezierY2 = bezierY2;
        this._m["bezierY2"] = true;
        return this;
    };
    return BezierBuilder;
})();
function patchBezier(base) { return new BezierBuilder(base); }
exports.patchBezier = patchBezier;
function buildBezier() { return new BezierBuilder(); }
exports.buildBezier = buildBezier;
var FontBuilder = (function () {
    function FontBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FontBuilder.prototype._i = function () {
    };
    FontBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Font";
        return this._p;
    };
    FontBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FontBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    FontBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    FontBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    FontBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return FontBuilder;
})();
function patchFont(base) { return new FontBuilder(base); }
exports.patchFont = patchFont;
function buildFont() { return new FontBuilder(); }
exports.buildFont = buildFont;
var ColorBuilder = (function () {
    function ColorBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ColorBuilder.prototype._i = function () {
    };
    ColorBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Color";
        return this._p;
    };
    ColorBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ColorBuilder.prototype.color = function (color) {
        this._p.color = color;
        this._m["color"] = true;
        return this;
    };
    return ColorBuilder;
})();
function patchColor(base) { return new ColorBuilder(base); }
exports.patchColor = patchColor;
function buildColor() { return new ColorBuilder(); }
exports.buildColor = buildColor;
var TextDecorationBuilder = (function () {
    function TextDecorationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextDecorationBuilder.prototype._i = function () {
    };
    TextDecorationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TextDecoration";
        return this._p;
    };
    TextDecorationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextDecorationBuilder.prototype.underline = function (underline) {
        this._p.underline = underline;
        this._m["underline"] = true;
        return this;
    };
    TextDecorationBuilder.prototype.overline = function (overline) {
        this._p.overline = overline;
        this._m["overline"] = true;
        return this;
    };
    TextDecorationBuilder.prototype.lineThrough = function (lineThrough) {
        this._p.lineThrough = lineThrough;
        this._m["lineThrough"] = true;
        return this;
    };
    return TextDecorationBuilder;
})();
function patchTextDecoration(base) { return new TextDecorationBuilder(base); }
exports.patchTextDecoration = patchTextDecoration;
function buildTextDecoration() { return new TextDecorationBuilder(); }
exports.buildTextDecoration = buildTextDecoration;
var JustifyBuilder = (function () {
    function JustifyBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    JustifyBuilder.prototype._i = function () {
    };
    JustifyBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Justify";
        return this._p;
    };
    JustifyBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    JustifyBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return JustifyBuilder;
})();
function patchJustify(base) { return new JustifyBuilder(base); }
exports.patchJustify = patchJustify;
function buildJustify() { return new JustifyBuilder(); }
exports.buildJustify = buildJustify;
var HalignBuilder = (function () {
    function HalignBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HalignBuilder.prototype._i = function () {
    };
    HalignBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Halign";
        return this._p;
    };
    HalignBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HalignBuilder.prototype.halign = function (halign) {
        this._p.halign = halign;
        this._m["halign"] = true;
        return this;
    };
    return HalignBuilder;
})();
function patchHalign(base) { return new HalignBuilder(base); }
exports.patchHalign = patchHalign;
function buildHalign() { return new HalignBuilder(); }
exports.buildHalign = buildHalign;
var ValignBuilder = (function () {
    function ValignBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ValignBuilder.prototype._i = function () {
    };
    ValignBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Valign";
        return this._p;
    };
    ValignBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ValignBuilder.prototype.valign = function (valign) {
        this._p.valign = valign;
        this._m["valign"] = true;
        return this;
    };
    return ValignBuilder;
})();
function patchValign(base) { return new ValignBuilder(base); }
exports.patchValign = patchValign;
function buildValign() { return new ValignBuilder(); }
exports.buildValign = buildValign;
var ValignImageBuilder = (function () {
    function ValignImageBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ValignImageBuilder.prototype._i = function () {
    };
    ValignImageBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ValignImage";
        return this._p;
    };
    ValignImageBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ValignImageBuilder.prototype.valignImage = function (valignImage) {
        this._p.valignImage = valignImage;
        this._m["valignImage"] = true;
        return this;
    };
    return ValignImageBuilder;
})();
function patchValignImage(base) { return new ValignImageBuilder(base); }
exports.patchValignImage = patchValignImage;
function buildValignImage() { return new ValignImageBuilder(); }
exports.buildValignImage = buildValignImage;
var LetterSpacingBuilder = (function () {
    function LetterSpacingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LetterSpacingBuilder.prototype._i = function () {
    };
    LetterSpacingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LetterSpacing";
        return this._p;
    };
    LetterSpacingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LetterSpacingBuilder.prototype.letterSpacing = function (letterSpacing) {
        this._p.letterSpacing = letterSpacing;
        this._m["letterSpacing"] = true;
        return this;
    };
    return LetterSpacingBuilder;
})();
function patchLetterSpacing(base) { return new LetterSpacingBuilder(base); }
exports.patchLetterSpacing = patchLetterSpacing;
function buildLetterSpacing() { return new LetterSpacingBuilder(); }
exports.buildLetterSpacing = buildLetterSpacing;
var LineHeightBuilder = (function () {
    function LineHeightBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LineHeightBuilder.prototype._i = function () {
    };
    LineHeightBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LineHeight";
        return this._p;
    };
    LineHeightBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LineHeightBuilder.prototype.lineHeight = function (lineHeight) {
        this._p.lineHeight = lineHeight;
        this._m["lineHeight"] = true;
        return this;
    };
    return LineHeightBuilder;
})();
function patchLineHeight(base) { return new LineHeightBuilder(base); }
exports.patchLineHeight = patchLineHeight;
function buildLineHeight() { return new LineHeightBuilder(); }
exports.buildLineHeight = buildLineHeight;
var TextDirectionBuilder = (function () {
    function TextDirectionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextDirectionBuilder.prototype._i = function () {
    };
    TextDirectionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TextDirection";
        return this._p;
    };
    TextDirectionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextDirectionBuilder.prototype.dir = function (dir) {
        this._p.dir = dir;
        this._m["dir"] = true;
        return this;
    };
    return TextDirectionBuilder;
})();
function patchTextDirection(base) { return new TextDirectionBuilder(base); }
exports.patchTextDirection = patchTextDirection;
function buildTextDirection() { return new TextDirectionBuilder(); }
exports.buildTextDirection = buildTextDirection;
var TextRotationBuilder = (function () {
    function TextRotationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextRotationBuilder.prototype._i = function () {
    };
    TextRotationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TextRotation";
        return this._p;
    };
    TextRotationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextRotationBuilder.prototype.rotation = function (rotation) {
        this._p.rotation = rotation;
        this._m["rotation"] = true;
        return this;
    };
    return TextRotationBuilder;
})();
function patchTextRotation(base) { return new TextRotationBuilder(base); }
exports.patchTextRotation = patchTextRotation;
function buildTextRotation() { return new TextRotationBuilder(); }
exports.buildTextRotation = buildTextRotation;
var EnclosureBuilder = (function () {
    function EnclosureBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EnclosureBuilder.prototype._i = function () {
    };
    EnclosureBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Enclosure";
        return this._p;
    };
    EnclosureBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EnclosureBuilder.prototype.enclosure = function (enclosure) {
        this._p.enclosure = enclosure;
        this._m["enclosure"] = true;
        return this;
    };
    return EnclosureBuilder;
})();
function patchEnclosure(base) { return new EnclosureBuilder(base); }
exports.patchEnclosure = patchEnclosure;
function buildEnclosure() { return new EnclosureBuilder(); }
exports.buildEnclosure = buildEnclosure;
var PrintStyleBuilder = (function () {
    function PrintStyleBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintStyleBuilder.prototype._i = function () {
    };
    PrintStyleBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PrintStyle";
        return this._p;
    };
    PrintStyleBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintStyleBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PrintStyleBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PrintStyleBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PrintStyleBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PrintStyleBuilder;
})();
function patchPrintStyle(base) { return new PrintStyleBuilder(base); }
exports.patchPrintStyle = patchPrintStyle;
function buildPrintStyle() { return new PrintStyleBuilder(); }
exports.buildPrintStyle = buildPrintStyle;
var PrintStyleAlignBuilder = (function () {
    function PrintStyleAlignBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintStyleAlignBuilder.prototype._i = function () {
    };
    PrintStyleAlignBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PrintStyleAlign";
        return this._p;
    };
    PrintStyleAlignBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintStyleAlignBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PrintStyleAlignBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PrintStyleAlignBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PrintStyleAlignBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PrintStyleAlignBuilder;
})();
function patchPrintStyleAlign(base) { return new PrintStyleAlignBuilder(base); }
exports.patchPrintStyleAlign = patchPrintStyleAlign;
function buildPrintStyleAlign() { return new PrintStyleAlignBuilder(); }
exports.buildPrintStyleAlign = buildPrintStyleAlign;
var LineShapeBuilder = (function () {
    function LineShapeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LineShapeBuilder.prototype._i = function () {
    };
    LineShapeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LineShape";
        return this._p;
    };
    LineShapeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LineShapeBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return LineShapeBuilder;
})();
function patchLineShape(base) { return new LineShapeBuilder(base); }
exports.patchLineShape = patchLineShape;
function buildLineShape() { return new LineShapeBuilder(); }
exports.buildLineShape = buildLineShape;
var LineTypeBuilder = (function () {
    function LineTypeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LineTypeBuilder.prototype._i = function () {
    };
    LineTypeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LineType";
        return this._p;
    };
    LineTypeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LineTypeBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return LineTypeBuilder;
})();
function patchLineType(base) { return new LineTypeBuilder(base); }
exports.patchLineType = patchLineType;
function buildLineType() { return new LineTypeBuilder(); }
exports.buildLineType = buildLineType;
var DashedFormattingBuilder = (function () {
    function DashedFormattingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DashedFormattingBuilder.prototype._i = function () {
    };
    DashedFormattingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DashedFormatting";
        return this._p;
    };
    DashedFormattingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DashedFormattingBuilder.prototype.dashLength = function (dashLength) {
        this._p.dashLength = dashLength;
        this._m["dashLength"] = true;
        return this;
    };
    DashedFormattingBuilder.prototype.spaceLength = function (spaceLength) {
        this._p.spaceLength = spaceLength;
        this._m["spaceLength"] = true;
        return this;
    };
    return DashedFormattingBuilder;
})();
function patchDashedFormatting(base) { return new DashedFormattingBuilder(base); }
exports.patchDashedFormatting = patchDashedFormatting;
function buildDashedFormatting() { return new DashedFormattingBuilder(); }
exports.buildDashedFormatting = buildDashedFormatting;
var PrintObjectBuilder = (function () {
    function PrintObjectBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintObjectBuilder.prototype._i = function () {
    };
    PrintObjectBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PrintObject";
        return this._p;
    };
    PrintObjectBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintObjectBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return PrintObjectBuilder;
})();
function patchPrintObject(base) { return new PrintObjectBuilder(base); }
exports.patchPrintObject = patchPrintObject;
function buildPrintObject() { return new PrintObjectBuilder(); }
exports.buildPrintObject = buildPrintObject;
var PrintSpacingBuilder = (function () {
    function PrintSpacingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintSpacingBuilder.prototype._i = function () {
    };
    PrintSpacingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PrintSpacing";
        return this._p;
    };
    PrintSpacingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintSpacingBuilder.prototype.printSpacing = function (printSpacing) {
        this._p.printSpacing = printSpacing;
        this._m["printSpacing"] = true;
        return this;
    };
    return PrintSpacingBuilder;
})();
function patchPrintSpacing(base) { return new PrintSpacingBuilder(base); }
exports.patchPrintSpacing = patchPrintSpacing;
function buildPrintSpacing() { return new PrintSpacingBuilder(); }
exports.buildPrintSpacing = buildPrintSpacing;
var PrintoutBuilder = (function () {
    function PrintoutBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintoutBuilder.prototype._i = function () {
    };
    PrintoutBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Printout";
        return this._p;
    };
    PrintoutBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintoutBuilder.prototype.printDot = function (printDot) {
        this._p.printDot = printDot;
        this._m["printDot"] = true;
        return this;
    };
    PrintoutBuilder.prototype.printLyric = function (printLyric) {
        this._p.printLyric = printLyric;
        this._m["printLyric"] = true;
        return this;
    };
    PrintoutBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return PrintoutBuilder;
})();
function patchPrintout(base) { return new PrintoutBuilder(base); }
exports.patchPrintout = patchPrintout;
function buildPrintout() { return new PrintoutBuilder(); }
exports.buildPrintout = buildPrintout;
var TextFormattingBuilder = (function () {
    function TextFormattingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextFormattingBuilder.prototype._i = function () {
    };
    TextFormattingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TextFormatting";
        return this._p;
    };
    TextFormattingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextFormattingBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return TextFormattingBuilder;
})();
function patchTextFormatting(base) { return new TextFormattingBuilder(base); }
exports.patchTextFormatting = patchTextFormatting;
function buildTextFormatting() { return new TextFormattingBuilder(); }
exports.buildTextFormatting = buildTextFormatting;
var LevelDisplayBuilder = (function () {
    function LevelDisplayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LevelDisplayBuilder.prototype._i = function () {
    };
    LevelDisplayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LevelDisplay";
        return this._p;
    };
    LevelDisplayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LevelDisplayBuilder.prototype.bracket = function (bracket) {
        this._p.bracket = bracket;
        this._m["bracket"] = true;
        return this;
    };
    LevelDisplayBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    LevelDisplayBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    return LevelDisplayBuilder;
})();
function patchLevelDisplay(base) { return new LevelDisplayBuilder(base); }
exports.patchLevelDisplay = patchLevelDisplay;
function buildLevelDisplay() { return new LevelDisplayBuilder(); }
exports.buildLevelDisplay = buildLevelDisplay;
var TrillSoundBuilder = (function () {
    function TrillSoundBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TrillSoundBuilder.prototype._i = function () {
    };
    TrillSoundBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TrillSound";
        return this._p;
    };
    TrillSoundBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TrillSoundBuilder.prototype.startNote = function (startNote) {
        this._p.startNote = startNote;
        this._m["startNote"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.accelerate = function (accelerate) {
        this._p.accelerate = accelerate;
        this._m["accelerate"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.beats = function (beats) {
        this._p.beats = beats;
        this._m["beats"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.lastBeat = function (lastBeat) {
        this._p.lastBeat = lastBeat;
        this._m["lastBeat"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.trillStep = function (trillStep) {
        this._p.trillStep = trillStep;
        this._m["trillStep"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.twoNoteTurn = function (twoNoteTurn) {
        this._p.twoNoteTurn = twoNoteTurn;
        this._m["twoNoteTurn"] = true;
        return this;
    };
    TrillSoundBuilder.prototype.secondBeat = function (secondBeat) {
        this._p.secondBeat = secondBeat;
        this._m["secondBeat"] = true;
        return this;
    };
    return TrillSoundBuilder;
})();
function patchTrillSound(base) { return new TrillSoundBuilder(base); }
exports.patchTrillSound = patchTrillSound;
function buildTrillSound() { return new TrillSoundBuilder(); }
exports.buildTrillSound = buildTrillSound;
var BendSoundBuilder = (function () {
    function BendSoundBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BendSoundBuilder.prototype._i = function () {
    };
    BendSoundBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BendSound";
        return this._p;
    };
    BendSoundBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BendSoundBuilder.prototype.accelerate = function (accelerate) {
        this._p.accelerate = accelerate;
        this._m["accelerate"] = true;
        return this;
    };
    BendSoundBuilder.prototype.beats = function (beats) {
        this._p.beats = beats;
        this._m["beats"] = true;
        return this;
    };
    BendSoundBuilder.prototype.firstBeat = function (firstBeat) {
        this._p.firstBeat = firstBeat;
        this._m["firstBeat"] = true;
        return this;
    };
    BendSoundBuilder.prototype.lastBeat = function (lastBeat) {
        this._p.lastBeat = lastBeat;
        this._m["lastBeat"] = true;
        return this;
    };
    return BendSoundBuilder;
})();
function patchBendSound(base) { return new BendSoundBuilder(base); }
exports.patchBendSound = patchBendSound;
function buildBendSound() { return new BendSoundBuilder(); }
exports.buildBendSound = buildBendSound;
var TimeOnlyBuilder = (function () {
    function TimeOnlyBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimeOnlyBuilder.prototype._i = function () {
    };
    TimeOnlyBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TimeOnly";
        return this._p;
    };
    TimeOnlyBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TimeOnlyBuilder.prototype.timeOnly = function (timeOnly) {
        this._p.timeOnly = timeOnly;
        this._m["timeOnly"] = true;
        return this;
    };
    return TimeOnlyBuilder;
})();
function patchTimeOnly(base) { return new TimeOnlyBuilder(base); }
exports.patchTimeOnly = patchTimeOnly;
function buildTimeOnly() { return new TimeOnlyBuilder(); }
exports.buildTimeOnly = buildTimeOnly;
var DocumentAttributesBuilder = (function () {
    function DocumentAttributesBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DocumentAttributesBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["version"]) || this._b["version"] !== undefined || this._p.version !== undefined, "version is a required field");
    };
    DocumentAttributesBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DocumentAttributes";
        return this._p;
    };
    DocumentAttributesBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DocumentAttributesBuilder.prototype.version = function (version) {
        this._p.version = version;
        this._m["version"] = true;
        return this;
    };
    return DocumentAttributesBuilder;
})();
function patchDocumentAttributes(base) { return new DocumentAttributesBuilder(base); }
exports.patchDocumentAttributes = patchDocumentAttributes;
function buildDocumentAttributes() { return new DocumentAttributesBuilder(); }
exports.buildDocumentAttributes = buildDocumentAttributes;
var EditorialBuilder = (function () {
    function EditorialBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EditorialBuilder.prototype._i = function () {
    };
    EditorialBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Editorial";
        return this._p;
    };
    EditorialBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EditorialBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    EditorialBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    EditorialBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return EditorialBuilder;
})();
function patchEditorial(base) { return new EditorialBuilder(base); }
exports.patchEditorial = patchEditorial;
function buildEditorial() { return new EditorialBuilder(); }
exports.buildEditorial = buildEditorial;
var EditorialVoiceBuilder = (function () {
    function EditorialVoiceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EditorialVoiceBuilder.prototype._i = function () {
    };
    EditorialVoiceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "EditorialVoice";
        return this._p;
    };
    EditorialVoiceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EditorialVoiceBuilder.prototype.voice = function (voice) {
        this._p.voice = voice;
        this._m["voice"] = true;
        return this;
    };
    EditorialVoiceBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    EditorialVoiceBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    EditorialVoiceBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return EditorialVoiceBuilder;
})();
function patchEditorialVoice(base) { return new EditorialVoiceBuilder(base); }
exports.patchEditorialVoice = patchEditorialVoice;
function buildEditorialVoice() { return new EditorialVoiceBuilder(); }
exports.buildEditorialVoice = buildEditorialVoice;
var FootnoteBuilder = (function () {
    function FootnoteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FootnoteBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    FootnoteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Footnote";
        return this._p;
    };
    FootnoteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FootnoteBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    FootnoteBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return FootnoteBuilder;
})();
function patchFootnote(base) { return new FootnoteBuilder(base); }
exports.patchFootnote = patchFootnote;
function buildFootnote() { return new FootnoteBuilder(); }
exports.buildFootnote = buildFootnote;
var LevelBuilder = (function () {
    function LevelBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LevelBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    LevelBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Level";
        return this._p;
    };
    LevelBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LevelBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    LevelBuilder.prototype.reference = function (reference) {
        this._p.reference = reference;
        this._m["reference"] = true;
        return this;
    };
    LevelBuilder.prototype.bracket = function (bracket) {
        this._p.bracket = bracket;
        this._m["bracket"] = true;
        return this;
    };
    LevelBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    LevelBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    return LevelBuilder;
})();
function patchLevel(base) { return new LevelBuilder(base); }
exports.patchLevel = patchLevel;
function buildLevel() { return new LevelBuilder(); }
exports.buildLevel = buildLevel;
var FermataBuilder = (function () {
    function FermataBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FermataBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["shape"]) || this._b["shape"] !== undefined || this._p.shape !== undefined, "shape is a required field");
    };
    FermataBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Fermata";
        return this._p;
    };
    FermataBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FermataBuilder.prototype.shape = function (shape) {
        this._p.shape = shape;
        this._m["shape"] = true;
        return this;
    };
    FermataBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    FermataBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FermataBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FermataBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FermataBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FermataBuilder;
})();
function patchFermata(base) { return new FermataBuilder(base); }
exports.patchFermata = patchFermata;
function buildFermata() { return new FermataBuilder(); }
exports.buildFermata = buildFermata;
var WavyLineBuilder = (function () {
    function WavyLineBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WavyLineBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    WavyLineBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "WavyLine";
        return this._p;
    };
    WavyLineBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WavyLineBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    WavyLineBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    WavyLineBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    WavyLineBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    WavyLineBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    WavyLineBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return WavyLineBuilder;
})();
function patchWavyLine(base) { return new WavyLineBuilder(base); }
exports.patchWavyLine = patchWavyLine;
function buildWavyLine() { return new WavyLineBuilder(); }
exports.buildWavyLine = buildWavyLine;
var SegnoBuilder = (function () {
    function SegnoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SegnoBuilder.prototype._i = function () {
    };
    SegnoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Segno";
        return this._p;
    };
    SegnoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SegnoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    SegnoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    SegnoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    SegnoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return SegnoBuilder;
})();
function patchSegno(base) { return new SegnoBuilder(base); }
exports.patchSegno = patchSegno;
function buildSegno() { return new SegnoBuilder(); }
exports.buildSegno = buildSegno;
var CodaBuilder = (function () {
    function CodaBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CodaBuilder.prototype._i = function () {
    };
    CodaBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Coda";
        return this._p;
    };
    CodaBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CodaBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    CodaBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    CodaBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    CodaBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return CodaBuilder;
})();
function patchCoda(base) { return new CodaBuilder(base); }
exports.patchCoda = patchCoda;
function buildCoda() { return new CodaBuilder(); }
exports.buildCoda = buildCoda;
var NormalDotBuilder = (function () {
    function NormalDotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NormalDotBuilder.prototype._i = function () {
    };
    NormalDotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "NormalDot";
        return this._p;
    };
    NormalDotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return NormalDotBuilder;
})();
function patchNormalDot(base) { return new NormalDotBuilder(base); }
exports.patchNormalDot = patchNormalDot;
function buildNormalDot() { return new NormalDotBuilder(); }
exports.buildNormalDot = buildNormalDot;
var DynamicsBuilder = (function () {
    function DynamicsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DynamicsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["fp"]) || this._b["fp"] !== undefined || this._p.fp !== undefined, "fp is a required field");
        console.assert((this._o && !this._m["pp"]) || this._b["pp"] !== undefined || this._p.pp !== undefined, "pp is a required field");
        console.assert((this._o && !this._m["ppp"]) || this._b["ppp"] !== undefined || this._p.ppp !== undefined, "ppp is a required field");
        console.assert((this._o && !this._m["fff"]) || this._b["fff"] !== undefined || this._p.fff !== undefined, "fff is a required field");
        console.assert((this._o && !this._m["sf"]) || this._b["sf"] !== undefined || this._p.sf !== undefined, "sf is a required field");
        console.assert((this._o && !this._m["rf"]) || this._b["rf"] !== undefined || this._p.rf !== undefined, "rf is a required field");
        console.assert((this._o && !this._m["mp"]) || this._b["mp"] !== undefined || this._p.mp !== undefined, "mp is a required field");
        console.assert((this._o && !this._m["sfpp"]) || this._b["sfpp"] !== undefined || this._p.sfpp !== undefined, "sfpp is a required field");
        console.assert((this._o && !this._m["f"]) || this._b["f"] !== undefined || this._p.f !== undefined, "f is a required field");
        console.assert((this._o && !this._m["ffffff"]) || this._b["ffffff"] !== undefined || this._p.ffffff !== undefined, "ffffff is a required field");
        console.assert((this._o && !this._m["sfz"]) || this._b["sfz"] !== undefined || this._p.sfz !== undefined, "sfz is a required field");
        console.assert((this._o && !this._m["ff"]) || this._b["ff"] !== undefined || this._p.ff !== undefined, "ff is a required field");
        console.assert((this._o && !this._m["pppppp"]) || this._b["pppppp"] !== undefined || this._p.pppppp !== undefined, "pppppp is a required field");
        console.assert((this._o && !this._m["rfz"]) || this._b["rfz"] !== undefined || this._p.rfz !== undefined, "rfz is a required field");
        console.assert((this._o && !this._m["fz"]) || this._b["fz"] !== undefined || this._p.fz !== undefined, "fz is a required field");
        console.assert((this._o && !this._m["ppppp"]) || this._b["ppppp"] !== undefined || this._p.ppppp !== undefined, "ppppp is a required field");
        console.assert((this._o && !this._m["mf"]) || this._b["mf"] !== undefined || this._p.mf !== undefined, "mf is a required field");
        console.assert((this._o && !this._m["pppp"]) || this._b["pppp"] !== undefined || this._p.pppp !== undefined, "pppp is a required field");
        console.assert((this._o && !this._m["fffff"]) || this._b["fffff"] !== undefined || this._p.fffff !== undefined, "fffff is a required field");
        console.assert((this._o && !this._m["sffz"]) || this._b["sffz"] !== undefined || this._p.sffz !== undefined, "sffz is a required field");
        console.assert((this._o && !this._m["sfp"]) || this._b["sfp"] !== undefined || this._p.sfp !== undefined, "sfp is a required field");
        console.assert((this._o && !this._m["p"]) || this._b["p"] !== undefined || this._p.p !== undefined, "p is a required field");
        console.assert((this._o && !this._m["ffff"]) || this._b["ffff"] !== undefined || this._p.ffff !== undefined, "ffff is a required field");
    };
    DynamicsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Dynamics";
        return this._p;
    };
    DynamicsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DynamicsBuilder.prototype.fp = function (fp) {
        this._p.fp = fp;
        this._m["fp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.pp = function (pp) {
        this._p.pp = pp;
        this._m["pp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.ppp = function (ppp) {
        this._p.ppp = ppp;
        this._m["ppp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.fff = function (fff) {
        this._p.fff = fff;
        this._m["fff"] = true;
        return this;
    };
    DynamicsBuilder.prototype.sf = function (sf) {
        this._p.sf = sf;
        this._m["sf"] = true;
        return this;
    };
    DynamicsBuilder.prototype.rf = function (rf) {
        this._p.rf = rf;
        this._m["rf"] = true;
        return this;
    };
    DynamicsBuilder.prototype.mp = function (mp) {
        this._p.mp = mp;
        this._m["mp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.sfpp = function (sfpp) {
        this._p.sfpp = sfpp;
        this._m["sfpp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.f = function (f) {
        this._p.f = f;
        this._m["f"] = true;
        return this;
    };
    DynamicsBuilder.prototype.ffffff = function (ffffff) {
        this._p.ffffff = ffffff;
        this._m["ffffff"] = true;
        return this;
    };
    DynamicsBuilder.prototype.sfz = function (sfz) {
        this._p.sfz = sfz;
        this._m["sfz"] = true;
        return this;
    };
    DynamicsBuilder.prototype.ff = function (ff) {
        this._p.ff = ff;
        this._m["ff"] = true;
        return this;
    };
    DynamicsBuilder.prototype.pppppp = function (pppppp) {
        this._p.pppppp = pppppp;
        this._m["pppppp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.rfz = function (rfz) {
        this._p.rfz = rfz;
        this._m["rfz"] = true;
        return this;
    };
    DynamicsBuilder.prototype.otherDynamics = function (otherDynamics) {
        this._p.otherDynamics = otherDynamics;
        this._m["otherDynamics"] = true;
        return this;
    };
    DynamicsBuilder.prototype.fz = function (fz) {
        this._p.fz = fz;
        this._m["fz"] = true;
        return this;
    };
    DynamicsBuilder.prototype.ppppp = function (ppppp) {
        this._p.ppppp = ppppp;
        this._m["ppppp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.mf = function (mf) {
        this._p.mf = mf;
        this._m["mf"] = true;
        return this;
    };
    DynamicsBuilder.prototype.pppp = function (pppp) {
        this._p.pppp = pppp;
        this._m["pppp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.fffff = function (fffff) {
        this._p.fffff = fffff;
        this._m["fffff"] = true;
        return this;
    };
    DynamicsBuilder.prototype.sffz = function (sffz) {
        this._p.sffz = sffz;
        this._m["sffz"] = true;
        return this;
    };
    DynamicsBuilder.prototype.sfp = function (sfp) {
        this._p.sfp = sfp;
        this._m["sfp"] = true;
        return this;
    };
    DynamicsBuilder.prototype.p = function (p) {
        this._p.p = p;
        this._m["p"] = true;
        return this;
    };
    DynamicsBuilder.prototype.ffff = function (ffff) {
        this._p.ffff = ffff;
        this._m["ffff"] = true;
        return this;
    };
    DynamicsBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DynamicsBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DynamicsBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DynamicsBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DynamicsBuilder;
})();
function patchDynamics(base) { return new DynamicsBuilder(base); }
exports.patchDynamics = patchDynamics;
function buildDynamics() { return new DynamicsBuilder(); }
exports.buildDynamics = buildDynamics;
var FingeringBuilder = (function () {
    function FingeringBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FingeringBuilder.prototype._i = function () {
    };
    FingeringBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Fingering";
        return this._p;
    };
    FingeringBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FingeringBuilder.prototype.substitution = function (substitution) {
        this._p.substitution = substitution;
        this._m["substitution"] = true;
        return this;
    };
    FingeringBuilder.prototype.finger = function (finger) {
        this._p.finger = finger;
        this._m["finger"] = true;
        return this;
    };
    FingeringBuilder.prototype.alternate = function (alternate) {
        this._p.alternate = alternate;
        this._m["alternate"] = true;
        return this;
    };
    FingeringBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FingeringBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FingeringBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FingeringBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FingeringBuilder;
})();
function patchFingering(base) { return new FingeringBuilder(base); }
exports.patchFingering = patchFingering;
function buildFingering() { return new FingeringBuilder(); }
exports.buildFingering = buildFingering;
var FretBuilder = (function () {
    function FretBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FretBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["fret"]) || this._b["fret"] !== undefined || this._p.fret !== undefined, "fret is a required field");
    };
    FretBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Fret";
        return this._p;
    };
    FretBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FretBuilder.prototype.fret = function (fret) {
        this._p.fret = fret;
        this._m["fret"] = true;
        return this;
    };
    FretBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    FretBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    FretBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    FretBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return FretBuilder;
})();
function patchFret(base) { return new FretBuilder(base); }
exports.patchFret = patchFret;
function buildFret() { return new FretBuilder(); }
exports.buildFret = buildFret;
var StringBuilder = (function () {
    function StringBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StringBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["stringNum"]) || this._b["stringNum"] !== undefined || this._p.stringNum !== undefined, "stringNum is a required field");
    };
    StringBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "String";
        return this._p;
    };
    StringBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StringBuilder.prototype.stringNum = function (stringNum) {
        this._p.stringNum = stringNum;
        this._m["stringNum"] = true;
        return this;
    };
    StringBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StringBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StringBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StringBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StringBuilder;
})();
function patchString(base) { return new StringBuilder(base); }
exports.patchString = patchString;
function buildString() { return new StringBuilder(); }
exports.buildString = buildString;
var DisplayTextBuilder = (function () {
    function DisplayTextBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DisplayTextBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    DisplayTextBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DisplayText";
        return this._p;
    };
    DisplayTextBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DisplayTextBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    DisplayTextBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return DisplayTextBuilder;
})();
function patchDisplayText(base) { return new DisplayTextBuilder(base); }
exports.patchDisplayText = patchDisplayText;
function buildDisplayText() { return new DisplayTextBuilder(); }
exports.buildDisplayText = buildDisplayText;
var AccidentalTextBuilder = (function () {
    function AccidentalTextBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccidentalTextBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    AccidentalTextBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "AccidentalText";
        return this._p;
    };
    AccidentalTextBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccidentalTextBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    AccidentalTextBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return AccidentalTextBuilder;
})();
function patchAccidentalText(base) { return new AccidentalTextBuilder(base); }
exports.patchAccidentalText = patchAccidentalText;
function buildAccidentalText() { return new AccidentalTextBuilder(); }
exports.buildAccidentalText = buildAccidentalText;
var PartNameDisplayBuilder = (function () {
    function PartNameDisplayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartNameDisplayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    PartNameDisplayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartNameDisplay";
        return this._p;
    };
    PartNameDisplayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartNameDisplayBuilder.prototype.name = function (build) {
        this._b["name"] = build(new TextArrayBuilder(this._o && this._o["name"]));
        this._m["name"] = true;
        return this;
    };
    PartNameDisplayBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return PartNameDisplayBuilder;
})();
function patchPartNameDisplay(base) { return new PartNameDisplayBuilder(base); }
exports.patchPartNameDisplay = patchPartNameDisplay;
function buildPartNameDisplay() { return new PartNameDisplayBuilder(); }
exports.buildPartNameDisplay = buildPartNameDisplay;
var PartAbbreviationDisplayBuilder = (function () {
    function PartAbbreviationDisplayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartAbbreviationDisplayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    PartAbbreviationDisplayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartAbbreviationDisplay";
        return this._p;
    };
    PartAbbreviationDisplayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartAbbreviationDisplayBuilder.prototype.name = function (build) {
        this._b["name"] = build(new TextArrayBuilder(this._o && this._o["name"]));
        this._m["name"] = true;
        return this;
    };
    PartAbbreviationDisplayBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return PartAbbreviationDisplayBuilder;
})();
function patchPartAbbreviationDisplay(base) { return new PartAbbreviationDisplayBuilder(base); }
exports.patchPartAbbreviationDisplay = patchPartAbbreviationDisplay;
function buildPartAbbreviationDisplay() { return new PartAbbreviationDisplayBuilder(); }
exports.buildPartAbbreviationDisplay = buildPartAbbreviationDisplay;
var MidiDeviceBuilder = (function () {
    function MidiDeviceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MidiDeviceBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["deviceName"]) || this._b["deviceName"] !== undefined || this._p.deviceName !== undefined, "deviceName is a required field");
    };
    MidiDeviceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MidiDevice";
        return this._p;
    };
    MidiDeviceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MidiDeviceBuilder.prototype.port = function (port) {
        this._p.port = port;
        this._m["port"] = true;
        return this;
    };
    MidiDeviceBuilder.prototype.deviceName = function (deviceName) {
        this._p.deviceName = deviceName;
        this._m["deviceName"] = true;
        return this;
    };
    MidiDeviceBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    return MidiDeviceBuilder;
})();
function patchMidiDevice(base) { return new MidiDeviceBuilder(base); }
exports.patchMidiDevice = patchMidiDevice;
function buildMidiDevice() { return new MidiDeviceBuilder(); }
exports.buildMidiDevice = buildMidiDevice;
var MidiInstrumentBuilder = (function () {
    function MidiInstrumentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MidiInstrumentBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["id"]) || this._b["id"] !== undefined || this._p.id !== undefined, "id is a required field");
    };
    MidiInstrumentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MidiInstrument";
        return this._p;
    };
    MidiInstrumentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MidiInstrumentBuilder.prototype.midiUnpitched = function (midiUnpitched) {
        this._p.midiUnpitched = midiUnpitched;
        this._m["midiUnpitched"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.volume = function (volume) {
        this._p.volume = volume;
        this._m["volume"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.pan = function (pan) {
        this._p.pan = pan;
        this._m["pan"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.elevation = function (elevation) {
        this._p.elevation = elevation;
        this._m["elevation"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.midiBank = function (midiBank) {
        this._p.midiBank = midiBank;
        this._m["midiBank"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.midiProgram = function (midiProgram) {
        this._p.midiProgram = midiProgram;
        this._m["midiProgram"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.midiChannel = function (midiChannel) {
        this._p.midiChannel = midiChannel;
        this._m["midiChannel"] = true;
        return this;
    };
    MidiInstrumentBuilder.prototype.midiName = function (midiName) {
        this._p.midiName = midiName;
        this._m["midiName"] = true;
        return this;
    };
    return MidiInstrumentBuilder;
})();
function patchMidiInstrument(base) { return new MidiInstrumentBuilder(base); }
exports.patchMidiInstrument = patchMidiInstrument;
function buildMidiInstrument() { return new MidiInstrumentBuilder(); }
exports.buildMidiInstrument = buildMidiInstrument;
var PlayBuilder = (function () {
    function PlayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PlayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["id"]) || this._b["id"] !== undefined || this._p.id !== undefined, "id is a required field");
    };
    PlayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Play";
        return this._p;
    };
    PlayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PlayBuilder.prototype.ipa = function (ipa) {
        this._p.ipa = ipa;
        this._m["ipa"] = true;
        return this;
    };
    PlayBuilder.prototype.mute = function (mute) {
        this._p.mute = mute;
        this._m["mute"] = true;
        return this;
    };
    PlayBuilder.prototype.otherPlay = function (build) {
        this._b["otherPlay"] = build(new OtherPlayBuilder(this._o && this._o["otherPlay"]));
        this._m["otherPlay"] = true;
        return this;
    };
    PlayBuilder.prototype.semiPitched = function (semiPitched) {
        this._p.semiPitched = semiPitched;
        this._m["semiPitched"] = true;
        return this;
    };
    PlayBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    return PlayBuilder;
})();
function patchPlay(base) { return new PlayBuilder(base); }
exports.patchPlay = patchPlay;
function buildPlay() { return new PlayBuilder(); }
exports.buildPlay = buildPlay;
var OtherPlayBuilder = (function () {
    function OtherPlayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherPlayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    OtherPlayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherPlay";
        return this._p;
    };
    OtherPlayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherPlayBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherPlayBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return OtherPlayBuilder;
})();
function patchOtherPlay(base) { return new OtherPlayBuilder(base); }
exports.patchOtherPlay = patchOtherPlay;
function buildOtherPlay() { return new OtherPlayBuilder(); }
exports.buildOtherPlay = buildOtherPlay;
var ScalingBuilder = (function () {
    function ScalingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScalingBuilder.prototype._i = function () {
    };
    ScalingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Scaling";
        return this._p;
    };
    ScalingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScalingBuilder.prototype.tenths = function (tenths) {
        this._p.tenths = tenths;
        this._m["tenths"] = true;
        return this;
    };
    ScalingBuilder.prototype.millimeters = function (millimeters) {
        this._p.millimeters = millimeters;
        this._m["millimeters"] = true;
        return this;
    };
    return ScalingBuilder;
})();
function patchScaling(base) { return new ScalingBuilder(base); }
exports.patchScaling = patchScaling;
function buildScaling() { return new ScalingBuilder(); }
exports.buildScaling = buildScaling;
var PageMarginsBuilder = (function () {
    function PageMarginsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PageMarginsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["topMargin"]) || this._b["topMargin"] !== undefined || this._p.topMargin !== undefined, "topMargin is a required field");
        console.assert((this._o && !this._m["leftMargin"]) || this._b["leftMargin"] !== undefined || this._p.leftMargin !== undefined, "leftMargin is a required field");
        console.assert((this._o && !this._m["bottomMargin"]) || this._b["bottomMargin"] !== undefined || this._p.bottomMargin !== undefined, "bottomMargin is a required field");
        console.assert((this._o && !this._m["rightMargin"]) || this._b["rightMargin"] !== undefined || this._p.rightMargin !== undefined, "rightMargin is a required field");
    };
    PageMarginsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PageMargins";
        return this._p;
    };
    PageMarginsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PageMarginsBuilder.prototype.topMargin = function (topMargin) {
        this._p.topMargin = topMargin;
        this._m["topMargin"] = true;
        return this;
    };
    PageMarginsBuilder.prototype.leftMargin = function (leftMargin) {
        this._p.leftMargin = leftMargin;
        this._m["leftMargin"] = true;
        return this;
    };
    PageMarginsBuilder.prototype.bottomMargin = function (bottomMargin) {
        this._p.bottomMargin = bottomMargin;
        this._m["bottomMargin"] = true;
        return this;
    };
    PageMarginsBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PageMarginsBuilder.prototype.rightMargin = function (rightMargin) {
        this._p.rightMargin = rightMargin;
        this._m["rightMargin"] = true;
        return this;
    };
    return PageMarginsBuilder;
})();
function patchPageMargins(base) { return new PageMarginsBuilder(base); }
exports.patchPageMargins = patchPageMargins;
function buildPageMargins() { return new PageMarginsBuilder(); }
exports.buildPageMargins = buildPageMargins;
var PageLayoutBuilder = (function () {
    function PageLayoutBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PageLayoutBuilder.prototype._i = function () {
    };
    PageLayoutBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PageLayout";
        return this._p;
    };
    PageLayoutBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PageLayoutBuilder.prototype.pageHeight = function (pageHeight) {
        this._p.pageHeight = pageHeight;
        this._m["pageHeight"] = true;
        return this;
    };
    PageLayoutBuilder.prototype.pageWidth = function (pageWidth) {
        this._p.pageWidth = pageWidth;
        this._m["pageWidth"] = true;
        return this;
    };
    PageLayoutBuilder.prototype.pageMargins = function (pageMargins) {
        this._p.pageMargins = pageMargins;
        this._m["pageMargins"] = true;
        return this;
    };
    return PageLayoutBuilder;
})();
function patchPageLayout(base) { return new PageLayoutBuilder(base); }
exports.patchPageLayout = patchPageLayout;
function buildPageLayout() { return new PageLayoutBuilder(); }
exports.buildPageLayout = buildPageLayout;
var SystemLayoutBuilder = (function () {
    function SystemLayoutBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SystemLayoutBuilder.prototype._i = function () {
    };
    SystemLayoutBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "SystemLayout";
        return this._p;
    };
    SystemLayoutBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SystemLayoutBuilder.prototype.systemDividers = function (build) {
        this._b["systemDividers"] = build(new SystemDividersBuilder(this._o && this._o["systemDividers"]));
        this._m["systemDividers"] = true;
        return this;
    };
    SystemLayoutBuilder.prototype.systemMargins = function (build) {
        this._b["systemMargins"] = build(new SystemMarginsBuilder(this._o && this._o["systemMargins"]));
        this._m["systemMargins"] = true;
        return this;
    };
    SystemLayoutBuilder.prototype.systemDistance = function (systemDistance) {
        this._p.systemDistance = systemDistance;
        this._m["systemDistance"] = true;
        return this;
    };
    SystemLayoutBuilder.prototype.topSystemDistance = function (topSystemDistance) {
        this._p.topSystemDistance = topSystemDistance;
        this._m["topSystemDistance"] = true;
        return this;
    };
    return SystemLayoutBuilder;
})();
function patchSystemLayout(base) { return new SystemLayoutBuilder(base); }
exports.patchSystemLayout = patchSystemLayout;
function buildSystemLayout() { return new SystemLayoutBuilder(); }
exports.buildSystemLayout = buildSystemLayout;
var SystemMarginsBuilder = (function () {
    function SystemMarginsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SystemMarginsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["leftMargin"]) || this._b["leftMargin"] !== undefined || this._p.leftMargin !== undefined, "leftMargin is a required field");
        console.assert((this._o && !this._m["rightMargin"]) || this._b["rightMargin"] !== undefined || this._p.rightMargin !== undefined, "rightMargin is a required field");
    };
    SystemMarginsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "SystemMargins";
        return this._p;
    };
    SystemMarginsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SystemMarginsBuilder.prototype.leftMargin = function (leftMargin) {
        this._p.leftMargin = leftMargin;
        this._m["leftMargin"] = true;
        return this;
    };
    SystemMarginsBuilder.prototype.rightMargin = function (rightMargin) {
        this._p.rightMargin = rightMargin;
        this._m["rightMargin"] = true;
        return this;
    };
    return SystemMarginsBuilder;
})();
function patchSystemMargins(base) { return new SystemMarginsBuilder(base); }
exports.patchSystemMargins = patchSystemMargins;
function buildSystemMargins() { return new SystemMarginsBuilder(); }
exports.buildSystemMargins = buildSystemMargins;
var SystemDividersBuilder = (function () {
    function SystemDividersBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SystemDividersBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["rightDivider"]) || this._b["rightDivider"] !== undefined || this._p.rightDivider !== undefined, "rightDivider is a required field");
        console.assert((this._o && !this._m["leftDivider"]) || this._b["leftDivider"] !== undefined || this._p.leftDivider !== undefined, "leftDivider is a required field");
    };
    SystemDividersBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "SystemDividers";
        return this._p;
    };
    SystemDividersBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SystemDividersBuilder.prototype.rightDivider = function (build) {
        this._b["rightDivider"] = build(new RightDividerBuilder(this._o && this._o["rightDivider"]));
        this._m["rightDivider"] = true;
        return this;
    };
    SystemDividersBuilder.prototype.leftDivider = function (build) {
        this._b["leftDivider"] = build(new LeftDividerBuilder(this._o && this._o["leftDivider"]));
        this._m["leftDivider"] = true;
        return this;
    };
    return SystemDividersBuilder;
})();
function patchSystemDividers(base) { return new SystemDividersBuilder(base); }
exports.patchSystemDividers = patchSystemDividers;
function buildSystemDividers() { return new SystemDividersBuilder(); }
exports.buildSystemDividers = buildSystemDividers;
var LeftDividerBuilder = (function () {
    function LeftDividerBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LeftDividerBuilder.prototype._i = function () {
    };
    LeftDividerBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LeftDivider";
        return this._p;
    };
    LeftDividerBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LeftDividerBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return LeftDividerBuilder;
})();
function patchLeftDivider(base) { return new LeftDividerBuilder(base); }
exports.patchLeftDivider = patchLeftDivider;
function buildLeftDivider() { return new LeftDividerBuilder(); }
exports.buildLeftDivider = buildLeftDivider;
var RightDividerBuilder = (function () {
    function RightDividerBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RightDividerBuilder.prototype._i = function () {
    };
    RightDividerBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "RightDivider";
        return this._p;
    };
    RightDividerBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RightDividerBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return RightDividerBuilder;
})();
function patchRightDivider(base) { return new RightDividerBuilder(base); }
exports.patchRightDivider = patchRightDivider;
function buildRightDivider() { return new RightDividerBuilder(); }
exports.buildRightDivider = buildRightDivider;
var StaffLayoutBuilder = (function () {
    function StaffLayoutBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StaffLayoutBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["num"]) || this._b["num"] !== undefined || this._p.num !== undefined, "num is a required field");
    };
    StaffLayoutBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "StaffLayout";
        return this._p;
    };
    StaffLayoutBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StaffLayoutBuilder.prototype.staffDistance = function (staffDistance) {
        this._p.staffDistance = staffDistance;
        this._m["staffDistance"] = true;
        return this;
    };
    StaffLayoutBuilder.prototype.num = function (num) {
        this._p.num = num;
        this._m["num"] = true;
        return this;
    };
    return StaffLayoutBuilder;
})();
function patchStaffLayout(base) { return new StaffLayoutBuilder(base); }
exports.patchStaffLayout = patchStaffLayout;
function buildStaffLayout() { return new StaffLayoutBuilder(); }
exports.buildStaffLayout = buildStaffLayout;
var MeasureLayoutBuilder = (function () {
    function MeasureLayoutBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MeasureLayoutBuilder.prototype._i = function () {
    };
    MeasureLayoutBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MeasureLayout";
        return this._p;
    };
    MeasureLayoutBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MeasureLayoutBuilder.prototype.measureDistance = function (measureDistance) {
        this._p.measureDistance = measureDistance;
        this._m["measureDistance"] = true;
        return this;
    };
    return MeasureLayoutBuilder;
})();
function patchMeasureLayout(base) { return new MeasureLayoutBuilder(base); }
exports.patchMeasureLayout = patchMeasureLayout;
function buildMeasureLayout() { return new MeasureLayoutBuilder(); }
exports.buildMeasureLayout = buildMeasureLayout;
var LineWidthBuilder = (function () {
    function LineWidthBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LineWidthBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["tenths"]) || this._b["tenths"] !== undefined || this._p.tenths !== undefined, "tenths is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    LineWidthBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LineWidth";
        return this._p;
    };
    LineWidthBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LineWidthBuilder.prototype.tenths = function (tenths) {
        this._p.tenths = tenths;
        this._m["tenths"] = true;
        return this;
    };
    LineWidthBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return LineWidthBuilder;
})();
function patchLineWidth(base) { return new LineWidthBuilder(base); }
exports.patchLineWidth = patchLineWidth;
function buildLineWidth() { return new LineWidthBuilder(); }
exports.buildLineWidth = buildLineWidth;
var NoteSizeBuilder = (function () {
    function NoteSizeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NoteSizeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["size"]) || this._b["size"] !== undefined || this._p.size !== undefined, "size is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    NoteSizeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "NoteSize";
        return this._p;
    };
    NoteSizeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NoteSizeBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    NoteSizeBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return NoteSizeBuilder;
})();
function patchNoteSize(base) { return new NoteSizeBuilder(base); }
exports.patchNoteSize = patchNoteSize;
function buildNoteSize() { return new NoteSizeBuilder(); }
exports.buildNoteSize = buildNoteSize;
var DistanceBuilder = (function () {
    function DistanceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DistanceBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["tenths"]) || this._b["tenths"] !== undefined || this._p.tenths !== undefined, "tenths is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    DistanceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Distance";
        return this._p;
    };
    DistanceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DistanceBuilder.prototype.tenths = function (tenths) {
        this._p.tenths = tenths;
        this._m["tenths"] = true;
        return this;
    };
    DistanceBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return DistanceBuilder;
})();
function patchDistance(base) { return new DistanceBuilder(base); }
exports.patchDistance = patchDistance;
function buildDistance() { return new DistanceBuilder(); }
exports.buildDistance = buildDistance;
var AppearanceBuilder = (function () {
    function AppearanceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AppearanceBuilder.prototype._i = function () {
    };
    AppearanceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Appearance";
        return this._p;
    };
    AppearanceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AppearanceBuilder.prototype.set = function (key, val) {
        this._p[key] = val;
        this._m[key] = true;
        return this;
    };
    AppearanceBuilder.prototype.otherAppearances = function (otherAppearances) {
        this._p.otherAppearances = otherAppearances;
        this._m["otherAppearances"] = true;
        return this;
    };
    return AppearanceBuilder;
})();
function patchAppearance(base) { return new AppearanceBuilder(base); }
exports.patchAppearance = patchAppearance;
function buildAppearance() { return new AppearanceBuilder(); }
exports.buildAppearance = buildAppearance;
var CreatorBuilder = (function () {
    function CreatorBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CreatorBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["creator"]) || this._b["creator"] !== undefined || this._p.creator !== undefined, "creator is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    CreatorBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Creator";
        return this._p;
    };
    CreatorBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CreatorBuilder.prototype.creator = function (creator) {
        this._p.creator = creator;
        this._m["creator"] = true;
        return this;
    };
    CreatorBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return CreatorBuilder;
})();
function patchCreator(base) { return new CreatorBuilder(base); }
exports.patchCreator = patchCreator;
function buildCreator() { return new CreatorBuilder(); }
exports.buildCreator = buildCreator;
var RightsBuilder = (function () {
    function RightsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RightsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["rights"]) || this._b["rights"] !== undefined || this._p.rights !== undefined, "rights is a required field");
    };
    RightsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Rights";
        return this._p;
    };
    RightsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RightsBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    RightsBuilder.prototype.rights = function (rights) {
        this._p.rights = rights;
        this._m["rights"] = true;
        return this;
    };
    return RightsBuilder;
})();
function patchRights(base) { return new RightsBuilder(base); }
exports.patchRights = patchRights;
function buildRights() { return new RightsBuilder(); }
exports.buildRights = buildRights;
var EncoderBuilder = (function () {
    function EncoderBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EncoderBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["encoder"]) || this._b["encoder"] !== undefined || this._p.encoder !== undefined, "encoder is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    EncoderBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Encoder";
        return this._p;
    };
    EncoderBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EncoderBuilder.prototype.encoder = function (encoder) {
        this._p.encoder = encoder;
        this._m["encoder"] = true;
        return this;
    };
    EncoderBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return EncoderBuilder;
})();
function patchEncoder(base) { return new EncoderBuilder(base); }
exports.patchEncoder = patchEncoder;
function buildEncoder() { return new EncoderBuilder(); }
exports.buildEncoder = buildEncoder;
var RelationBuilder = (function () {
    function RelationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RelationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    RelationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Relation";
        return this._p;
    };
    RelationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RelationBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    RelationBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    return RelationBuilder;
})();
function patchRelation(base) { return new RelationBuilder(base); }
exports.patchRelation = patchRelation;
function buildRelation() { return new RelationBuilder(); }
exports.buildRelation = buildRelation;
var MiscellaneousFieldBuilder = (function () {
    function MiscellaneousFieldBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MiscellaneousFieldBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    MiscellaneousFieldBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MiscellaneousField";
        return this._p;
    };
    MiscellaneousFieldBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MiscellaneousFieldBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    MiscellaneousFieldBuilder.prototype.name = function (name) {
        this._p.name = name;
        this._m["name"] = true;
        return this;
    };
    return MiscellaneousFieldBuilder;
})();
function patchMiscellaneousField(base) { return new MiscellaneousFieldBuilder(base); }
exports.patchMiscellaneousField = patchMiscellaneousField;
function buildMiscellaneousField() { return new MiscellaneousFieldBuilder(); }
exports.buildMiscellaneousField = buildMiscellaneousField;
var MiscellaneousBuilder = (function () {
    function MiscellaneousBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MiscellaneousBuilder.prototype._i = function () {
    };
    MiscellaneousBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Miscellaneous";
        return this._p;
    };
    MiscellaneousBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MiscellaneousBuilder.prototype.miscellaneousFields = function (miscellaneousFields) {
        this._p.miscellaneousFields = miscellaneousFields;
        this._m["miscellaneousFields"] = true;
        return this;
    };
    return MiscellaneousBuilder;
})();
function patchMiscellaneous(base) { return new MiscellaneousBuilder(base); }
exports.patchMiscellaneous = patchMiscellaneous;
function buildMiscellaneous() { return new MiscellaneousBuilder(); }
exports.buildMiscellaneous = buildMiscellaneous;
var IdentificationBuilder = (function () {
    function IdentificationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    IdentificationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["miscellaneous"]) || this._b["miscellaneous"] !== undefined || this._p.miscellaneous !== undefined, "miscellaneous is a required field");
        console.assert((this._o && !this._m["encoding"]) || this._b["encoding"] !== undefined || this._p.encoding !== undefined, "encoding is a required field");
        console.assert((this._o && !this._m["source"]) || this._b["source"] !== undefined || this._p.source !== undefined, "source is a required field");
    };
    IdentificationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Identification";
        return this._p;
    };
    IdentificationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    IdentificationBuilder.prototype.miscellaneous = function (build) {
        this._b["miscellaneous"] = build(new MiscellaneousBuilder(this._o && this._o["miscellaneous"]));
        this._m["miscellaneous"] = true;
        return this;
    };
    IdentificationBuilder.prototype.creators = function (creators) {
        this._p.creators = creators;
        this._m["creators"] = true;
        return this;
    };
    IdentificationBuilder.prototype.relations = function (relations) {
        this._p.relations = relations;
        this._m["relations"] = true;
        return this;
    };
    IdentificationBuilder.prototype.rights = function (rights) {
        this._p.rights = rights;
        this._m["rights"] = true;
        return this;
    };
    IdentificationBuilder.prototype.encoding = function (build) {
        this._b["encoding"] = build(new EncodingBuilder(this._o && this._o["encoding"]));
        this._m["encoding"] = true;
        return this;
    };
    IdentificationBuilder.prototype.source = function (source) {
        this._p.source = source;
        this._m["source"] = true;
        return this;
    };
    return IdentificationBuilder;
})();
function patchIdentification(base) { return new IdentificationBuilder(base); }
exports.patchIdentification = patchIdentification;
function buildIdentification() { return new IdentificationBuilder(); }
exports.buildIdentification = buildIdentification;
var SupportsBuilder = (function () {
    function SupportsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SupportsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["element"]) || this._b["element"] !== undefined || this._p.element !== undefined, "element is a required field");
        console.assert((this._o && !this._m["value"]) || this._b["value"] !== undefined || this._p.value !== undefined, "value is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    SupportsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Supports";
        return this._p;
    };
    SupportsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SupportsBuilder.prototype.element = function (element) {
        this._p.element = element;
        this._m["element"] = true;
        return this;
    };
    SupportsBuilder.prototype.attribute = function (attribute) {
        this._p.attribute = attribute;
        this._m["attribute"] = true;
        return this;
    };
    SupportsBuilder.prototype.value = function (value) {
        this._p.value = value;
        this._m["value"] = true;
        return this;
    };
    SupportsBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return SupportsBuilder;
})();
function patchSupports(base) { return new SupportsBuilder(base); }
exports.patchSupports = patchSupports;
function buildSupports() { return new SupportsBuilder(); }
exports.buildSupports = buildSupports;
var EncodingBuilder = (function () {
    function EncodingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EncodingBuilder.prototype._i = function () {
    };
    EncodingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Encoding";
        return this._p;
    };
    EncodingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EncodingBuilder.prototype.encodingDescriptions = function (encodingDescriptions) {
        this._p.encodingDescriptions = encodingDescriptions;
        this._m["encodingDescriptions"] = true;
        return this;
    };
    EncodingBuilder.prototype.encodingDate = function (build) {
        this._b["encodingDate"] = build(new EncodingDateBuilder(this._o && this._o["encodingDate"]));
        this._m["encodingDate"] = true;
        return this;
    };
    EncodingBuilder.prototype.set = function (key, val) {
        this._p[key] = val;
        this._m[key] = true;
        return this;
    };
    EncodingBuilder.prototype.encoders = function (encoders) {
        this._p.encoders = encoders;
        this._m["encoders"] = true;
        return this;
    };
    EncodingBuilder.prototype.softwares = function (softwares) {
        this._p.softwares = softwares;
        this._m["softwares"] = true;
        return this;
    };
    return EncodingBuilder;
})();
function patchEncoding(base) { return new EncodingBuilder(base); }
exports.patchEncoding = patchEncoding;
function buildEncoding() { return new EncodingBuilder(); }
exports.buildEncoding = buildEncoding;
var TimeSeparatorBuilder = (function () {
    function TimeSeparatorBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimeSeparatorBuilder.prototype._i = function () {
    };
    TimeSeparatorBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TimeSeparator";
        return this._p;
    };
    TimeSeparatorBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TimeSeparatorBuilder.prototype.separator = function (separator) {
        this._p.separator = separator;
        this._m["separator"] = true;
        return this;
    };
    return TimeSeparatorBuilder;
})();
function patchTimeSeparator(base) { return new TimeSeparatorBuilder(base); }
exports.patchTimeSeparator = patchTimeSeparator;
function buildTimeSeparator() { return new TimeSeparatorBuilder(); }
exports.buildTimeSeparator = buildTimeSeparator;
var TimeSymbolBuilder = (function () {
    function TimeSymbolBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimeSymbolBuilder.prototype._i = function () {
    };
    TimeSymbolBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TimeSymbol";
        return this._p;
    };
    TimeSymbolBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TimeSymbolBuilder.prototype.symbol = function (symbol) {
        this._p.symbol = symbol;
        this._m["symbol"] = true;
        return this;
    };
    return TimeSymbolBuilder;
})();
function patchTimeSymbol(base) { return new TimeSymbolBuilder(base); }
exports.patchTimeSymbol = patchTimeSymbol;
function buildTimeSymbol() { return new TimeSymbolBuilder(); }
exports.buildTimeSymbol = buildTimeSymbol;
var CancelBuilder = (function () {
    function CancelBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CancelBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["fifths"]) || this._b["fifths"] !== undefined || this._p.fifths !== undefined, "fifths is a required field");
    };
    CancelBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Cancel";
        return this._p;
    };
    CancelBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CancelBuilder.prototype.fifths = function (fifths) {
        this._p.fifths = fifths;
        this._m["fifths"] = true;
        return this;
    };
    CancelBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    return CancelBuilder;
})();
function patchCancel(base) { return new CancelBuilder(base); }
exports.patchCancel = patchCancel;
function buildCancel() { return new CancelBuilder(); }
exports.buildCancel = buildCancel;
var KeyOctaveBuilder = (function () {
    function KeyOctaveBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    KeyOctaveBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["octave"]) || this._b["octave"] !== undefined || this._p.octave !== undefined, "octave is a required field");
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
    };
    KeyOctaveBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "KeyOctave";
        return this._p;
    };
    KeyOctaveBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    KeyOctaveBuilder.prototype.octave = function (octave) {
        this._p.octave = octave;
        this._m["octave"] = true;
        return this;
    };
    KeyOctaveBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    KeyOctaveBuilder.prototype.cancel = function (cancel) {
        this._p.cancel = cancel;
        this._m["cancel"] = true;
        return this;
    };
    return KeyOctaveBuilder;
})();
function patchKeyOctave(base) { return new KeyOctaveBuilder(base); }
exports.patchKeyOctave = patchKeyOctave;
function buildKeyOctave() { return new KeyOctaveBuilder(); }
exports.buildKeyOctave = buildKeyOctave;
var KeyBuilder = (function () {
    function KeyBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    KeyBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["keySteps"]) || this._b["keySteps"] !== undefined || this._p.keySteps !== undefined, "keySteps is a required field");
        console.assert((this._o && !this._m["fifths"]) || this._b["fifths"] !== undefined || this._p.fifths !== undefined, "fifths is a required field");
        console.assert((this._o && !this._m["keyAlters"]) || this._b["keyAlters"] !== undefined || this._p.keyAlters !== undefined, "keyAlters is a required field");
        console.assert((this._o && !this._m["keyAccidentals"]) || this._b["keyAccidentals"] !== undefined || this._p.keyAccidentals !== undefined, "keyAccidentals is a required field");
    };
    KeyBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Key";
        return this._p;
    };
    KeyBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    KeyBuilder.prototype.cancel = function (build) {
        this._b["cancel"] = build(new CancelBuilder(this._o && this._o["cancel"]));
        this._m["cancel"] = true;
        return this;
    };
    KeyBuilder.prototype.keySteps = function (keySteps) {
        this._p.keySteps = keySteps;
        this._m["keySteps"] = true;
        return this;
    };
    KeyBuilder.prototype.keyOctaves = function (keyOctaves) {
        this._p.keyOctaves = keyOctaves;
        this._m["keyOctaves"] = true;
        return this;
    };
    KeyBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    KeyBuilder.prototype.fifths = function (fifths) {
        this._p.fifths = fifths;
        this._m["fifths"] = true;
        return this;
    };
    KeyBuilder.prototype.keyAlters = function (keyAlters) {
        this._p.keyAlters = keyAlters;
        this._m["keyAlters"] = true;
        return this;
    };
    KeyBuilder.prototype.keyAccidentals = function (keyAccidentals) {
        this._p.keyAccidentals = keyAccidentals;
        this._m["keyAccidentals"] = true;
        return this;
    };
    KeyBuilder.prototype.mode = function (mode) {
        this._p.mode = mode;
        this._m["mode"] = true;
        return this;
    };
    KeyBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    KeyBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    KeyBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    KeyBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    KeyBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return KeyBuilder;
})();
function patchKey(base) { return new KeyBuilder(base); }
exports.patchKey = patchKey;
function buildKey() { return new KeyBuilder(); }
exports.buildKey = buildKey;
var TimeBuilder = (function () {
    function TimeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["beats"]) || this._b["beats"] !== undefined || this._p.beats !== undefined, "beats is a required field");
        console.assert((this._o && !this._m["beatTypes"]) || this._b["beatTypes"] !== undefined || this._p.beatTypes !== undefined, "beatTypes is a required field");
    };
    TimeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Time";
        return this._p;
    };
    TimeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TimeBuilder.prototype.interchangeable = function (build) {
        this._b["interchangeable"] = build(new InterchangeableBuilder(this._o && this._o["interchangeable"]));
        this._m["interchangeable"] = true;
        return this;
    };
    TimeBuilder.prototype.beats = function (beats) {
        this._p.beats = beats;
        this._m["beats"] = true;
        return this;
    };
    TimeBuilder.prototype.beatTypes = function (beatTypes) {
        this._p.beatTypes = beatTypes;
        this._m["beatTypes"] = true;
        return this;
    };
    TimeBuilder.prototype.senzaMisura = function (senzaMisura) {
        this._p.senzaMisura = senzaMisura;
        this._m["senzaMisura"] = true;
        return this;
    };
    TimeBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    TimeBuilder.prototype.symbol = function (symbol) {
        this._p.symbol = symbol;
        this._m["symbol"] = true;
        return this;
    };
    return TimeBuilder;
})();
function patchTime(base) { return new TimeBuilder(base); }
exports.patchTime = patchTime;
function buildTime() { return new TimeBuilder(); }
exports.buildTime = buildTime;
var InterchangeableBuilder = (function () {
    function InterchangeableBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    InterchangeableBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["beats"]) || this._b["beats"] !== undefined || this._p.beats !== undefined, "beats is a required field");
        console.assert((this._o && !this._m["beatTypes"]) || this._b["beatTypes"] !== undefined || this._p.beatTypes !== undefined, "beatTypes is a required field");
    };
    InterchangeableBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Interchangeable";
        return this._p;
    };
    InterchangeableBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    InterchangeableBuilder.prototype.beats = function (beats) {
        this._p.beats = beats;
        this._m["beats"] = true;
        return this;
    };
    InterchangeableBuilder.prototype.beatTypes = function (beatTypes) {
        this._p.beatTypes = beatTypes;
        this._m["beatTypes"] = true;
        return this;
    };
    InterchangeableBuilder.prototype.timeRelation = function (timeRelation) {
        this._p.timeRelation = timeRelation;
        this._m["timeRelation"] = true;
        return this;
    };
    InterchangeableBuilder.prototype.symbol = function (symbol) {
        this._p.symbol = symbol;
        this._m["symbol"] = true;
        return this;
    };
    return InterchangeableBuilder;
})();
function patchInterchangeable(base) { return new InterchangeableBuilder(base); }
exports.patchInterchangeable = patchInterchangeable;
function buildInterchangeable() { return new InterchangeableBuilder(); }
exports.buildInterchangeable = buildInterchangeable;
var PartSymbolBuilder = (function () {
    function PartSymbolBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartSymbolBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    PartSymbolBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartSymbol";
        return this._p;
    };
    PartSymbolBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartSymbolBuilder.prototype.topStaff = function (topStaff) {
        this._p.topStaff = topStaff;
        this._m["topStaff"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.bottomStaff = function (bottomStaff) {
        this._p.bottomStaff = bottomStaff;
        this._m["bottomStaff"] = true;
        return this;
    };
    PartSymbolBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PartSymbolBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PartSymbolBuilder;
})();
function patchPartSymbol(base) { return new PartSymbolBuilder(base); }
exports.patchPartSymbol = patchPartSymbol;
function buildPartSymbol() { return new PartSymbolBuilder(); }
exports.buildPartSymbol = buildPartSymbol;
var ClefBuilder = (function () {
    function ClefBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ClefBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["clefOctaveChange"]) || this._b["clefOctaveChange"] !== undefined || this._p.clefOctaveChange !== undefined, "clefOctaveChange is a required field");
        console.assert((this._o && !this._m["sign"]) || this._b["sign"] !== undefined || this._p.sign !== undefined, "sign is a required field");
        console.assert((this._o && !this._m["line"]) || this._b["line"] !== undefined || this._p.line !== undefined, "line is a required field");
    };
    ClefBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Clef";
        return this._p;
    };
    ClefBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ClefBuilder.prototype.clefOctaveChange = function (clefOctaveChange) {
        this._p.clefOctaveChange = clefOctaveChange;
        this._m["clefOctaveChange"] = true;
        return this;
    };
    ClefBuilder.prototype.sign = function (sign) {
        this._p.sign = sign;
        this._m["sign"] = true;
        return this;
    };
    ClefBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    ClefBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    ClefBuilder.prototype.line = function (line) {
        this._p.line = line;
        this._m["line"] = true;
        return this;
    };
    ClefBuilder.prototype.afterBarline = function (afterBarline) {
        this._p.afterBarline = afterBarline;
        this._m["afterBarline"] = true;
        return this;
    };
    ClefBuilder.prototype.additional = function (additional) {
        this._p.additional = additional;
        this._m["additional"] = true;
        return this;
    };
    ClefBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ClefBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ClefBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ClefBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ClefBuilder;
})();
function patchClef(base) { return new ClefBuilder(base); }
exports.patchClef = patchClef;
function buildClef() { return new ClefBuilder(); }
exports.buildClef = buildClef;
var StaffTuningBuilder = (function () {
    function StaffTuningBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StaffTuningBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["line"]) || this._b["line"] !== undefined || this._p.line !== undefined, "line is a required field");
        console.assert((this._o && !this._m["tuningStep"]) || this._b["tuningStep"] !== undefined || this._p.tuningStep !== undefined, "tuningStep is a required field");
        console.assert((this._o && !this._m["tuningOctave"]) || this._b["tuningOctave"] !== undefined || this._p.tuningOctave !== undefined, "tuningOctave is a required field");
    };
    StaffTuningBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "StaffTuning";
        return this._p;
    };
    StaffTuningBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StaffTuningBuilder.prototype.tuningAlter = function (tuningAlter) {
        this._p.tuningAlter = tuningAlter;
        this._m["tuningAlter"] = true;
        return this;
    };
    StaffTuningBuilder.prototype.line = function (line) {
        this._p.line = line;
        this._m["line"] = true;
        return this;
    };
    StaffTuningBuilder.prototype.tuningStep = function (tuningStep) {
        this._p.tuningStep = tuningStep;
        this._m["tuningStep"] = true;
        return this;
    };
    StaffTuningBuilder.prototype.tuningOctave = function (tuningOctave) {
        this._p.tuningOctave = tuningOctave;
        this._m["tuningOctave"] = true;
        return this;
    };
    return StaffTuningBuilder;
})();
function patchStaffTuning(base) { return new StaffTuningBuilder(base); }
exports.patchStaffTuning = patchStaffTuning;
function buildStaffTuning() { return new StaffTuningBuilder(); }
exports.buildStaffTuning = buildStaffTuning;
var StaffDetailsBuilder = (function () {
    function StaffDetailsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StaffDetailsBuilder.prototype._i = function () {
    };
    StaffDetailsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "StaffDetails";
        return this._p;
    };
    StaffDetailsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StaffDetailsBuilder.prototype.staffLines = function (staffLines) {
        this._p.staffLines = staffLines;
        this._m["staffLines"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.staffTunings = function (staffTunings) {
        this._p.staffTunings = staffTunings;
        this._m["staffTunings"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.staffSize = function (staffSize) {
        this._p.staffSize = staffSize;
        this._m["staffSize"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.showFrets = function (showFrets) {
        this._p.showFrets = showFrets;
        this._m["showFrets"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.capo = function (capo) {
        this._p.capo = capo;
        this._m["capo"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.staffType = function (staffType) {
        this._p.staffType = staffType;
        this._m["staffType"] = true;
        return this;
    };
    StaffDetailsBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return StaffDetailsBuilder;
})();
function patchStaffDetails(base) { return new StaffDetailsBuilder(base); }
exports.patchStaffDetails = patchStaffDetails;
function buildStaffDetails() { return new StaffDetailsBuilder(); }
exports.buildStaffDetails = buildStaffDetails;
var DoubleBuilder = (function () {
    function DoubleBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DoubleBuilder.prototype._i = function () {
    };
    DoubleBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Double";
        return this._p;
    };
    DoubleBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return DoubleBuilder;
})();
function patchDouble(base) { return new DoubleBuilder(base); }
exports.patchDouble = patchDouble;
function buildDouble() { return new DoubleBuilder(); }
exports.buildDouble = buildDouble;
var TransposeBuilder = (function () {
    function TransposeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TransposeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["chromatic"]) || this._b["chromatic"] !== undefined || this._p.chromatic !== undefined, "chromatic is a required field");
    };
    TransposeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Transpose";
        return this._p;
    };
    TransposeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TransposeBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    TransposeBuilder.prototype.diatonic = function (diatonic) {
        this._p.diatonic = diatonic;
        this._m["diatonic"] = true;
        return this;
    };
    TransposeBuilder.prototype.octaveChange = function (octaveChange) {
        this._p.octaveChange = octaveChange;
        this._m["octaveChange"] = true;
        return this;
    };
    TransposeBuilder.prototype.double = function (build) {
        this._b["double"] = build(new DoubleBuilder(this._o && this._o["double"]));
        this._m["double"] = true;
        return this;
    };
    TransposeBuilder.prototype.chromatic = function (chromatic) {
        this._p.chromatic = chromatic;
        this._m["chromatic"] = true;
        return this;
    };
    return TransposeBuilder;
})();
function patchTranspose(base) { return new TransposeBuilder(base); }
exports.patchTranspose = patchTranspose;
function buildTranspose() { return new TransposeBuilder(); }
exports.buildTranspose = buildTranspose;
var DirectiveBuilder = (function () {
    function DirectiveBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DirectiveBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    DirectiveBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Directive";
        return this._p;
    };
    DirectiveBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DirectiveBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    DirectiveBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DirectiveBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DirectiveBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DirectiveBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DirectiveBuilder;
})();
function patchDirective(base) { return new DirectiveBuilder(base); }
exports.patchDirective = patchDirective;
function buildDirective() { return new DirectiveBuilder(); }
exports.buildDirective = buildDirective;
var SlashDotBuilder = (function () {
    function SlashDotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SlashDotBuilder.prototype._i = function () {
    };
    SlashDotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "SlashDot";
        return this._p;
    };
    SlashDotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return SlashDotBuilder;
})();
function patchSlashDot(base) { return new SlashDotBuilder(base); }
exports.patchSlashDot = patchSlashDot;
function buildSlashDot() { return new SlashDotBuilder(); }
exports.buildSlashDot = buildSlashDot;
var MultipleRestBuilder = (function () {
    function MultipleRestBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MultipleRestBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["count"]) || this._b["count"] !== undefined || this._p.count !== undefined, "count is a required field");
    };
    MultipleRestBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MultipleRest";
        return this._p;
    };
    MultipleRestBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MultipleRestBuilder.prototype.useSymbols = function (useSymbols) {
        this._p.useSymbols = useSymbols;
        this._m["useSymbols"] = true;
        return this;
    };
    MultipleRestBuilder.prototype.count = function (count) {
        this._p.count = count;
        this._m["count"] = true;
        return this;
    };
    return MultipleRestBuilder;
})();
function patchMultipleRest(base) { return new MultipleRestBuilder(base); }
exports.patchMultipleRest = patchMultipleRest;
function buildMultipleRest() { return new MultipleRestBuilder(); }
exports.buildMultipleRest = buildMultipleRest;
var MeasureRepeatBuilder = (function () {
    function MeasureRepeatBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MeasureRepeatBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    MeasureRepeatBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MeasureRepeat";
        return this._p;
    };
    MeasureRepeatBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MeasureRepeatBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    MeasureRepeatBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    MeasureRepeatBuilder.prototype.slashes = function (slashes) {
        this._p.slashes = slashes;
        this._m["slashes"] = true;
        return this;
    };
    return MeasureRepeatBuilder;
})();
function patchMeasureRepeat(base) { return new MeasureRepeatBuilder(base); }
exports.patchMeasureRepeat = patchMeasureRepeat;
function buildMeasureRepeat() { return new MeasureRepeatBuilder(); }
exports.buildMeasureRepeat = buildMeasureRepeat;
var BeatRepeatBuilder = (function () {
    function BeatRepeatBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BeatRepeatBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    BeatRepeatBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BeatRepeat";
        return this._p;
    };
    BeatRepeatBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BeatRepeatBuilder.prototype.slashType = function (slashType) {
        this._p.slashType = slashType;
        this._m["slashType"] = true;
        return this;
    };
    BeatRepeatBuilder.prototype.useDots = function (useDots) {
        this._p.useDots = useDots;
        this._m["useDots"] = true;
        return this;
    };
    BeatRepeatBuilder.prototype.slashDots = function (slashDots) {
        this._p.slashDots = slashDots;
        this._m["slashDots"] = true;
        return this;
    };
    BeatRepeatBuilder.prototype.slases = function (slases) {
        this._p.slases = slases;
        this._m["slases"] = true;
        return this;
    };
    BeatRepeatBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return BeatRepeatBuilder;
})();
function patchBeatRepeat(base) { return new BeatRepeatBuilder(base); }
exports.patchBeatRepeat = patchBeatRepeat;
function buildBeatRepeat() { return new BeatRepeatBuilder(); }
exports.buildBeatRepeat = buildBeatRepeat;
var SlashBuilder = (function () {
    function SlashBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SlashBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    SlashBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Slash";
        return this._p;
    };
    SlashBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SlashBuilder.prototype.slashType = function (slashType) {
        this._p.slashType = slashType;
        this._m["slashType"] = true;
        return this;
    };
    SlashBuilder.prototype.useDots = function (useDots) {
        this._p.useDots = useDots;
        this._m["useDots"] = true;
        return this;
    };
    SlashBuilder.prototype.useStems = function (useStems) {
        this._p.useStems = useStems;
        this._m["useStems"] = true;
        return this;
    };
    SlashBuilder.prototype.slashDots = function (slashDots) {
        this._p.slashDots = slashDots;
        this._m["slashDots"] = true;
        return this;
    };
    SlashBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return SlashBuilder;
})();
function patchSlash(base) { return new SlashBuilder(base); }
exports.patchSlash = patchSlash;
function buildSlash() { return new SlashBuilder(); }
exports.buildSlash = buildSlash;
var MeasureStyleBuilder = (function () {
    function MeasureStyleBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MeasureStyleBuilder.prototype._i = function () {
    };
    MeasureStyleBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MeasureStyle";
        return this._p;
    };
    MeasureStyleBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MeasureStyleBuilder.prototype.measureRepeat = function (build) {
        this._b["measureRepeat"] = build(new MeasureRepeatBuilder(this._o && this._o["measureRepeat"]));
        this._m["measureRepeat"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.beatRepeat = function (build) {
        this._b["beatRepeat"] = build(new BeatRepeatBuilder(this._o && this._o["beatRepeat"]));
        this._m["beatRepeat"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.multipleRest = function (build) {
        this._b["multipleRest"] = build(new MultipleRestBuilder(this._o && this._o["multipleRest"]));
        this._m["multipleRest"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.slash = function (build) {
        this._b["slash"] = build(new SlashBuilder(this._o && this._o["slash"]));
        this._m["slash"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    MeasureStyleBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return MeasureStyleBuilder;
})();
function patchMeasureStyle(base) { return new MeasureStyleBuilder(base); }
exports.patchMeasureStyle = patchMeasureStyle;
function buildMeasureStyle() { return new MeasureStyleBuilder(); }
exports.buildMeasureStyle = buildMeasureStyle;
var AttributesBuilder = (function () {
    function AttributesBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AttributesBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["divisions"]) || this._b["divisions"] !== undefined || this._p.divisions !== undefined, "divisions is a required field");
    };
    AttributesBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Attributes";
        return this._p;
    };
    AttributesBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AttributesBuilder.prototype.divisions = function (divisions) {
        this._p.divisions = divisions;
        this._m["divisions"] = true;
        return this;
    };
    AttributesBuilder.prototype.partSymbol = function (build) {
        this._b["partSymbol"] = build(new PartSymbolBuilder(this._o && this._o["partSymbol"]));
        this._m["partSymbol"] = true;
        return this;
    };
    AttributesBuilder.prototype.clefs = function (clefs) {
        this._p.clefs = clefs;
        this._m["clefs"] = true;
        return this;
    };
    AttributesBuilder.prototype.measureStyles = function (measureStyles) {
        this._p.measureStyles = measureStyles;
        this._m["measureStyles"] = true;
        return this;
    };
    AttributesBuilder.prototype.times = function (times) {
        this._p.times = times;
        this._m["times"] = true;
        return this;
    };
    AttributesBuilder.prototype.staffDetails = function (staffDetails) {
        this._p.staffDetails = staffDetails;
        this._m["staffDetails"] = true;
        return this;
    };
    AttributesBuilder.prototype.transposes = function (transposes) {
        this._p.transposes = transposes;
        this._m["transposes"] = true;
        return this;
    };
    AttributesBuilder.prototype.staves = function (staves) {
        this._p.staves = staves;
        this._m["staves"] = true;
        return this;
    };
    AttributesBuilder.prototype.instruments = function (instruments) {
        this._p.instruments = instruments;
        this._m["instruments"] = true;
        return this;
    };
    AttributesBuilder.prototype.keySignatures = function (keySignatures) {
        this._p.keySignatures = keySignatures;
        this._m["keySignatures"] = true;
        return this;
    };
    AttributesBuilder.prototype.directives = function (directives) {
        this._p.directives = directives;
        this._m["directives"] = true;
        return this;
    };
    AttributesBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    AttributesBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    AttributesBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return AttributesBuilder;
})();
function patchAttributes(base) { return new AttributesBuilder(base); }
exports.patchAttributes = patchAttributes;
function buildAttributes() { return new AttributesBuilder(); }
exports.buildAttributes = buildAttributes;
var CueBuilder = (function () {
    function CueBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CueBuilder.prototype._i = function () {
    };
    CueBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Cue";
        return this._p;
    };
    CueBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return CueBuilder;
})();
function patchCue(base) { return new CueBuilder(base); }
exports.patchCue = patchCue;
function buildCue() { return new CueBuilder(); }
exports.buildCue = buildCue;
var GraceBuilder = (function () {
    function GraceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GraceBuilder.prototype._i = function () {
    };
    GraceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Grace";
        return this._p;
    };
    GraceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GraceBuilder.prototype.makeTime = function (makeTime) {
        this._p.makeTime = makeTime;
        this._m["makeTime"] = true;
        return this;
    };
    GraceBuilder.prototype.stealTimePrevious = function (stealTimePrevious) {
        this._p.stealTimePrevious = stealTimePrevious;
        this._m["stealTimePrevious"] = true;
        return this;
    };
    GraceBuilder.prototype.slash = function (slash) {
        this._p.slash = slash;
        this._m["slash"] = true;
        return this;
    };
    GraceBuilder.prototype.stealTimeFollowing = function (stealTimeFollowing) {
        this._p.stealTimeFollowing = stealTimeFollowing;
        this._m["stealTimeFollowing"] = true;
        return this;
    };
    return GraceBuilder;
})();
function patchGrace(base) { return new GraceBuilder(base); }
exports.patchGrace = patchGrace;
function buildGrace() { return new GraceBuilder(); }
exports.buildGrace = buildGrace;
var ChordBuilder = (function () {
    function ChordBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ChordBuilder.prototype._i = function () {
    };
    ChordBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Chord";
        return this._p;
    };
    ChordBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return ChordBuilder;
})();
function patchChord(base) { return new ChordBuilder(base); }
exports.patchChord = patchChord;
function buildChord() { return new ChordBuilder(); }
exports.buildChord = buildChord;
var UnpitchedBuilder = (function () {
    function UnpitchedBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    UnpitchedBuilder.prototype._i = function () {
    };
    UnpitchedBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Unpitched";
        return this._p;
    };
    UnpitchedBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    UnpitchedBuilder.prototype.displayStep = function (displayStep) {
        this._p.displayStep = displayStep;
        this._m["displayStep"] = true;
        return this;
    };
    UnpitchedBuilder.prototype.displayOctave = function (displayOctave) {
        this._p.displayOctave = displayOctave;
        this._m["displayOctave"] = true;
        return this;
    };
    return UnpitchedBuilder;
})();
function patchUnpitched(base) { return new UnpitchedBuilder(base); }
exports.patchUnpitched = patchUnpitched;
function buildUnpitched() { return new UnpitchedBuilder(); }
exports.buildUnpitched = buildUnpitched;
var PitchBuilder = (function () {
    function PitchBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PitchBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["octave"]) || this._b["octave"] !== undefined || this._p.octave !== undefined, "octave is a required field");
    };
    PitchBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Pitch";
        return this._p;
    };
    PitchBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PitchBuilder.prototype.alter = function (alter) {
        this._p.alter = alter;
        this._m["alter"] = true;
        return this;
    };
    PitchBuilder.prototype.step = function (step) {
        this._p.step = step;
        this._m["step"] = true;
        return this;
    };
    PitchBuilder.prototype.octave = function (octave) {
        this._p.octave = octave;
        this._m["octave"] = true;
        return this;
    };
    return PitchBuilder;
})();
function patchPitch(base) { return new PitchBuilder(base); }
exports.patchPitch = patchPitch;
function buildPitch() { return new PitchBuilder(); }
exports.buildPitch = buildPitch;
var FullNoteBuilder = (function () {
    function FullNoteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FullNoteBuilder.prototype._i = function () {
    };
    FullNoteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "FullNote";
        return this._p;
    };
    FullNoteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FullNoteBuilder.prototype.unpitched = function (build) {
        this._b["unpitched"] = build(new UnpitchedBuilder(this._o && this._o["unpitched"]));
        this._m["unpitched"] = true;
        return this;
    };
    FullNoteBuilder.prototype.chord = function (build) {
        this._b["chord"] = build(new ChordBuilder(this._o && this._o["chord"]));
        this._m["chord"] = true;
        return this;
    };
    FullNoteBuilder.prototype.pitch = function (build) {
        this._b["pitch"] = build(new PitchBuilder(this._o && this._o["pitch"]));
        this._m["pitch"] = true;
        return this;
    };
    FullNoteBuilder.prototype.rest = function (build) {
        this._b["rest"] = build(new RestBuilder(this._o && this._o["rest"]));
        this._m["rest"] = true;
        return this;
    };
    return FullNoteBuilder;
})();
function patchFullNote(base) { return new FullNoteBuilder(base); }
exports.patchFullNote = patchFullNote;
function buildFullNote() { return new FullNoteBuilder(); }
exports.buildFullNote = buildFullNote;
var RestBuilder = (function () {
    function RestBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RestBuilder.prototype._i = function () {
    };
    RestBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Rest";
        return this._p;
    };
    RestBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RestBuilder.prototype.measure = function (measure) {
        this._p.measure = measure;
        this._m["measure"] = true;
        return this;
    };
    RestBuilder.prototype.displayStep = function (displayStep) {
        this._p.displayStep = displayStep;
        this._m["displayStep"] = true;
        return this;
    };
    RestBuilder.prototype.displayOctave = function (displayOctave) {
        this._p.displayOctave = displayOctave;
        this._m["displayOctave"] = true;
        return this;
    };
    return RestBuilder;
})();
function patchRest(base) { return new RestBuilder(base); }
exports.patchRest = patchRest;
function buildRest() { return new RestBuilder(); }
exports.buildRest = buildRest;
var TieBuilder = (function () {
    function TieBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TieBuilder.prototype._i = function () {
    };
    TieBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tie";
        return this._p;
    };
    TieBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TieBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    TieBuilder.prototype.timeOnly = function (timeOnly) {
        this._p.timeOnly = timeOnly;
        this._m["timeOnly"] = true;
        return this;
    };
    return TieBuilder;
})();
function patchTie(base) { return new TieBuilder(base); }
exports.patchTie = patchTie;
function buildTie() { return new TieBuilder(); }
exports.buildTie = buildTie;
var InstrumentBuilder = (function () {
    function InstrumentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    InstrumentBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["id"]) || this._b["id"] !== undefined || this._p.id !== undefined, "id is a required field");
    };
    InstrumentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Instrument";
        return this._p;
    };
    InstrumentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    InstrumentBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    return InstrumentBuilder;
})();
function patchInstrument(base) { return new InstrumentBuilder(base); }
exports.patchInstrument = patchInstrument;
function buildInstrument() { return new InstrumentBuilder(); }
exports.buildInstrument = buildInstrument;
var NoteBuilder = (function () {
    function NoteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NoteBuilder.prototype._i = function () {
    };
    NoteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Note";
        return this._p;
    };
    NoteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NoteBuilder.prototype.noteheadText = function (build) {
        this._b["noteheadText"] = build(new NoteheadTextBuilder(this._o && this._o["noteheadText"]));
        this._m["noteheadText"] = true;
        return this;
    };
    NoteBuilder.prototype.timeModification = function (build) {
        this._b["timeModification"] = build(new TimeModificationBuilder(this._o && this._o["timeModification"]));
        this._m["timeModification"] = true;
        return this;
    };
    NoteBuilder.prototype.accidental = function (build) {
        this._b["accidental"] = build(new AccidentalBuilder(this._o && this._o["accidental"]));
        this._m["accidental"] = true;
        return this;
    };
    NoteBuilder.prototype.instrument = function (build) {
        this._b["instrument"] = build(new InstrumentBuilder(this._o && this._o["instrument"]));
        this._m["instrument"] = true;
        return this;
    };
    NoteBuilder.prototype.attack = function (attack) {
        this._p.attack = attack;
        this._m["attack"] = true;
        return this;
    };
    NoteBuilder.prototype.endDynamics = function (endDynamics) {
        this._p.endDynamics = endDynamics;
        this._m["endDynamics"] = true;
        return this;
    };
    NoteBuilder.prototype.lyrics = function (lyrics) {
        this._p.lyrics = lyrics;
        this._m["lyrics"] = true;
        return this;
    };
    NoteBuilder.prototype.dots = function (dots) {
        this._p.dots = dots;
        this._m["dots"] = true;
        return this;
    };
    NoteBuilder.prototype.notations = function (notations) {
        this._p.notations = notations;
        this._m["notations"] = true;
        return this;
    };
    NoteBuilder.prototype.stem = function (build) {
        this._b["stem"] = build(new StemBuilder(this._o && this._o["stem"]));
        this._m["stem"] = true;
        return this;
    };
    NoteBuilder.prototype.noteType = function (build) {
        this._b["noteType"] = build(new TypeBuilder(this._o && this._o["noteType"]));
        this._m["noteType"] = true;
        return this;
    };
    NoteBuilder.prototype.pizzicato = function (pizzicato) {
        this._p.pizzicato = pizzicato;
        this._m["pizzicato"] = true;
        return this;
    };
    NoteBuilder.prototype.cue = function (build) {
        this._b["cue"] = build(new CueBuilder(this._o && this._o["cue"]));
        this._m["cue"] = true;
        return this;
    };
    NoteBuilder.prototype.duration = function (duration) {
        this._p.duration = duration;
        this._m["duration"] = true;
        return this;
    };
    NoteBuilder.prototype.ties = function (ties) {
        this._p.ties = ties;
        this._m["ties"] = true;
        return this;
    };
    NoteBuilder.prototype.dynamics = function (dynamics) {
        this._p.dynamics = dynamics;
        this._m["dynamics"] = true;
        return this;
    };
    NoteBuilder.prototype.play = function (build) {
        this._b["play"] = build(new PlayBuilder(this._o && this._o["play"]));
        this._m["play"] = true;
        return this;
    };
    NoteBuilder.prototype.staff = function (staff) {
        this._p.staff = staff;
        this._m["staff"] = true;
        return this;
    };
    NoteBuilder.prototype.grace = function (build) {
        this._b["grace"] = build(new GraceBuilder(this._o && this._o["grace"]));
        this._m["grace"] = true;
        return this;
    };
    NoteBuilder.prototype.notehead = function (build) {
        this._b["notehead"] = build(new NoteheadBuilder(this._o && this._o["notehead"]));
        this._m["notehead"] = true;
        return this;
    };
    NoteBuilder.prototype.release = function (release) {
        this._p.release = release;
        this._m["release"] = true;
        return this;
    };
    NoteBuilder.prototype.beams = function (beams) {
        this._p.beams = beams;
        this._m["beams"] = true;
        return this;
    };
    NoteBuilder.prototype.voice = function (voice) {
        this._p.voice = voice;
        this._m["voice"] = true;
        return this;
    };
    NoteBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    NoteBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    NoteBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return NoteBuilder;
})();
function patchNote(base) { return new NoteBuilder(base); }
exports.patchNote = patchNote;
function buildNote() { return new NoteBuilder(); }
exports.buildNote = buildNote;
var TypeBuilder = (function () {
    function TypeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TypeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["duration"]) || this._b["duration"] !== undefined || this._p.duration !== undefined, "duration is a required field");
    };
    TypeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Type";
        return this._p;
    };
    TypeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TypeBuilder.prototype.duration = function (duration) {
        this._p.duration = duration;
        this._m["duration"] = true;
        return this;
    };
    TypeBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    return TypeBuilder;
})();
function patchType(base) { return new TypeBuilder(base); }
exports.patchType = patchType;
function buildType() { return new TypeBuilder(); }
exports.buildType = buildType;
var DotBuilder = (function () {
    function DotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DotBuilder.prototype._i = function () {
    };
    DotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Dot";
        return this._p;
    };
    DotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DotBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DotBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DotBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DotBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DotBuilder;
})();
function patchDot(base) { return new DotBuilder(base); }
exports.patchDot = patchDot;
function buildDot() { return new DotBuilder(); }
exports.buildDot = buildDot;
var AccidentalBuilder = (function () {
    function AccidentalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccidentalBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["accidental"]) || this._b["accidental"] !== undefined || this._p.accidental !== undefined, "accidental is a required field");
    };
    AccidentalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Accidental";
        return this._p;
    };
    AccidentalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccidentalBuilder.prototype.cautionary = function (cautionary) {
        this._p.cautionary = cautionary;
        this._m["cautionary"] = true;
        return this;
    };
    AccidentalBuilder.prototype.accidental = function (accidental) {
        this._p.accidental = accidental;
        this._m["accidental"] = true;
        return this;
    };
    AccidentalBuilder.prototype.editorial = function (editorial) {
        this._p.editorial = editorial;
        this._m["editorial"] = true;
        return this;
    };
    AccidentalBuilder.prototype.bracket = function (bracket) {
        this._p.bracket = bracket;
        this._m["bracket"] = true;
        return this;
    };
    AccidentalBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    AccidentalBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    return AccidentalBuilder;
})();
function patchAccidental(base) { return new AccidentalBuilder(base); }
exports.patchAccidental = patchAccidental;
function buildAccidental() { return new AccidentalBuilder(); }
exports.buildAccidental = buildAccidental;
var TimeModificationBuilder = (function () {
    function TimeModificationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimeModificationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["actualNotes"]) || this._b["actualNotes"] !== undefined || this._p.actualNotes !== undefined, "actualNotes is a required field");
        console.assert((this._o && !this._m["normalNotes"]) || this._b["normalNotes"] !== undefined || this._p.normalNotes !== undefined, "normalNotes is a required field");
    };
    TimeModificationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TimeModification";
        return this._p;
    };
    TimeModificationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TimeModificationBuilder.prototype.actualNotes = function (actualNotes) {
        this._p.actualNotes = actualNotes;
        this._m["actualNotes"] = true;
        return this;
    };
    TimeModificationBuilder.prototype.normalType = function (normalType) {
        this._p.normalType = normalType;
        this._m["normalType"] = true;
        return this;
    };
    TimeModificationBuilder.prototype.normalNotes = function (normalNotes) {
        this._p.normalNotes = normalNotes;
        this._m["normalNotes"] = true;
        return this;
    };
    TimeModificationBuilder.prototype.normalDots = function (normalDots) {
        this._p.normalDots = normalDots;
        this._m["normalDots"] = true;
        return this;
    };
    return TimeModificationBuilder;
})();
function patchTimeModification(base) { return new TimeModificationBuilder(base); }
exports.patchTimeModification = patchTimeModification;
function buildTimeModification() { return new TimeModificationBuilder(); }
exports.buildTimeModification = buildTimeModification;
var StemBuilder = (function () {
    function StemBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StemBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    StemBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Stem";
        return this._p;
    };
    StemBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StemBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    StemBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StemBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StemBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StemBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StemBuilder;
})();
function patchStem(base) { return new StemBuilder(base); }
exports.patchStem = patchStem;
function buildStem() { return new StemBuilder(); }
exports.buildStem = buildStem;
var NoteheadBuilder = (function () {
    function NoteheadBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NoteheadBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    NoteheadBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Notehead";
        return this._p;
    };
    NoteheadBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NoteheadBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    NoteheadBuilder.prototype.filled = function (filled) {
        this._p.filled = filled;
        this._m["filled"] = true;
        return this;
    };
    NoteheadBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    NoteheadBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    NoteheadBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    NoteheadBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    NoteheadBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return NoteheadBuilder;
})();
function patchNotehead(base) { return new NoteheadBuilder(base); }
exports.patchNotehead = patchNotehead;
function buildNotehead() { return new NoteheadBuilder(); }
exports.buildNotehead = buildNotehead;
var NoteheadTextBuilder = (function () {
    function NoteheadTextBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NoteheadTextBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    NoteheadTextBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "NoteheadText";
        return this._p;
    };
    NoteheadTextBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NoteheadTextBuilder.prototype.text = function (build) {
        this._b["text"] = build(new TextArrayBuilder(this._o && this._o["text"]));
        this._m["text"] = true;
        return this;
    };
    return NoteheadTextBuilder;
})();
function patchNoteheadText(base) { return new NoteheadTextBuilder(base); }
exports.patchNoteheadText = patchNoteheadText;
function buildNoteheadText() { return new NoteheadTextBuilder(); }
exports.buildNoteheadText = buildNoteheadText;
var BeamBuilder = (function () {
    function BeamBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BeamBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    BeamBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Beam";
        return this._p;
    };
    BeamBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BeamBuilder.prototype.repeater = function (repeater) {
        this._p.repeater = repeater;
        this._m["repeater"] = true;
        return this;
    };
    BeamBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    BeamBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    BeamBuilder.prototype.fan = function (fan) {
        this._p.fan = fan;
        this._m["fan"] = true;
        return this;
    };
    return BeamBuilder;
})();
function patchBeam(base) { return new BeamBuilder(base); }
exports.patchBeam = patchBeam;
function buildBeam() { return new BeamBuilder(); }
exports.buildBeam = buildBeam;
var NotationsBuilder = (function () {
    function NotationsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NotationsBuilder.prototype._i = function () {
    };
    NotationsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Notations";
        return this._p;
    };
    NotationsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NotationsBuilder.prototype.slurs = function (slurs) {
        this._p.slurs = slurs;
        this._m["slurs"] = true;
        return this;
    };
    NotationsBuilder.prototype.articulations = function (articulations) {
        this._p.articulations = articulations;
        this._m["articulations"] = true;
        return this;
    };
    NotationsBuilder.prototype.slides = function (slides) {
        this._p.slides = slides;
        this._m["slides"] = true;
        return this;
    };
    NotationsBuilder.prototype.technicals = function (technicals) {
        this._p.technicals = technicals;
        this._m["technicals"] = true;
        return this;
    };
    NotationsBuilder.prototype.tieds = function (tieds) {
        this._p.tieds = tieds;
        this._m["tieds"] = true;
        return this;
    };
    NotationsBuilder.prototype.tuplets = function (tuplets) {
        this._p.tuplets = tuplets;
        this._m["tuplets"] = true;
        return this;
    };
    NotationsBuilder.prototype.glissandos = function (glissandos) {
        this._p.glissandos = glissandos;
        this._m["glissandos"] = true;
        return this;
    };
    NotationsBuilder.prototype.dynamics = function (dynamics) {
        this._p.dynamics = dynamics;
        this._m["dynamics"] = true;
        return this;
    };
    NotationsBuilder.prototype.fermatas = function (fermatas) {
        this._p.fermatas = fermatas;
        this._m["fermatas"] = true;
        return this;
    };
    NotationsBuilder.prototype.accidentalMarks = function (accidentalMarks) {
        this._p.accidentalMarks = accidentalMarks;
        this._m["accidentalMarks"] = true;
        return this;
    };
    NotationsBuilder.prototype.ornaments = function (ornaments) {
        this._p.ornaments = ornaments;
        this._m["ornaments"] = true;
        return this;
    };
    NotationsBuilder.prototype.arpeggiates = function (arpeggiates) {
        this._p.arpeggiates = arpeggiates;
        this._m["arpeggiates"] = true;
        return this;
    };
    NotationsBuilder.prototype.nonArpeggiates = function (nonArpeggiates) {
        this._p.nonArpeggiates = nonArpeggiates;
        this._m["nonArpeggiates"] = true;
        return this;
    };
    NotationsBuilder.prototype.otherNotations = function (otherNotations) {
        this._p.otherNotations = otherNotations;
        this._m["otherNotations"] = true;
        return this;
    };
    NotationsBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    NotationsBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    NotationsBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return NotationsBuilder;
})();
function patchNotations(base) { return new NotationsBuilder(base); }
exports.patchNotations = patchNotations;
function buildNotations() { return new NotationsBuilder(); }
exports.buildNotations = buildNotations;
var TiedBuilder = (function () {
    function TiedBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TiedBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    TiedBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tied";
        return this._p;
    };
    TiedBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TiedBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    TiedBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    TiedBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return TiedBuilder;
})();
function patchTied(base) { return new TiedBuilder(base); }
exports.patchTied = patchTied;
function buildTied() { return new TiedBuilder(); }
exports.buildTied = buildTied;
var SlurBuilder = (function () {
    function SlurBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SlurBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    SlurBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Slur";
        return this._p;
    };
    SlurBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SlurBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    SlurBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    SlurBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return SlurBuilder;
})();
function patchSlur(base) { return new SlurBuilder(base); }
exports.patchSlur = patchSlur;
function buildSlur() { return new SlurBuilder(); }
exports.buildSlur = buildSlur;
var TupletBuilder = (function () {
    function TupletBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    TupletBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tuplet";
        return this._p;
    };
    TupletBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletBuilder.prototype.bracket = function (bracket) {
        this._p.bracket = bracket;
        this._m["bracket"] = true;
        return this;
    };
    TupletBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    TupletBuilder.prototype.showNumber = function (showNumber) {
        this._p.showNumber = showNumber;
        this._m["showNumber"] = true;
        return this;
    };
    TupletBuilder.prototype.tupletNormal = function (build) {
        this._b["tupletNormal"] = build(new TupletNormalBuilder(this._o && this._o["tupletNormal"]));
        this._m["tupletNormal"] = true;
        return this;
    };
    TupletBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    TupletBuilder.prototype.showType = function (showType) {
        this._p.showType = showType;
        this._m["showType"] = true;
        return this;
    };
    TupletBuilder.prototype.tupletActual = function (build) {
        this._b["tupletActual"] = build(new TupletActualBuilder(this._o && this._o["tupletActual"]));
        this._m["tupletActual"] = true;
        return this;
    };
    TupletBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return TupletBuilder;
})();
function patchTuplet(base) { return new TupletBuilder(base); }
exports.patchTuplet = patchTuplet;
function buildTuplet() { return new TupletBuilder(); }
exports.buildTuplet = buildTuplet;
var TupletActualBuilder = (function () {
    function TupletActualBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletActualBuilder.prototype._i = function () {
    };
    TupletActualBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TupletActual";
        return this._p;
    };
    TupletActualBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletActualBuilder.prototype.tupletNumber = function (build) {
        this._b["tupletNumber"] = build(new TupletNumberBuilder(this._o && this._o["tupletNumber"]));
        this._m["tupletNumber"] = true;
        return this;
    };
    TupletActualBuilder.prototype.tupletDots = function (tupletDots) {
        this._p.tupletDots = tupletDots;
        this._m["tupletDots"] = true;
        return this;
    };
    TupletActualBuilder.prototype.tupletType = function (build) {
        this._b["tupletType"] = build(new TupletTypeBuilder(this._o && this._o["tupletType"]));
        this._m["tupletType"] = true;
        return this;
    };
    return TupletActualBuilder;
})();
function patchTupletActual(base) { return new TupletActualBuilder(base); }
exports.patchTupletActual = patchTupletActual;
function buildTupletActual() { return new TupletActualBuilder(); }
exports.buildTupletActual = buildTupletActual;
var TupletNormalBuilder = (function () {
    function TupletNormalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletNormalBuilder.prototype._i = function () {
    };
    TupletNormalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TupletNormal";
        return this._p;
    };
    TupletNormalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletNormalBuilder.prototype.tupletNumber = function (build) {
        this._b["tupletNumber"] = build(new TupletNumberBuilder(this._o && this._o["tupletNumber"]));
        this._m["tupletNumber"] = true;
        return this;
    };
    TupletNormalBuilder.prototype.tupletDots = function (tupletDots) {
        this._p.tupletDots = tupletDots;
        this._m["tupletDots"] = true;
        return this;
    };
    TupletNormalBuilder.prototype.tupletType = function (build) {
        this._b["tupletType"] = build(new TupletTypeBuilder(this._o && this._o["tupletType"]));
        this._m["tupletType"] = true;
        return this;
    };
    return TupletNormalBuilder;
})();
function patchTupletNormal(base) { return new TupletNormalBuilder(base); }
exports.patchTupletNormal = patchTupletNormal;
function buildTupletNormal() { return new TupletNormalBuilder(); }
exports.buildTupletNormal = buildTupletNormal;
var TupletNumberBuilder = (function () {
    function TupletNumberBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletNumberBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    TupletNumberBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TupletNumber";
        return this._p;
    };
    TupletNumberBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletNumberBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    TupletNumberBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    TupletNumberBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    TupletNumberBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    TupletNumberBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return TupletNumberBuilder;
})();
function patchTupletNumber(base) { return new TupletNumberBuilder(base); }
exports.patchTupletNumber = patchTupletNumber;
function buildTupletNumber() { return new TupletNumberBuilder(); }
exports.buildTupletNumber = buildTupletNumber;
var TupletTypeBuilder = (function () {
    function TupletTypeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletTypeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    TupletTypeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TupletType";
        return this._p;
    };
    TupletTypeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletTypeBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    TupletTypeBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    TupletTypeBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    TupletTypeBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    TupletTypeBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return TupletTypeBuilder;
})();
function patchTupletType(base) { return new TupletTypeBuilder(base); }
exports.patchTupletType = patchTupletType;
function buildTupletType() { return new TupletTypeBuilder(); }
exports.buildTupletType = buildTupletType;
var TupletDotBuilder = (function () {
    function TupletDotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TupletDotBuilder.prototype._i = function () {
    };
    TupletDotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TupletDot";
        return this._p;
    };
    TupletDotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TupletDotBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    TupletDotBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    TupletDotBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    TupletDotBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return TupletDotBuilder;
})();
function patchTupletDot(base) { return new TupletDotBuilder(base); }
exports.patchTupletDot = patchTupletDot;
function buildTupletDot() { return new TupletDotBuilder(); }
exports.buildTupletDot = buildTupletDot;
var GlissandoBuilder = (function () {
    function GlissandoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GlissandoBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    GlissandoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Glissando";
        return this._p;
    };
    GlissandoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GlissandoBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    GlissandoBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    GlissandoBuilder.prototype.normal = function (normal) {
        this._p.normal = normal;
        this._m["normal"] = true;
        return this;
    };
    GlissandoBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return GlissandoBuilder;
})();
function patchGlissando(base) { return new GlissandoBuilder(base); }
exports.patchGlissando = patchGlissando;
function buildGlissando() { return new GlissandoBuilder(); }
exports.buildGlissando = buildGlissando;
var SlideBuilder = (function () {
    function SlideBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SlideBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    SlideBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Slide";
        return this._p;
    };
    SlideBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SlideBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    SlideBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    SlideBuilder.prototype.normal = function (normal) {
        this._p.normal = normal;
        this._m["normal"] = true;
        return this;
    };
    SlideBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return SlideBuilder;
})();
function patchSlide(base) { return new SlideBuilder(base); }
exports.patchSlide = patchSlide;
function buildSlide() { return new SlideBuilder(); }
exports.buildSlide = buildSlide;
var OtherNotationBuilder = (function () {
    function OtherNotationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherNotationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    OtherNotationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherNotation";
        return this._p;
    };
    OtherNotationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherNotationBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    OtherNotationBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherNotationBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return OtherNotationBuilder;
})();
function patchOtherNotation(base) { return new OtherNotationBuilder(base); }
exports.patchOtherNotation = patchOtherNotation;
function buildOtherNotation() { return new OtherNotationBuilder(); }
exports.buildOtherNotation = buildOtherNotation;
var OtherDirectionBuilder = (function () {
    function OtherDirectionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherDirectionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    OtherDirectionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherDirection";
        return this._p;
    };
    OtherDirectionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherDirectionBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherDirectionBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return OtherDirectionBuilder;
})();
function patchOtherDirection(base) { return new OtherDirectionBuilder(base); }
exports.patchOtherDirection = patchOtherDirection;
function buildOtherDirection() { return new OtherDirectionBuilder(); }
exports.buildOtherDirection = buildOtherDirection;
var OrnamentsBuilder = (function () {
    function OrnamentsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OrnamentsBuilder.prototype._i = function () {
    };
    OrnamentsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Ornaments";
        return this._p;
    };
    OrnamentsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OrnamentsBuilder.prototype.delayedInvertedTurn = function (build) {
        this._b["delayedInvertedTurn"] = build(new DelayedInvertedTurnBuilder(this._o && this._o["delayedInvertedTurn"]));
        this._m["delayedInvertedTurn"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.shake = function (build) {
        this._b["shake"] = build(new ShakeBuilder(this._o && this._o["shake"]));
        this._m["shake"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.turn = function (build) {
        this._b["turn"] = build(new TurnBuilder(this._o && this._o["turn"]));
        this._m["turn"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.invertedTurn = function (build) {
        this._b["invertedTurn"] = build(new InvertedTurnBuilder(this._o && this._o["invertedTurn"]));
        this._m["invertedTurn"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.otherOrnament = function (build) {
        this._b["otherOrnament"] = build(new OtherOrnamentBuilder(this._o && this._o["otherOrnament"]));
        this._m["otherOrnament"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.delayedTurn = function (build) {
        this._b["delayedTurn"] = build(new DelayedTurnBuilder(this._o && this._o["delayedTurn"]));
        this._m["delayedTurn"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.verticalTurn = function (build) {
        this._b["verticalTurn"] = build(new VerticalTurnBuilder(this._o && this._o["verticalTurn"]));
        this._m["verticalTurn"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.wavyLine = function (build) {
        this._b["wavyLine"] = build(new WavyLineBuilder(this._o && this._o["wavyLine"]));
        this._m["wavyLine"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.tremolo = function (build) {
        this._b["tremolo"] = build(new TremoloBuilder(this._o && this._o["tremolo"]));
        this._m["tremolo"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.accidentalMarks = function (accidentalMarks) {
        this._p.accidentalMarks = accidentalMarks;
        this._m["accidentalMarks"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.trillMark = function (build) {
        this._b["trillMark"] = build(new TrillMarkBuilder(this._o && this._o["trillMark"]));
        this._m["trillMark"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.mordent = function (build) {
        this._b["mordent"] = build(new MordentBuilder(this._o && this._o["mordent"]));
        this._m["mordent"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.invertedMordent = function (build) {
        this._b["invertedMordent"] = build(new InvertedMordentBuilder(this._o && this._o["invertedMordent"]));
        this._m["invertedMordent"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.schleifer = function (build) {
        this._b["schleifer"] = build(new SchleiferBuilder(this._o && this._o["schleifer"]));
        this._m["schleifer"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    OrnamentsBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return OrnamentsBuilder;
})();
function patchOrnaments(base) { return new OrnamentsBuilder(base); }
exports.patchOrnaments = patchOrnaments;
function buildOrnaments() { return new OrnamentsBuilder(); }
exports.buildOrnaments = buildOrnaments;
var TrillMarkBuilder = (function () {
    function TrillMarkBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TrillMarkBuilder.prototype._i = function () {
    };
    TrillMarkBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TrillMark";
        return this._p;
    };
    TrillMarkBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TrillMarkBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TrillMarkBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TrillMarkBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TrillMarkBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TrillMarkBuilder;
})();
function patchTrillMark(base) { return new TrillMarkBuilder(base); }
exports.patchTrillMark = patchTrillMark;
function buildTrillMark() { return new TrillMarkBuilder(); }
exports.buildTrillMark = buildTrillMark;
var TurnBuilder = (function () {
    function TurnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TurnBuilder.prototype._i = function () {
    };
    TurnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Turn";
        return this._p;
    };
    TurnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TurnBuilder.prototype.slash = function (slash) {
        this._p.slash = slash;
        this._m["slash"] = true;
        return this;
    };
    TurnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TurnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TurnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TurnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TurnBuilder;
})();
function patchTurn(base) { return new TurnBuilder(base); }
exports.patchTurn = patchTurn;
function buildTurn() { return new TurnBuilder(); }
exports.buildTurn = buildTurn;
var DelayedTurnBuilder = (function () {
    function DelayedTurnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DelayedTurnBuilder.prototype._i = function () {
    };
    DelayedTurnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DelayedTurn";
        return this._p;
    };
    DelayedTurnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DelayedTurnBuilder.prototype.slash = function (slash) {
        this._p.slash = slash;
        this._m["slash"] = true;
        return this;
    };
    DelayedTurnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DelayedTurnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DelayedTurnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DelayedTurnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DelayedTurnBuilder;
})();
function patchDelayedTurn(base) { return new DelayedTurnBuilder(base); }
exports.patchDelayedTurn = patchDelayedTurn;
function buildDelayedTurn() { return new DelayedTurnBuilder(); }
exports.buildDelayedTurn = buildDelayedTurn;
var InvertedTurnBuilder = (function () {
    function InvertedTurnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    InvertedTurnBuilder.prototype._i = function () {
    };
    InvertedTurnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "InvertedTurn";
        return this._p;
    };
    InvertedTurnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    InvertedTurnBuilder.prototype.slash = function (slash) {
        this._p.slash = slash;
        this._m["slash"] = true;
        return this;
    };
    InvertedTurnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    InvertedTurnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    InvertedTurnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    InvertedTurnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return InvertedTurnBuilder;
})();
function patchInvertedTurn(base) { return new InvertedTurnBuilder(base); }
exports.patchInvertedTurn = patchInvertedTurn;
function buildInvertedTurn() { return new InvertedTurnBuilder(); }
exports.buildInvertedTurn = buildInvertedTurn;
var DelayedInvertedTurnBuilder = (function () {
    function DelayedInvertedTurnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DelayedInvertedTurnBuilder.prototype._i = function () {
    };
    DelayedInvertedTurnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DelayedInvertedTurn";
        return this._p;
    };
    DelayedInvertedTurnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DelayedInvertedTurnBuilder.prototype.slash = function (slash) {
        this._p.slash = slash;
        this._m["slash"] = true;
        return this;
    };
    DelayedInvertedTurnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DelayedInvertedTurnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DelayedInvertedTurnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DelayedInvertedTurnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DelayedInvertedTurnBuilder;
})();
function patchDelayedInvertedTurn(base) { return new DelayedInvertedTurnBuilder(base); }
exports.patchDelayedInvertedTurn = patchDelayedInvertedTurn;
function buildDelayedInvertedTurn() { return new DelayedInvertedTurnBuilder(); }
exports.buildDelayedInvertedTurn = buildDelayedInvertedTurn;
var VerticalTurnBuilder = (function () {
    function VerticalTurnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    VerticalTurnBuilder.prototype._i = function () {
    };
    VerticalTurnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "VerticalTurn";
        return this._p;
    };
    VerticalTurnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    VerticalTurnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    VerticalTurnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    VerticalTurnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    VerticalTurnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return VerticalTurnBuilder;
})();
function patchVerticalTurn(base) { return new VerticalTurnBuilder(base); }
exports.patchVerticalTurn = patchVerticalTurn;
function buildVerticalTurn() { return new VerticalTurnBuilder(); }
exports.buildVerticalTurn = buildVerticalTurn;
var ShakeBuilder = (function () {
    function ShakeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ShakeBuilder.prototype._i = function () {
    };
    ShakeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Shake";
        return this._p;
    };
    ShakeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ShakeBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ShakeBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ShakeBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ShakeBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ShakeBuilder;
})();
function patchShake(base) { return new ShakeBuilder(base); }
exports.patchShake = patchShake;
function buildShake() { return new ShakeBuilder(); }
exports.buildShake = buildShake;
var MordentBuilder = (function () {
    function MordentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MordentBuilder.prototype._i = function () {
    };
    MordentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Mordent";
        return this._p;
    };
    MordentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MordentBuilder.prototype.long = function (long) {
        this._p.long = long;
        this._m["long"] = true;
        return this;
    };
    MordentBuilder.prototype.approach = function (approach) {
        this._p.approach = approach;
        this._m["approach"] = true;
        return this;
    };
    MordentBuilder.prototype.departure = function (departure) {
        this._p.departure = departure;
        this._m["departure"] = true;
        return this;
    };
    MordentBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    MordentBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    MordentBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    MordentBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return MordentBuilder;
})();
function patchMordent(base) { return new MordentBuilder(base); }
exports.patchMordent = patchMordent;
function buildMordent() { return new MordentBuilder(); }
exports.buildMordent = buildMordent;
var InvertedMordentBuilder = (function () {
    function InvertedMordentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    InvertedMordentBuilder.prototype._i = function () {
    };
    InvertedMordentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "InvertedMordent";
        return this._p;
    };
    InvertedMordentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    InvertedMordentBuilder.prototype.long = function (long) {
        this._p.long = long;
        this._m["long"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.approach = function (approach) {
        this._p.approach = approach;
        this._m["approach"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.departure = function (departure) {
        this._p.departure = departure;
        this._m["departure"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    InvertedMordentBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return InvertedMordentBuilder;
})();
function patchInvertedMordent(base) { return new InvertedMordentBuilder(base); }
exports.patchInvertedMordent = patchInvertedMordent;
function buildInvertedMordent() { return new InvertedMordentBuilder(); }
exports.buildInvertedMordent = buildInvertedMordent;
var SchleiferBuilder = (function () {
    function SchleiferBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SchleiferBuilder.prototype._i = function () {
    };
    SchleiferBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Schleifer";
        return this._p;
    };
    SchleiferBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SchleiferBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    SchleiferBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    SchleiferBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    SchleiferBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return SchleiferBuilder;
})();
function patchSchleifer(base) { return new SchleiferBuilder(base); }
exports.patchSchleifer = patchSchleifer;
function buildSchleifer() { return new SchleiferBuilder(); }
exports.buildSchleifer = buildSchleifer;
var TremoloBuilder = (function () {
    function TremoloBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TremoloBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    TremoloBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tremolo";
        return this._p;
    };
    TremoloBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TremoloBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    TremoloBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    TremoloBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TremoloBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TremoloBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TremoloBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TremoloBuilder;
})();
function patchTremolo(base) { return new TremoloBuilder(base); }
exports.patchTremolo = patchTremolo;
function buildTremolo() { return new TremoloBuilder(); }
exports.buildTremolo = buildTremolo;
var OtherOrnamentBuilder = (function () {
    function OtherOrnamentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherOrnamentBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    OtherOrnamentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherOrnament";
        return this._p;
    };
    OtherOrnamentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherOrnamentBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    OtherOrnamentBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherOrnamentBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    OtherOrnamentBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    OtherOrnamentBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    OtherOrnamentBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return OtherOrnamentBuilder;
})();
function patchOtherOrnament(base) { return new OtherOrnamentBuilder(base); }
exports.patchOtherOrnament = patchOtherOrnament;
function buildOtherOrnament() { return new OtherOrnamentBuilder(); }
exports.buildOtherOrnament = buildOtherOrnament;
var AccidentalMarkBuilder = (function () {
    function AccidentalMarkBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccidentalMarkBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["mark"]) || this._b["mark"] !== undefined || this._p.mark !== undefined, "mark is a required field");
    };
    AccidentalMarkBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "AccidentalMark";
        return this._p;
    };
    AccidentalMarkBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccidentalMarkBuilder.prototype.mark = function (mark) {
        this._p.mark = mark;
        this._m["mark"] = true;
        return this;
    };
    AccidentalMarkBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    AccidentalMarkBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    AccidentalMarkBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    AccidentalMarkBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return AccidentalMarkBuilder;
})();
function patchAccidentalMark(base) { return new AccidentalMarkBuilder(base); }
exports.patchAccidentalMark = patchAccidentalMark;
function buildAccidentalMark() { return new AccidentalMarkBuilder(); }
exports.buildAccidentalMark = buildAccidentalMark;
var TechnicalBuilder = (function () {
    function TechnicalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TechnicalBuilder.prototype._i = function () {
    };
    TechnicalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Technical";
        return this._p;
    };
    TechnicalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TechnicalBuilder.prototype.tripleTongue = function (build) {
        this._b["tripleTongue"] = build(new TripleTongueBuilder(this._o && this._o["tripleTongue"]));
        this._m["tripleTongue"] = true;
        return this;
    };
    TechnicalBuilder.prototype.toe = function (build) {
        this._b["toe"] = build(new ToeBuilder(this._o && this._o["toe"]));
        this._m["toe"] = true;
        return this;
    };
    TechnicalBuilder.prototype.hole = function (build) {
        this._b["hole"] = build(new HoleBuilder(this._o && this._o["hole"]));
        this._m["hole"] = true;
        return this;
    };
    TechnicalBuilder.prototype.hammerOn = function (build) {
        this._b["hammerOn"] = build(new HammerOnBuilder(this._o && this._o["hammerOn"]));
        this._m["hammerOn"] = true;
        return this;
    };
    TechnicalBuilder.prototype.upBow = function (build) {
        this._b["upBow"] = build(new UpBowBuilder(this._o && this._o["upBow"]));
        this._m["upBow"] = true;
        return this;
    };
    TechnicalBuilder.prototype.downBow = function (build) {
        this._b["downBow"] = build(new DownBowBuilder(this._o && this._o["downBow"]));
        this._m["downBow"] = true;
        return this;
    };
    TechnicalBuilder.prototype.fret = function (build) {
        this._b["fret"] = build(new FretBuilder(this._o && this._o["fret"]));
        this._m["fret"] = true;
        return this;
    };
    TechnicalBuilder.prototype.tap = function (build) {
        this._b["tap"] = build(new TapBuilder(this._o && this._o["tap"]));
        this._m["tap"] = true;
        return this;
    };
    TechnicalBuilder.prototype.pullOff = function (build) {
        this._b["pullOff"] = build(new PullOffBuilder(this._o && this._o["pullOff"]));
        this._m["pullOff"] = true;
        return this;
    };
    TechnicalBuilder.prototype.handbell = function (build) {
        this._b["handbell"] = build(new HandbellBuilder(this._o && this._o["handbell"]));
        this._m["handbell"] = true;
        return this;
    };
    TechnicalBuilder.prototype.bend = function (build) {
        this._b["bend"] = build(new BendBuilder(this._o && this._o["bend"]));
        this._m["bend"] = true;
        return this;
    };
    TechnicalBuilder.prototype.thumbPosition = function (build) {
        this._b["thumbPosition"] = build(new ThumbPositionBuilder(this._o && this._o["thumbPosition"]));
        this._m["thumbPosition"] = true;
        return this;
    };
    TechnicalBuilder.prototype.stopped = function (build) {
        this._b["stopped"] = build(new StoppedBuilder(this._o && this._o["stopped"]));
        this._m["stopped"] = true;
        return this;
    };
    TechnicalBuilder.prototype.pluck = function (build) {
        this._b["pluck"] = build(new PluckBuilder(this._o && this._o["pluck"]));
        this._m["pluck"] = true;
        return this;
    };
    TechnicalBuilder.prototype.doubleTongue = function (build) {
        this._b["doubleTongue"] = build(new DoubleTongueBuilder(this._o && this._o["doubleTongue"]));
        this._m["doubleTongue"] = true;
        return this;
    };
    TechnicalBuilder.prototype.string = function (build) {
        this._b["string"] = build(new StringBuilder(this._o && this._o["string"]));
        this._m["string"] = true;
        return this;
    };
    TechnicalBuilder.prototype.openString = function (build) {
        this._b["openString"] = build(new OpenStringBuilder(this._o && this._o["openString"]));
        this._m["openString"] = true;
        return this;
    };
    TechnicalBuilder.prototype.fingernails = function (build) {
        this._b["fingernails"] = build(new FingernailsBuilder(this._o && this._o["fingernails"]));
        this._m["fingernails"] = true;
        return this;
    };
    TechnicalBuilder.prototype.arrow = function (build) {
        this._b["arrow"] = build(new ArrowBuilder(this._o && this._o["arrow"]));
        this._m["arrow"] = true;
        return this;
    };
    TechnicalBuilder.prototype.harmonic = function (build) {
        this._b["harmonic"] = build(new HarmonicBuilder(this._o && this._o["harmonic"]));
        this._m["harmonic"] = true;
        return this;
    };
    TechnicalBuilder.prototype.heel = function (build) {
        this._b["heel"] = build(new HeelBuilder(this._o && this._o["heel"]));
        this._m["heel"] = true;
        return this;
    };
    TechnicalBuilder.prototype.otherTechnical = function (build) {
        this._b["otherTechnical"] = build(new OtherTechnicalBuilder(this._o && this._o["otherTechnical"]));
        this._m["otherTechnical"] = true;
        return this;
    };
    TechnicalBuilder.prototype.snapPizzicato = function (build) {
        this._b["snapPizzicato"] = build(new SnapPizzicatoBuilder(this._o && this._o["snapPizzicato"]));
        this._m["snapPizzicato"] = true;
        return this;
    };
    TechnicalBuilder.prototype.fingering = function (build) {
        this._b["fingering"] = build(new FingeringBuilder(this._o && this._o["fingering"]));
        this._m["fingering"] = true;
        return this;
    };
    return TechnicalBuilder;
})();
function patchTechnical(base) { return new TechnicalBuilder(base); }
exports.patchTechnical = patchTechnical;
function buildTechnical() { return new TechnicalBuilder(); }
exports.buildTechnical = buildTechnical;
var UpBowBuilder = (function () {
    function UpBowBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    UpBowBuilder.prototype._i = function () {
    };
    UpBowBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "UpBow";
        return this._p;
    };
    UpBowBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    UpBowBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    UpBowBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    UpBowBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    UpBowBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return UpBowBuilder;
})();
function patchUpBow(base) { return new UpBowBuilder(base); }
exports.patchUpBow = patchUpBow;
function buildUpBow() { return new UpBowBuilder(); }
exports.buildUpBow = buildUpBow;
var DownBowBuilder = (function () {
    function DownBowBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DownBowBuilder.prototype._i = function () {
    };
    DownBowBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DownBow";
        return this._p;
    };
    DownBowBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DownBowBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DownBowBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DownBowBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DownBowBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DownBowBuilder;
})();
function patchDownBow(base) { return new DownBowBuilder(base); }
exports.patchDownBow = patchDownBow;
function buildDownBow() { return new DownBowBuilder(); }
exports.buildDownBow = buildDownBow;
var HarmonicBuilder = (function () {
    function HarmonicBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HarmonicBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["artificial"]) || this._b["artificial"] !== undefined || this._p.artificial !== undefined, "artificial is a required field");
        console.assert((this._o && !this._m["touchingPitch"]) || this._b["touchingPitch"] !== undefined || this._p.touchingPitch !== undefined, "touchingPitch is a required field");
        console.assert((this._o && !this._m["soundingPitch"]) || this._b["soundingPitch"] !== undefined || this._p.soundingPitch !== undefined, "soundingPitch is a required field");
        console.assert((this._o && !this._m["natural"]) || this._b["natural"] !== undefined || this._p.natural !== undefined, "natural is a required field");
        console.assert((this._o && !this._m["basePitch"]) || this._b["basePitch"] !== undefined || this._p.basePitch !== undefined, "basePitch is a required field");
    };
    HarmonicBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Harmonic";
        return this._p;
    };
    HarmonicBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HarmonicBuilder.prototype.artificial = function (artificial) {
        this._p.artificial = artificial;
        this._m["artificial"] = true;
        return this;
    };
    HarmonicBuilder.prototype.touchingPitch = function (touchingPitch) {
        this._p.touchingPitch = touchingPitch;
        this._m["touchingPitch"] = true;
        return this;
    };
    HarmonicBuilder.prototype.soundingPitch = function (soundingPitch) {
        this._p.soundingPitch = soundingPitch;
        this._m["soundingPitch"] = true;
        return this;
    };
    HarmonicBuilder.prototype.natural = function (natural) {
        this._p.natural = natural;
        this._m["natural"] = true;
        return this;
    };
    HarmonicBuilder.prototype.basePitch = function (basePitch) {
        this._p.basePitch = basePitch;
        this._m["basePitch"] = true;
        return this;
    };
    HarmonicBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return HarmonicBuilder;
})();
function patchHarmonic(base) { return new HarmonicBuilder(base); }
exports.patchHarmonic = patchHarmonic;
function buildHarmonic() { return new HarmonicBuilder(); }
exports.buildHarmonic = buildHarmonic;
var OpenStringBuilder = (function () {
    function OpenStringBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OpenStringBuilder.prototype._i = function () {
    };
    OpenStringBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OpenString";
        return this._p;
    };
    OpenStringBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OpenStringBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    OpenStringBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    OpenStringBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    OpenStringBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return OpenStringBuilder;
})();
function patchOpenString(base) { return new OpenStringBuilder(base); }
exports.patchOpenString = patchOpenString;
function buildOpenString() { return new OpenStringBuilder(); }
exports.buildOpenString = buildOpenString;
var ThumbPositionBuilder = (function () {
    function ThumbPositionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ThumbPositionBuilder.prototype._i = function () {
    };
    ThumbPositionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ThumbPosition";
        return this._p;
    };
    ThumbPositionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ThumbPositionBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ThumbPositionBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ThumbPositionBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ThumbPositionBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ThumbPositionBuilder;
})();
function patchThumbPosition(base) { return new ThumbPositionBuilder(base); }
exports.patchThumbPosition = patchThumbPosition;
function buildThumbPosition() { return new ThumbPositionBuilder(); }
exports.buildThumbPosition = buildThumbPosition;
var PluckBuilder = (function () {
    function PluckBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PluckBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    PluckBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Pluck";
        return this._p;
    };
    PluckBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PluckBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    PluckBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PluckBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PluckBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PluckBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PluckBuilder;
})();
function patchPluck(base) { return new PluckBuilder(base); }
exports.patchPluck = patchPluck;
function buildPluck() { return new PluckBuilder(); }
exports.buildPluck = buildPluck;
var DoubleTongueBuilder = (function () {
    function DoubleTongueBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DoubleTongueBuilder.prototype._i = function () {
    };
    DoubleTongueBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DoubleTongue";
        return this._p;
    };
    DoubleTongueBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DoubleTongueBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DoubleTongueBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DoubleTongueBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DoubleTongueBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DoubleTongueBuilder;
})();
function patchDoubleTongue(base) { return new DoubleTongueBuilder(base); }
exports.patchDoubleTongue = patchDoubleTongue;
function buildDoubleTongue() { return new DoubleTongueBuilder(); }
exports.buildDoubleTongue = buildDoubleTongue;
var TripleTongueBuilder = (function () {
    function TripleTongueBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TripleTongueBuilder.prototype._i = function () {
    };
    TripleTongueBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "TripleTongue";
        return this._p;
    };
    TripleTongueBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TripleTongueBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TripleTongueBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TripleTongueBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TripleTongueBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TripleTongueBuilder;
})();
function patchTripleTongue(base) { return new TripleTongueBuilder(base); }
exports.patchTripleTongue = patchTripleTongue;
function buildTripleTongue() { return new TripleTongueBuilder(); }
exports.buildTripleTongue = buildTripleTongue;
var StoppedBuilder = (function () {
    function StoppedBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StoppedBuilder.prototype._i = function () {
    };
    StoppedBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Stopped";
        return this._p;
    };
    StoppedBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StoppedBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StoppedBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StoppedBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StoppedBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StoppedBuilder;
})();
function patchStopped(base) { return new StoppedBuilder(base); }
exports.patchStopped = patchStopped;
function buildStopped() { return new StoppedBuilder(); }
exports.buildStopped = buildStopped;
var SnapPizzicatoBuilder = (function () {
    function SnapPizzicatoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SnapPizzicatoBuilder.prototype._i = function () {
    };
    SnapPizzicatoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "SnapPizzicato";
        return this._p;
    };
    SnapPizzicatoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SnapPizzicatoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    SnapPizzicatoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    SnapPizzicatoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    SnapPizzicatoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return SnapPizzicatoBuilder;
})();
function patchSnapPizzicato(base) { return new SnapPizzicatoBuilder(base); }
exports.patchSnapPizzicato = patchSnapPizzicato;
function buildSnapPizzicato() { return new SnapPizzicatoBuilder(); }
exports.buildSnapPizzicato = buildSnapPizzicato;
var HammerOnBuilder = (function () {
    function HammerOnBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HammerOnBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    HammerOnBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "HammerOn";
        return this._p;
    };
    HammerOnBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HammerOnBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    HammerOnBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    HammerOnBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    HammerOnBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    HammerOnBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    HammerOnBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    HammerOnBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return HammerOnBuilder;
})();
function patchHammerOn(base) { return new HammerOnBuilder(base); }
exports.patchHammerOn = patchHammerOn;
function buildHammerOn() { return new HammerOnBuilder(); }
exports.buildHammerOn = buildHammerOn;
var PullOffBuilder = (function () {
    function PullOffBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PullOffBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    PullOffBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PullOff";
        return this._p;
    };
    PullOffBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PullOffBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    PullOffBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PullOffBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    PullOffBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PullOffBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PullOffBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PullOffBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PullOffBuilder;
})();
function patchPullOff(base) { return new PullOffBuilder(base); }
exports.patchPullOff = patchPullOff;
function buildPullOff() { return new PullOffBuilder(); }
exports.buildPullOff = buildPullOff;
var BendBuilder = (function () {
    function BendBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BendBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["bendAlter"]) || this._b["bendAlter"] !== undefined || this._p.bendAlter !== undefined, "bendAlter is a required field");
        console.assert((this._o && !this._m["preBend"]) || this._b["preBend"] !== undefined || this._p.preBend !== undefined, "preBend is a required field");
        console.assert((this._o && !this._m["release"]) || this._b["release"] !== undefined || this._p.release !== undefined, "release is a required field");
    };
    BendBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Bend";
        return this._p;
    };
    BendBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BendBuilder.prototype.bendAlter = function (bendAlter) {
        this._p.bendAlter = bendAlter;
        this._m["bendAlter"] = true;
        return this;
    };
    BendBuilder.prototype.withBar = function (build) {
        this._b["withBar"] = build(new WithBarBuilder(this._o && this._o["withBar"]));
        this._m["withBar"] = true;
        return this;
    };
    BendBuilder.prototype.preBend = function (preBend) {
        this._p.preBend = preBend;
        this._m["preBend"] = true;
        return this;
    };
    BendBuilder.prototype.release = function (release) {
        this._p.release = release;
        this._m["release"] = true;
        return this;
    };
    BendBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    BendBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    BendBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    BendBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return BendBuilder;
})();
function patchBend(base) { return new BendBuilder(base); }
exports.patchBend = patchBend;
function buildBend() { return new BendBuilder(); }
exports.buildBend = buildBend;
var WithBarBuilder = (function () {
    function WithBarBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WithBarBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    WithBarBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "WithBar";
        return this._p;
    };
    WithBarBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WithBarBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    WithBarBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    WithBarBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    WithBarBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    WithBarBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return WithBarBuilder;
})();
function patchWithBar(base) { return new WithBarBuilder(base); }
exports.patchWithBar = patchWithBar;
function buildWithBar() { return new WithBarBuilder(); }
exports.buildWithBar = buildWithBar;
var TapBuilder = (function () {
    function TapBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TapBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    TapBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tap";
        return this._p;
    };
    TapBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TapBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    TapBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TapBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TapBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TapBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TapBuilder;
})();
function patchTap(base) { return new TapBuilder(base); }
exports.patchTap = patchTap;
function buildTap() { return new TapBuilder(); }
exports.buildTap = buildTap;
var HeelBuilder = (function () {
    function HeelBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HeelBuilder.prototype._i = function () {
    };
    HeelBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Heel";
        return this._p;
    };
    HeelBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HeelBuilder.prototype.substitution = function (substitution) {
        this._p.substitution = substitution;
        this._m["substitution"] = true;
        return this;
    };
    HeelBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    HeelBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    HeelBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    HeelBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return HeelBuilder;
})();
function patchHeel(base) { return new HeelBuilder(base); }
exports.patchHeel = patchHeel;
function buildHeel() { return new HeelBuilder(); }
exports.buildHeel = buildHeel;
var ToeBuilder = (function () {
    function ToeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ToeBuilder.prototype._i = function () {
    };
    ToeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Toe";
        return this._p;
    };
    ToeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ToeBuilder.prototype.substitution = function (substitution) {
        this._p.substitution = substitution;
        this._m["substitution"] = true;
        return this;
    };
    ToeBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ToeBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ToeBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ToeBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ToeBuilder;
})();
function patchToe(base) { return new ToeBuilder(base); }
exports.patchToe = patchToe;
function buildToe() { return new ToeBuilder(); }
exports.buildToe = buildToe;
var FingernailsBuilder = (function () {
    function FingernailsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FingernailsBuilder.prototype._i = function () {
    };
    FingernailsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Fingernails";
        return this._p;
    };
    FingernailsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FingernailsBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FingernailsBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FingernailsBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FingernailsBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FingernailsBuilder;
})();
function patchFingernails(base) { return new FingernailsBuilder(base); }
exports.patchFingernails = patchFingernails;
function buildFingernails() { return new FingernailsBuilder(); }
exports.buildFingernails = buildFingernails;
var HoleBuilder = (function () {
    function HoleBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HoleBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["holeClosed"]) || this._b["holeClosed"] !== undefined || this._p.holeClosed !== undefined, "holeClosed is a required field");
        console.assert((this._o && !this._m["holeShape"]) || this._b["holeShape"] !== undefined || this._p.holeShape !== undefined, "holeShape is a required field");
    };
    HoleBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Hole";
        return this._p;
    };
    HoleBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HoleBuilder.prototype.holeClosed = function (build) {
        this._b["holeClosed"] = build(new HoleClosedBuilder(this._o && this._o["holeClosed"]));
        this._m["holeClosed"] = true;
        return this;
    };
    HoleBuilder.prototype.holeShape = function (holeShape) {
        this._p.holeShape = holeShape;
        this._m["holeShape"] = true;
        return this;
    };
    HoleBuilder.prototype.holeType = function (holeType) {
        this._p.holeType = holeType;
        this._m["holeType"] = true;
        return this;
    };
    HoleBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    HoleBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    HoleBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    HoleBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return HoleBuilder;
})();
function patchHole(base) { return new HoleBuilder(base); }
exports.patchHole = patchHole;
function buildHole() { return new HoleBuilder(); }
exports.buildHole = buildHole;
var HoleClosedBuilder = (function () {
    function HoleClosedBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HoleClosedBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    HoleClosedBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "HoleClosed";
        return this._p;
    };
    HoleClosedBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HoleClosedBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    HoleClosedBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    return HoleClosedBuilder;
})();
function patchHoleClosed(base) { return new HoleClosedBuilder(base); }
exports.patchHoleClosed = patchHoleClosed;
function buildHoleClosed() { return new HoleClosedBuilder(); }
exports.buildHoleClosed = buildHoleClosed;
var ArrowBuilder = (function () {
    function ArrowBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ArrowBuilder.prototype._i = function () {
    };
    ArrowBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Arrow";
        return this._p;
    };
    ArrowBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ArrowBuilder.prototype.arrowStyle = function (arrowStyle) {
        this._p.arrowStyle = arrowStyle;
        this._m["arrowStyle"] = true;
        return this;
    };
    ArrowBuilder.prototype.arrowDirection = function (arrowDirection) {
        this._p.arrowDirection = arrowDirection;
        this._m["arrowDirection"] = true;
        return this;
    };
    ArrowBuilder.prototype.circularArrow = function (circularArrow) {
        this._p.circularArrow = circularArrow;
        this._m["circularArrow"] = true;
        return this;
    };
    ArrowBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ArrowBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ArrowBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ArrowBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ArrowBuilder;
})();
function patchArrow(base) { return new ArrowBuilder(base); }
exports.patchArrow = patchArrow;
function buildArrow() { return new ArrowBuilder(); }
exports.buildArrow = buildArrow;
var HandbellBuilder = (function () {
    function HandbellBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HandbellBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    HandbellBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Handbell";
        return this._p;
    };
    HandbellBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HandbellBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    HandbellBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    HandbellBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    HandbellBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    HandbellBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return HandbellBuilder;
})();
function patchHandbell(base) { return new HandbellBuilder(base); }
exports.patchHandbell = patchHandbell;
function buildHandbell() { return new HandbellBuilder(); }
exports.buildHandbell = buildHandbell;
var OtherTechnicalBuilder = (function () {
    function OtherTechnicalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherTechnicalBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    OtherTechnicalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherTechnical";
        return this._p;
    };
    OtherTechnicalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherTechnicalBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherTechnicalBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    OtherTechnicalBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    OtherTechnicalBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    OtherTechnicalBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return OtherTechnicalBuilder;
})();
function patchOtherTechnical(base) { return new OtherTechnicalBuilder(base); }
exports.patchOtherTechnical = patchOtherTechnical;
function buildOtherTechnical() { return new OtherTechnicalBuilder(); }
exports.buildOtherTechnical = buildOtherTechnical;
var ArticulationsBuilder = (function () {
    function ArticulationsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ArticulationsBuilder.prototype._i = function () {
    };
    ArticulationsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Articulations";
        return this._p;
    };
    ArticulationsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ArticulationsBuilder.prototype.accent = function (build) {
        this._b["accent"] = build(new AccentBuilder(this._o && this._o["accent"]));
        this._m["accent"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.doit = function (build) {
        this._b["doit"] = build(new DoitBuilder(this._o && this._o["doit"]));
        this._m["doit"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.breathMark = function (build) {
        this._b["breathMark"] = build(new BreathMarkBuilder(this._o && this._o["breathMark"]));
        this._m["breathMark"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.otherArticulations = function (otherArticulations) {
        this._p.otherArticulations = otherArticulations;
        this._m["otherArticulations"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.detachedLegato = function (build) {
        this._b["detachedLegato"] = build(new DetachedLegatoBuilder(this._o && this._o["detachedLegato"]));
        this._m["detachedLegato"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.staccatissimo = function (build) {
        this._b["staccatissimo"] = build(new StaccatissimoBuilder(this._o && this._o["staccatissimo"]));
        this._m["staccatissimo"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.plop = function (build) {
        this._b["plop"] = build(new PlopBuilder(this._o && this._o["plop"]));
        this._m["plop"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.unstress = function (build) {
        this._b["unstress"] = build(new UnstressBuilder(this._o && this._o["unstress"]));
        this._m["unstress"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.strongAccent = function (build) {
        this._b["strongAccent"] = build(new StrongAccentBuilder(this._o && this._o["strongAccent"]));
        this._m["strongAccent"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.staccato = function (build) {
        this._b["staccato"] = build(new StaccatoBuilder(this._o && this._o["staccato"]));
        this._m["staccato"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.spiccato = function (build) {
        this._b["spiccato"] = build(new SpiccatoBuilder(this._o && this._o["spiccato"]));
        this._m["spiccato"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.scoop = function (build) {
        this._b["scoop"] = build(new ScoopBuilder(this._o && this._o["scoop"]));
        this._m["scoop"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.falloff = function (build) {
        this._b["falloff"] = build(new FalloffBuilder(this._o && this._o["falloff"]));
        this._m["falloff"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.caesura = function (build) {
        this._b["caesura"] = build(new CaesuraBuilder(this._o && this._o["caesura"]));
        this._m["caesura"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.stress = function (build) {
        this._b["stress"] = build(new StressBuilder(this._o && this._o["stress"]));
        this._m["stress"] = true;
        return this;
    };
    ArticulationsBuilder.prototype.tenuto = function (build) {
        this._b["tenuto"] = build(new TenutoBuilder(this._o && this._o["tenuto"]));
        this._m["tenuto"] = true;
        return this;
    };
    return ArticulationsBuilder;
})();
function patchArticulations(base) { return new ArticulationsBuilder(base); }
exports.patchArticulations = patchArticulations;
function buildArticulations() { return new ArticulationsBuilder(); }
exports.buildArticulations = buildArticulations;
var AccentBuilder = (function () {
    function AccentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccentBuilder.prototype._i = function () {
    };
    AccentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Accent";
        return this._p;
    };
    AccentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccentBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    AccentBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    AccentBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    AccentBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return AccentBuilder;
})();
function patchAccent(base) { return new AccentBuilder(base); }
exports.patchAccent = patchAccent;
function buildAccent() { return new AccentBuilder(); }
exports.buildAccent = buildAccent;
var StrongAccentBuilder = (function () {
    function StrongAccentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StrongAccentBuilder.prototype._i = function () {
    };
    StrongAccentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "StrongAccent";
        return this._p;
    };
    StrongAccentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StrongAccentBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    StrongAccentBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StrongAccentBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StrongAccentBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StrongAccentBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StrongAccentBuilder;
})();
function patchStrongAccent(base) { return new StrongAccentBuilder(base); }
exports.patchStrongAccent = patchStrongAccent;
function buildStrongAccent() { return new StrongAccentBuilder(); }
exports.buildStrongAccent = buildStrongAccent;
var StaccatoBuilder = (function () {
    function StaccatoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StaccatoBuilder.prototype._i = function () {
    };
    StaccatoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Staccato";
        return this._p;
    };
    StaccatoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StaccatoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StaccatoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StaccatoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StaccatoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StaccatoBuilder;
})();
function patchStaccato(base) { return new StaccatoBuilder(base); }
exports.patchStaccato = patchStaccato;
function buildStaccato() { return new StaccatoBuilder(); }
exports.buildStaccato = buildStaccato;
var TenutoBuilder = (function () {
    function TenutoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TenutoBuilder.prototype._i = function () {
    };
    TenutoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Tenuto";
        return this._p;
    };
    TenutoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TenutoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    TenutoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    TenutoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    TenutoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return TenutoBuilder;
})();
function patchTenuto(base) { return new TenutoBuilder(base); }
exports.patchTenuto = patchTenuto;
function buildTenuto() { return new TenutoBuilder(); }
exports.buildTenuto = buildTenuto;
var DetachedLegatoBuilder = (function () {
    function DetachedLegatoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DetachedLegatoBuilder.prototype._i = function () {
    };
    DetachedLegatoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DetachedLegato";
        return this._p;
    };
    DetachedLegatoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DetachedLegatoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DetachedLegatoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DetachedLegatoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DetachedLegatoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DetachedLegatoBuilder;
})();
function patchDetachedLegato(base) { return new DetachedLegatoBuilder(base); }
exports.patchDetachedLegato = patchDetachedLegato;
function buildDetachedLegato() { return new DetachedLegatoBuilder(); }
exports.buildDetachedLegato = buildDetachedLegato;
var StaccatissimoBuilder = (function () {
    function StaccatissimoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StaccatissimoBuilder.prototype._i = function () {
    };
    StaccatissimoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Staccatissimo";
        return this._p;
    };
    StaccatissimoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StaccatissimoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StaccatissimoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StaccatissimoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StaccatissimoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StaccatissimoBuilder;
})();
function patchStaccatissimo(base) { return new StaccatissimoBuilder(base); }
exports.patchStaccatissimo = patchStaccatissimo;
function buildStaccatissimo() { return new StaccatissimoBuilder(); }
exports.buildStaccatissimo = buildStaccatissimo;
var SpiccatoBuilder = (function () {
    function SpiccatoBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SpiccatoBuilder.prototype._i = function () {
    };
    SpiccatoBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Spiccato";
        return this._p;
    };
    SpiccatoBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SpiccatoBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    SpiccatoBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    SpiccatoBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    SpiccatoBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return SpiccatoBuilder;
})();
function patchSpiccato(base) { return new SpiccatoBuilder(base); }
exports.patchSpiccato = patchSpiccato;
function buildSpiccato() { return new SpiccatoBuilder(); }
exports.buildSpiccato = buildSpiccato;
var ScoopBuilder = (function () {
    function ScoopBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScoopBuilder.prototype._i = function () {
    };
    ScoopBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Scoop";
        return this._p;
    };
    ScoopBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScoopBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return ScoopBuilder;
})();
function patchScoop(base) { return new ScoopBuilder(base); }
exports.patchScoop = patchScoop;
function buildScoop() { return new ScoopBuilder(); }
exports.buildScoop = buildScoop;
var PlopBuilder = (function () {
    function PlopBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PlopBuilder.prototype._i = function () {
    };
    PlopBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Plop";
        return this._p;
    };
    PlopBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PlopBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return PlopBuilder;
})();
function patchPlop(base) { return new PlopBuilder(base); }
exports.patchPlop = patchPlop;
function buildPlop() { return new PlopBuilder(); }
exports.buildPlop = buildPlop;
var DoitBuilder = (function () {
    function DoitBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DoitBuilder.prototype._i = function () {
    };
    DoitBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Doit";
        return this._p;
    };
    DoitBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DoitBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return DoitBuilder;
})();
function patchDoit(base) { return new DoitBuilder(base); }
exports.patchDoit = patchDoit;
function buildDoit() { return new DoitBuilder(); }
exports.buildDoit = buildDoit;
var FalloffBuilder = (function () {
    function FalloffBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FalloffBuilder.prototype._i = function () {
    };
    FalloffBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Falloff";
        return this._p;
    };
    FalloffBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FalloffBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return FalloffBuilder;
})();
function patchFalloff(base) { return new FalloffBuilder(base); }
exports.patchFalloff = patchFalloff;
function buildFalloff() { return new FalloffBuilder(); }
exports.buildFalloff = buildFalloff;
var BreathMarkBuilder = (function () {
    function BreathMarkBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BreathMarkBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    BreathMarkBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BreathMark";
        return this._p;
    };
    BreathMarkBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BreathMarkBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    BreathMarkBuilder.prototype.lineShape = function (lineShape) {
        this._p.lineShape = lineShape;
        this._m["lineShape"] = true;
        return this;
    };
    return BreathMarkBuilder;
})();
function patchBreathMark(base) { return new BreathMarkBuilder(base); }
exports.patchBreathMark = patchBreathMark;
function buildBreathMark() { return new BreathMarkBuilder(); }
exports.buildBreathMark = buildBreathMark;
var CaesuraBuilder = (function () {
    function CaesuraBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CaesuraBuilder.prototype._i = function () {
    };
    CaesuraBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Caesura";
        return this._p;
    };
    CaesuraBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CaesuraBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    CaesuraBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    CaesuraBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    CaesuraBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return CaesuraBuilder;
})();
function patchCaesura(base) { return new CaesuraBuilder(base); }
exports.patchCaesura = patchCaesura;
function buildCaesura() { return new CaesuraBuilder(); }
exports.buildCaesura = buildCaesura;
var StressBuilder = (function () {
    function StressBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StressBuilder.prototype._i = function () {
    };
    StressBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Stress";
        return this._p;
    };
    StressBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StressBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StressBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StressBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StressBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StressBuilder;
})();
function patchStress(base) { return new StressBuilder(base); }
exports.patchStress = patchStress;
function buildStress() { return new StressBuilder(); }
exports.buildStress = buildStress;
var UnstressBuilder = (function () {
    function UnstressBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    UnstressBuilder.prototype._i = function () {
    };
    UnstressBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Unstress";
        return this._p;
    };
    UnstressBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    UnstressBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    UnstressBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    UnstressBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    UnstressBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return UnstressBuilder;
})();
function patchUnstress(base) { return new UnstressBuilder(base); }
exports.patchUnstress = patchUnstress;
function buildUnstress() { return new UnstressBuilder(); }
exports.buildUnstress = buildUnstress;
var OtherArticulationBuilder = (function () {
    function OtherArticulationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OtherArticulationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    OtherArticulationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OtherArticulation";
        return this._p;
    };
    OtherArticulationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OtherArticulationBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OtherArticulationBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    OtherArticulationBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    OtherArticulationBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    OtherArticulationBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return OtherArticulationBuilder;
})();
function patchOtherArticulation(base) { return new OtherArticulationBuilder(base); }
exports.patchOtherArticulation = patchOtherArticulation;
function buildOtherArticulation() { return new OtherArticulationBuilder(); }
exports.buildOtherArticulation = buildOtherArticulation;
var ArpeggiateBuilder = (function () {
    function ArpeggiateBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ArpeggiateBuilder.prototype._i = function () {
    };
    ArpeggiateBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Arpeggiate";
        return this._p;
    };
    ArpeggiateBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ArpeggiateBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    ArpeggiateBuilder.prototype.direction = function (direction) {
        this._p.direction = direction;
        this._m["direction"] = true;
        return this;
    };
    ArpeggiateBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ArpeggiateBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ArpeggiateBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ArpeggiateBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ArpeggiateBuilder;
})();
function patchArpeggiate(base) { return new ArpeggiateBuilder(base); }
exports.patchArpeggiate = patchArpeggiate;
function buildArpeggiate() { return new ArpeggiateBuilder(); }
exports.buildArpeggiate = buildArpeggiate;
var NonArpeggiateBuilder = (function () {
    function NonArpeggiateBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    NonArpeggiateBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    NonArpeggiateBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "NonArpeggiate";
        return this._p;
    };
    NonArpeggiateBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    NonArpeggiateBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    NonArpeggiateBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    NonArpeggiateBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    NonArpeggiateBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    NonArpeggiateBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    NonArpeggiateBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return NonArpeggiateBuilder;
})();
function patchNonArpeggiate(base) { return new NonArpeggiateBuilder(base); }
exports.patchNonArpeggiate = patchNonArpeggiate;
function buildNonArpeggiate() { return new NonArpeggiateBuilder(); }
exports.buildNonArpeggiate = buildNonArpeggiate;
var LaughingBuilder = (function () {
    function LaughingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LaughingBuilder.prototype._i = function () {
    };
    LaughingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Laughing";
        return this._p;
    };
    LaughingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LaughingBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return LaughingBuilder;
})();
function patchLaughing(base) { return new LaughingBuilder(base); }
exports.patchLaughing = patchLaughing;
function buildLaughing() { return new LaughingBuilder(); }
exports.buildLaughing = buildLaughing;
var HummingBuilder = (function () {
    function HummingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HummingBuilder.prototype._i = function () {
    };
    HummingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Humming";
        return this._p;
    };
    HummingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HummingBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return HummingBuilder;
})();
function patchHumming(base) { return new HummingBuilder(base); }
exports.patchHumming = patchHumming;
function buildHumming() { return new HummingBuilder(); }
exports.buildHumming = buildHumming;
var EndLineBuilder = (function () {
    function EndLineBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EndLineBuilder.prototype._i = function () {
    };
    EndLineBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "EndLine";
        return this._p;
    };
    EndLineBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EndLineBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return EndLineBuilder;
})();
function patchEndLine(base) { return new EndLineBuilder(base); }
exports.patchEndLine = patchEndLine;
function buildEndLine() { return new EndLineBuilder(); }
exports.buildEndLine = buildEndLine;
var EndParagraphBuilder = (function () {
    function EndParagraphBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EndParagraphBuilder.prototype._i = function () {
    };
    EndParagraphBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "EndParagraph";
        return this._p;
    };
    EndParagraphBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EndParagraphBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return EndParagraphBuilder;
})();
function patchEndParagraph(base) { return new EndParagraphBuilder(base); }
exports.patchEndParagraph = patchEndParagraph;
function buildEndParagraph() { return new EndParagraphBuilder(); }
exports.buildEndParagraph = buildEndParagraph;
var LyricPartsBuilder = (function () {
    function LyricPartsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LyricPartsBuilder.prototype._i = function () {
    };
    LyricPartsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LyricParts";
        return this._p;
    };
    LyricPartsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return LyricPartsBuilder;
})();
function patchLyricParts(base) { return new LyricPartsBuilder(base); }
exports.patchLyricParts = patchLyricParts;
function buildLyricParts() { return new LyricPartsBuilder(); }
exports.buildLyricParts = buildLyricParts;
var LyricBuilder = (function () {
    function LyricBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LyricBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["lyricParts"]) || this._b["lyricParts"] !== undefined || this._p.lyricParts !== undefined, "lyricParts is a required field");
    };
    LyricBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Lyric";
        return this._p;
    };
    LyricBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LyricBuilder.prototype.lyricParts = function (lyricParts) {
        this._p.lyricParts = lyricParts;
        this._m["lyricParts"] = true;
        return this;
    };
    LyricBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    LyricBuilder.prototype.name = function (name) {
        this._p.name = name;
        this._m["name"] = true;
        return this;
    };
    LyricBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return LyricBuilder;
})();
function patchLyric(base) { return new LyricBuilder(base); }
exports.patchLyric = patchLyric;
function buildLyric() { return new LyricBuilder(); }
exports.buildLyric = buildLyric;
var TextBuilder = (function () {
    function TextBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TextBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    TextBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Text";
        return this._p;
    };
    TextBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    TextBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    TextBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    TextBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    TextBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    TextBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    TextBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return TextBuilder;
})();
function patchText(base) { return new TextBuilder(base); }
exports.patchText = patchText;
function buildText() { return new TextBuilder(); }
exports.buildText = buildText;
var SyllabicBuilder = (function () {
    function SyllabicBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SyllabicBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    SyllabicBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Syllabic";
        return this._p;
    };
    SyllabicBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SyllabicBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    SyllabicBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    SyllabicBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    SyllabicBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    SyllabicBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    SyllabicBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return SyllabicBuilder;
})();
function patchSyllabic(base) { return new SyllabicBuilder(base); }
exports.patchSyllabic = patchSyllabic;
function buildSyllabic() { return new SyllabicBuilder(); }
exports.buildSyllabic = buildSyllabic;
var ElisionBuilder = (function () {
    function ElisionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ElisionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    ElisionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Elision";
        return this._p;
    };
    ElisionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ElisionBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    ElisionBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    ElisionBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    ElisionBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    ElisionBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    ElisionBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return ElisionBuilder;
})();
function patchElision(base) { return new ElisionBuilder(base); }
exports.patchElision = patchElision;
function buildElision() { return new ElisionBuilder(); }
exports.buildElision = buildElision;
var ExtendBuilder = (function () {
    function ExtendBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ExtendBuilder.prototype._i = function () {
    };
    ExtendBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Extend";
        return this._p;
    };
    ExtendBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ExtendBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    ExtendBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    ExtendBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ExtendBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ExtendBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ExtendBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ExtendBuilder;
})();
function patchExtend(base) { return new ExtendBuilder(base); }
exports.patchExtend = patchExtend;
function buildExtend() { return new ExtendBuilder(); }
exports.buildExtend = buildExtend;
var FiguredBassBuilder = (function () {
    function FiguredBassBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FiguredBassBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["figures"]) || this._b["figures"] !== undefined || this._p.figures !== undefined, "figures is a required field");
    };
    FiguredBassBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "FiguredBass";
        return this._p;
    };
    FiguredBassBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FiguredBassBuilder.prototype.figures = function (figures) {
        this._p.figures = figures;
        this._m["figures"] = true;
        return this;
    };
    FiguredBassBuilder.prototype.duration = function (duration) {
        this._p.duration = duration;
        this._m["duration"] = true;
        return this;
    };
    FiguredBassBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    FiguredBassBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    FiguredBassBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    FiguredBassBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return FiguredBassBuilder;
})();
function patchFiguredBass(base) { return new FiguredBassBuilder(base); }
exports.patchFiguredBass = patchFiguredBass;
function buildFiguredBass() { return new FiguredBassBuilder(); }
exports.buildFiguredBass = buildFiguredBass;
var FigureBuilder = (function () {
    function FigureBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FigureBuilder.prototype._i = function () {
    };
    FigureBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Figure";
        return this._p;
    };
    FigureBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FigureBuilder.prototype.prefix = function (build) {
        this._b["prefix"] = build(new PrefixBuilder(this._o && this._o["prefix"]));
        this._m["prefix"] = true;
        return this;
    };
    FigureBuilder.prototype.figureNumber = function (build) {
        this._b["figureNumber"] = build(new FigureNumberBuilder(this._o && this._o["figureNumber"]));
        this._m["figureNumber"] = true;
        return this;
    };
    FigureBuilder.prototype.extend = function (build) {
        this._b["extend"] = build(new ExtendBuilder(this._o && this._o["extend"]));
        this._m["extend"] = true;
        return this;
    };
    FigureBuilder.prototype.suffix = function (build) {
        this._b["suffix"] = build(new SuffixBuilder(this._o && this._o["suffix"]));
        this._m["suffix"] = true;
        return this;
    };
    FigureBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FigureBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FigureBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FigureBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FigureBuilder;
})();
function patchFigure(base) { return new FigureBuilder(base); }
exports.patchFigure = patchFigure;
function buildFigure() { return new FigureBuilder(); }
exports.buildFigure = buildFigure;
var PrefixBuilder = (function () {
    function PrefixBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrefixBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    PrefixBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Prefix";
        return this._p;
    };
    PrefixBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrefixBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    PrefixBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PrefixBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PrefixBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PrefixBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PrefixBuilder;
})();
function patchPrefix(base) { return new PrefixBuilder(base); }
exports.patchPrefix = patchPrefix;
function buildPrefix() { return new PrefixBuilder(); }
exports.buildPrefix = buildPrefix;
var FigureNumberBuilder = (function () {
    function FigureNumberBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FigureNumberBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    FigureNumberBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "FigureNumber";
        return this._p;
    };
    FigureNumberBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FigureNumberBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    FigureNumberBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FigureNumberBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FigureNumberBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FigureNumberBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FigureNumberBuilder;
})();
function patchFigureNumber(base) { return new FigureNumberBuilder(base); }
exports.patchFigureNumber = patchFigureNumber;
function buildFigureNumber() { return new FigureNumberBuilder(); }
exports.buildFigureNumber = buildFigureNumber;
var SuffixBuilder = (function () {
    function SuffixBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SuffixBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    SuffixBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Suffix";
        return this._p;
    };
    SuffixBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SuffixBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    SuffixBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    SuffixBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    SuffixBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    SuffixBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return SuffixBuilder;
})();
function patchSuffix(base) { return new SuffixBuilder(base); }
exports.patchSuffix = patchSuffix;
function buildSuffix() { return new SuffixBuilder(); }
exports.buildSuffix = buildSuffix;
var BackupBuilder = (function () {
    function BackupBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BackupBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["duration"]) || this._b["duration"] !== undefined || this._p.duration !== undefined, "duration is a required field");
    };
    BackupBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Backup";
        return this._p;
    };
    BackupBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BackupBuilder.prototype.duration = function (duration) {
        this._p.duration = duration;
        this._m["duration"] = true;
        return this;
    };
    BackupBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    BackupBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    BackupBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return BackupBuilder;
})();
function patchBackup(base) { return new BackupBuilder(base); }
exports.patchBackup = patchBackup;
function buildBackup() { return new BackupBuilder(); }
exports.buildBackup = buildBackup;
var ForwardBuilder = (function () {
    function ForwardBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ForwardBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["duration"]) || this._b["duration"] !== undefined || this._p.duration !== undefined, "duration is a required field");
    };
    ForwardBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Forward";
        return this._p;
    };
    ForwardBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ForwardBuilder.prototype.duration = function (duration) {
        this._p.duration = duration;
        this._m["duration"] = true;
        return this;
    };
    ForwardBuilder.prototype.staff = function (staff) {
        this._p.staff = staff;
        this._m["staff"] = true;
        return this;
    };
    ForwardBuilder.prototype.voice = function (voice) {
        this._p.voice = voice;
        this._m["voice"] = true;
        return this;
    };
    ForwardBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    ForwardBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    ForwardBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return ForwardBuilder;
})();
function patchForward(base) { return new ForwardBuilder(base); }
exports.patchForward = patchForward;
function buildForward() { return new ForwardBuilder(); }
exports.buildForward = buildForward;
var BarlineBuilder = (function () {
    function BarlineBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BarlineBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["codaAttrib"]) || this._b["codaAttrib"] !== undefined || this._p.codaAttrib !== undefined, "codaAttrib is a required field");
        console.assert((this._o && !this._m["segnoAttrib"]) || this._b["segnoAttrib"] !== undefined || this._p.segnoAttrib !== undefined, "segnoAttrib is a required field");
        console.assert((this._o && !this._m["divisions"]) || this._b["divisions"] !== undefined || this._p.divisions !== undefined, "divisions is a required field");
    };
    BarlineBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Barline";
        return this._p;
    };
    BarlineBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BarlineBuilder.prototype.segno = function (build) {
        this._b["segno"] = build(new SegnoBuilder(this._o && this._o["segno"]));
        this._m["segno"] = true;
        return this;
    };
    BarlineBuilder.prototype.coda = function (build) {
        this._b["coda"] = build(new CodaBuilder(this._o && this._o["coda"]));
        this._m["coda"] = true;
        return this;
    };
    BarlineBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    BarlineBuilder.prototype.codaAttrib = function (codaAttrib) {
        this._p.codaAttrib = codaAttrib;
        this._m["codaAttrib"] = true;
        return this;
    };
    BarlineBuilder.prototype.wavyLine = function (build) {
        this._b["wavyLine"] = build(new WavyLineBuilder(this._o && this._o["wavyLine"]));
        this._m["wavyLine"] = true;
        return this;
    };
    BarlineBuilder.prototype.fermatas = function (fermatas) {
        this._p.fermatas = fermatas;
        this._m["fermatas"] = true;
        return this;
    };
    BarlineBuilder.prototype.segnoAttrib = function (segnoAttrib) {
        this._p.segnoAttrib = segnoAttrib;
        this._m["segnoAttrib"] = true;
        return this;
    };
    BarlineBuilder.prototype.divisions = function (divisions) {
        this._p.divisions = divisions;
        this._m["divisions"] = true;
        return this;
    };
    BarlineBuilder.prototype.barStyle = function (build) {
        this._b["barStyle"] = build(new BarStyleBuilder(this._o && this._o["barStyle"]));
        this._m["barStyle"] = true;
        return this;
    };
    BarlineBuilder.prototype.ending = function (build) {
        this._b["ending"] = build(new EndingBuilder(this._o && this._o["ending"]));
        this._m["ending"] = true;
        return this;
    };
    BarlineBuilder.prototype.repeat = function (build) {
        this._b["repeat"] = build(new RepeatBuilder(this._o && this._o["repeat"]));
        this._m["repeat"] = true;
        return this;
    };
    BarlineBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    BarlineBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    BarlineBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return BarlineBuilder;
})();
function patchBarline(base) { return new BarlineBuilder(base); }
exports.patchBarline = patchBarline;
function buildBarline() { return new BarlineBuilder(); }
exports.buildBarline = buildBarline;
var BarStyleBuilder = (function () {
    function BarStyleBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BarStyleBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    BarStyleBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BarStyle";
        return this._p;
    };
    BarStyleBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BarStyleBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    BarStyleBuilder.prototype.color = function (color) {
        this._p.color = color;
        this._m["color"] = true;
        return this;
    };
    return BarStyleBuilder;
})();
function patchBarStyle(base) { return new BarStyleBuilder(base); }
exports.patchBarStyle = patchBarStyle;
function buildBarStyle() { return new BarStyleBuilder(); }
exports.buildBarStyle = buildBarStyle;
var EndingBuilder = (function () {
    function EndingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EndingBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["endLength"]) || this._b["endLength"] !== undefined || this._p.endLength !== undefined, "endLength is a required field");
        console.assert((this._o && !this._m["textX"]) || this._b["textX"] !== undefined || this._p.textX !== undefined, "textX is a required field");
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["textY"]) || this._b["textY"] !== undefined || this._p.textY !== undefined, "textY is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    EndingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Ending";
        return this._p;
    };
    EndingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EndingBuilder.prototype.endLength = function (endLength) {
        this._p.endLength = endLength;
        this._m["endLength"] = true;
        return this;
    };
    EndingBuilder.prototype.textX = function (textX) {
        this._p.textX = textX;
        this._m["textX"] = true;
        return this;
    };
    EndingBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    EndingBuilder.prototype.textY = function (textY) {
        this._p.textY = textY;
        this._m["textY"] = true;
        return this;
    };
    EndingBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    EndingBuilder.prototype.ending = function (ending) {
        this._p.ending = ending;
        this._m["ending"] = true;
        return this;
    };
    EndingBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return EndingBuilder;
})();
function patchEnding(base) { return new EndingBuilder(base); }
exports.patchEnding = patchEnding;
function buildEnding() { return new EndingBuilder(); }
exports.buildEnding = buildEnding;
var RepeatBuilder = (function () {
    function RepeatBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RepeatBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["times"]) || this._b["times"] !== undefined || this._p.times !== undefined, "times is a required field");
        console.assert((this._o && !this._m["winged"]) || this._b["winged"] !== undefined || this._p.winged !== undefined, "winged is a required field");
        console.assert((this._o && !this._m["direction"]) || this._b["direction"] !== undefined || this._p.direction !== undefined, "direction is a required field");
    };
    RepeatBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Repeat";
        return this._p;
    };
    RepeatBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RepeatBuilder.prototype.times = function (times) {
        this._p.times = times;
        this._m["times"] = true;
        return this;
    };
    RepeatBuilder.prototype.winged = function (winged) {
        this._p.winged = winged;
        this._m["winged"] = true;
        return this;
    };
    RepeatBuilder.prototype.direction = function (direction) {
        this._p.direction = direction;
        this._m["direction"] = true;
        return this;
    };
    return RepeatBuilder;
})();
function patchRepeat(base) { return new RepeatBuilder(base); }
exports.patchRepeat = patchRepeat;
function buildRepeat() { return new RepeatBuilder(); }
exports.buildRepeat = buildRepeat;
var DirectionBuilder = (function () {
    function DirectionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DirectionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["directionTypes"]) || this._b["directionTypes"] !== undefined || this._p.directionTypes !== undefined, "directionTypes is a required field");
    };
    DirectionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Direction";
        return this._p;
    };
    DirectionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DirectionBuilder.prototype.directionTypes = function (directionTypes) {
        this._p.directionTypes = directionTypes;
        this._m["directionTypes"] = true;
        return this;
    };
    DirectionBuilder.prototype.staff = function (staff) {
        this._p.staff = staff;
        this._m["staff"] = true;
        return this;
    };
    DirectionBuilder.prototype.offset = function (build) {
        this._b["offset"] = build(new OffsetBuilder(this._o && this._o["offset"]));
        this._m["offset"] = true;
        return this;
    };
    DirectionBuilder.prototype.sound = function (build) {
        this._b["sound"] = build(new SoundBuilder(this._o && this._o["sound"]));
        this._m["sound"] = true;
        return this;
    };
    DirectionBuilder.prototype.voice = function (voice) {
        this._p.voice = voice;
        this._m["voice"] = true;
        return this;
    };
    DirectionBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    DirectionBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    DirectionBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return DirectionBuilder;
})();
function patchDirection(base) { return new DirectionBuilder(base); }
exports.patchDirection = patchDirection;
function buildDirection() { return new DirectionBuilder(); }
exports.buildDirection = buildDirection;
var DirectionTypeBuilder = (function () {
    function DirectionTypeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DirectionTypeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["percussions"]) || this._b["percussions"] !== undefined || this._p.percussions !== undefined, "percussions is a required field");
        console.assert((this._o && !this._m["rehearsals"]) || this._b["rehearsals"] !== undefined || this._p.rehearsals !== undefined, "rehearsals is a required field");
        console.assert((this._o && !this._m["pedal"]) || this._b["pedal"] !== undefined || this._p.pedal !== undefined, "pedal is a required field");
        console.assert((this._o && !this._m["principalVoice"]) || this._b["principalVoice"] !== undefined || this._p.principalVoice !== undefined, "principalVoice is a required field");
        console.assert((this._o && !this._m["accordionRegistration"]) || this._b["accordionRegistration"] !== undefined || this._p.accordionRegistration !== undefined, "accordionRegistration is a required field");
        console.assert((this._o && !this._m["eyeglasses"]) || this._b["eyeglasses"] !== undefined || this._p.eyeglasses !== undefined, "eyeglasses is a required field");
        console.assert((this._o && !this._m["image"]) || this._b["image"] !== undefined || this._p.image !== undefined, "image is a required field");
        console.assert((this._o && !this._m["harpPedals"]) || this._b["harpPedals"] !== undefined || this._p.harpPedals !== undefined, "harpPedals is a required field");
        console.assert((this._o && !this._m["metronome"]) || this._b["metronome"] !== undefined || this._p.metronome !== undefined, "metronome is a required field");
        console.assert((this._o && !this._m["otherDirection"]) || this._b["otherDirection"] !== undefined || this._p.otherDirection !== undefined, "otherDirection is a required field");
        console.assert((this._o && !this._m["segnos"]) || this._b["segnos"] !== undefined || this._p.segnos !== undefined, "segnos is a required field");
        console.assert((this._o && !this._m["scordatura"]) || this._b["scordatura"] !== undefined || this._p.scordatura !== undefined, "scordatura is a required field");
        console.assert((this._o && !this._m["stringMute"]) || this._b["stringMute"] !== undefined || this._p.stringMute !== undefined, "stringMute is a required field");
        console.assert((this._o && !this._m["damp"]) || this._b["damp"] !== undefined || this._p.damp !== undefined, "damp is a required field");
        console.assert((this._o && !this._m["bracket"]) || this._b["bracket"] !== undefined || this._p.bracket !== undefined, "bracket is a required field");
        console.assert((this._o && !this._m["octaveShift"]) || this._b["octaveShift"] !== undefined || this._p.octaveShift !== undefined, "octaveShift is a required field");
        console.assert((this._o && !this._m["words"]) || this._b["words"] !== undefined || this._p.words !== undefined, "words is a required field");
        console.assert((this._o && !this._m["dampAll"]) || this._b["dampAll"] !== undefined || this._p.dampAll !== undefined, "dampAll is a required field");
        console.assert((this._o && !this._m["codas"]) || this._b["codas"] !== undefined || this._p.codas !== undefined, "codas is a required field");
    };
    DirectionTypeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DirectionType";
        return this._p;
    };
    DirectionTypeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DirectionTypeBuilder.prototype.percussions = function (percussions) {
        this._p.percussions = percussions;
        this._m["percussions"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.rehearsals = function (rehearsals) {
        this._p.rehearsals = rehearsals;
        this._m["rehearsals"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.pedal = function (build) {
        this._b["pedal"] = build(new PedalBuilder(this._o && this._o["pedal"]));
        this._m["pedal"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.principalVoice = function (build) {
        this._b["principalVoice"] = build(new PrincipalVoiceBuilder(this._o && this._o["principalVoice"]));
        this._m["principalVoice"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.accordionRegistration = function (build) {
        this._b["accordionRegistration"] = build(new AccordionRegistrationBuilder(this._o && this._o["accordionRegistration"]));
        this._m["accordionRegistration"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.eyeglasses = function (build) {
        this._b["eyeglasses"] = build(new EyeglassesBuilder(this._o && this._o["eyeglasses"]));
        this._m["eyeglasses"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.image = function (build) {
        this._b["image"] = build(new ImageBuilder(this._o && this._o["image"]));
        this._m["image"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.harpPedals = function (build) {
        this._b["harpPedals"] = build(new HarpPedalsBuilder(this._o && this._o["harpPedals"]));
        this._m["harpPedals"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.metronome = function (build) {
        this._b["metronome"] = build(new MetronomeBuilder(this._o && this._o["metronome"]));
        this._m["metronome"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.otherDirection = function (build) {
        this._b["otherDirection"] = build(new OtherDirectionBuilder(this._o && this._o["otherDirection"]));
        this._m["otherDirection"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.segnos = function (segnos) {
        this._p.segnos = segnos;
        this._m["segnos"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.scordatura = function (build) {
        this._b["scordatura"] = build(new ScordaturaBuilder(this._o && this._o["scordatura"]));
        this._m["scordatura"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.stringMute = function (build) {
        this._b["stringMute"] = build(new StringMuteBuilder(this._o && this._o["stringMute"]));
        this._m["stringMute"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.wedge = function (build) {
        this._b["wedge"] = build(new WedgeBuilder(this._o && this._o["wedge"]));
        this._m["wedge"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.dashes = function (build) {
        this._b["dashes"] = build(new DashesBuilder(this._o && this._o["dashes"]));
        this._m["dashes"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.damp = function (build) {
        this._b["damp"] = build(new DampBuilder(this._o && this._o["damp"]));
        this._m["damp"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.bracket = function (build) {
        this._b["bracket"] = build(new BracketBuilder(this._o && this._o["bracket"]));
        this._m["bracket"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.dynamics = function (build) {
        this._b["dynamics"] = build(new DynamicsBuilder(this._o && this._o["dynamics"]));
        this._m["dynamics"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.octaveShift = function (build) {
        this._b["octaveShift"] = build(new OctaveShiftBuilder(this._o && this._o["octaveShift"]));
        this._m["octaveShift"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.words = function (words) {
        this._p.words = words;
        this._m["words"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.dampAll = function (build) {
        this._b["dampAll"] = build(new DampAllBuilder(this._o && this._o["dampAll"]));
        this._m["dampAll"] = true;
        return this;
    };
    DirectionTypeBuilder.prototype.codas = function (codas) {
        this._p.codas = codas;
        this._m["codas"] = true;
        return this;
    };
    return DirectionTypeBuilder;
})();
function patchDirectionType(base) { return new DirectionTypeBuilder(base); }
exports.patchDirectionType = patchDirectionType;
function buildDirectionType() { return new DirectionTypeBuilder(); }
exports.buildDirectionType = buildDirectionType;
var RehearsalBuilder = (function () {
    function RehearsalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RehearsalBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    RehearsalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Rehearsal";
        return this._p;
    };
    RehearsalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RehearsalBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    RehearsalBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return RehearsalBuilder;
})();
function patchRehearsal(base) { return new RehearsalBuilder(base); }
exports.patchRehearsal = patchRehearsal;
function buildRehearsal() { return new RehearsalBuilder(); }
exports.buildRehearsal = buildRehearsal;
var WordsBuilder = (function () {
    function WordsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WordsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    WordsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Words";
        return this._p;
    };
    WordsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WordsBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    WordsBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return WordsBuilder;
})();
function patchWords(base) { return new WordsBuilder(base); }
exports.patchWords = patchWords;
function buildWords() { return new WordsBuilder(); }
exports.buildWords = buildWords;
var WedgeBuilder = (function () {
    function WedgeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WedgeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["niente"]) || this._b["niente"] !== undefined || this._p.niente !== undefined, "niente is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["spread"]) || this._b["spread"] !== undefined || this._p.spread !== undefined, "spread is a required field");
    };
    WedgeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Wedge";
        return this._p;
    };
    WedgeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WedgeBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    WedgeBuilder.prototype.niente = function (niente) {
        this._p.niente = niente;
        this._m["niente"] = true;
        return this;
    };
    WedgeBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    WedgeBuilder.prototype.spread = function (spread) {
        this._p.spread = spread;
        this._m["spread"] = true;
        return this;
    };
    WedgeBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return WedgeBuilder;
})();
function patchWedge(base) { return new WedgeBuilder(base); }
exports.patchWedge = patchWedge;
function buildWedge() { return new WedgeBuilder(); }
exports.buildWedge = buildWedge;
var DashesBuilder = (function () {
    function DashesBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DashesBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    DashesBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Dashes";
        return this._p;
    };
    DashesBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DashesBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    DashesBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    DashesBuilder.prototype.dashLength = function (dashLength) {
        this._p.dashLength = dashLength;
        this._m["dashLength"] = true;
        return this;
    };
    DashesBuilder.prototype.spaceLength = function (spaceLength) {
        this._p.spaceLength = spaceLength;
        this._m["spaceLength"] = true;
        return this;
    };
    return DashesBuilder;
})();
function patchDashes(base) { return new DashesBuilder(base); }
exports.patchDashes = patchDashes;
function buildDashes() { return new DashesBuilder(); }
exports.buildDashes = buildDashes;
var BracketBuilder = (function () {
    function BracketBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BracketBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["endLength"]) || this._b["endLength"] !== undefined || this._p.endLength !== undefined, "endLength is a required field");
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["lineEnd"]) || this._b["lineEnd"] !== undefined || this._p.lineEnd !== undefined, "lineEnd is a required field");
    };
    BracketBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Bracket";
        return this._p;
    };
    BracketBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BracketBuilder.prototype.endLength = function (endLength) {
        this._p.endLength = endLength;
        this._m["endLength"] = true;
        return this;
    };
    BracketBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    BracketBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    BracketBuilder.prototype.lineEnd = function (lineEnd) {
        this._p.lineEnd = lineEnd;
        this._m["lineEnd"] = true;
        return this;
    };
    BracketBuilder.prototype.lineType = function (lineType) {
        this._p.lineType = lineType;
        this._m["lineType"] = true;
        return this;
    };
    return BracketBuilder;
})();
function patchBracket(base) { return new BracketBuilder(base); }
exports.patchBracket = patchBracket;
function buildBracket() { return new BracketBuilder(); }
exports.buildBracket = buildBracket;
var PedalBuilder = (function () {
    function PedalBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PedalBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["line"]) || this._b["line"] !== undefined || this._p.line !== undefined, "line is a required field");
        console.assert((this._o && !this._m["sign"]) || this._b["sign"] !== undefined || this._p.sign !== undefined, "sign is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    PedalBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Pedal";
        return this._p;
    };
    PedalBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PedalBuilder.prototype.line = function (line) {
        this._p.line = line;
        this._m["line"] = true;
        return this;
    };
    PedalBuilder.prototype.sign = function (sign) {
        this._p.sign = sign;
        this._m["sign"] = true;
        return this;
    };
    PedalBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PedalBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PedalBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PedalBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PedalBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PedalBuilder;
})();
function patchPedal(base) { return new PedalBuilder(base); }
exports.patchPedal = patchPedal;
function buildPedal() { return new PedalBuilder(); }
exports.buildPedal = buildPedal;
var MetronomeBuilder = (function () {
    function MetronomeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MetronomeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["metronomeNotes"]) || this._b["metronomeNotes"] !== undefined || this._p.metronomeNotes !== undefined, "metronomeNotes is a required field");
        console.assert((this._o && !this._m["perMinute"]) || this._b["perMinute"] !== undefined || this._p.perMinute !== undefined, "perMinute is a required field");
        console.assert((this._o && !this._m["parentheses"]) || this._b["parentheses"] !== undefined || this._p.parentheses !== undefined, "parentheses is a required field");
        console.assert((this._o && !this._m["beatUnit"]) || this._b["beatUnit"] !== undefined || this._p.beatUnit !== undefined, "beatUnit is a required field");
        console.assert((this._o && !this._m["beatUnitDots"]) || this._b["beatUnitDots"] !== undefined || this._p.beatUnitDots !== undefined, "beatUnitDots is a required field");
        console.assert((this._o && !this._m["beatUnitChange"]) || this._b["beatUnitChange"] !== undefined || this._p.beatUnitChange !== undefined, "beatUnitChange is a required field");
        console.assert((this._o && !this._m["beatUnitDotsChange"]) || this._b["beatUnitDotsChange"] !== undefined || this._p.beatUnitDotsChange !== undefined, "beatUnitDotsChange is a required field");
        console.assert((this._o && !this._m["metronomeRelation"]) || this._b["metronomeRelation"] !== undefined || this._p.metronomeRelation !== undefined, "metronomeRelation is a required field");
    };
    MetronomeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Metronome";
        return this._p;
    };
    MetronomeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MetronomeBuilder.prototype.metronomeNotes = function (metronomeNotes) {
        this._p.metronomeNotes = metronomeNotes;
        this._m["metronomeNotes"] = true;
        return this;
    };
    MetronomeBuilder.prototype.perMinute = function (build) {
        this._b["perMinute"] = build(new PerMinuteBuilder(this._o && this._o["perMinute"]));
        this._m["perMinute"] = true;
        return this;
    };
    MetronomeBuilder.prototype.parentheses = function (parentheses) {
        this._p.parentheses = parentheses;
        this._m["parentheses"] = true;
        return this;
    };
    MetronomeBuilder.prototype.beatUnit = function (beatUnit) {
        this._p.beatUnit = beatUnit;
        this._m["beatUnit"] = true;
        return this;
    };
    MetronomeBuilder.prototype.beatUnitDots = function (beatUnitDots) {
        this._p.beatUnitDots = beatUnitDots;
        this._m["beatUnitDots"] = true;
        return this;
    };
    MetronomeBuilder.prototype.beatUnitChange = function (beatUnitChange) {
        this._p.beatUnitChange = beatUnitChange;
        this._m["beatUnitChange"] = true;
        return this;
    };
    MetronomeBuilder.prototype.beatUnitDotsChange = function (beatUnitDotsChange) {
        this._p.beatUnitDotsChange = beatUnitDotsChange;
        this._m["beatUnitDotsChange"] = true;
        return this;
    };
    MetronomeBuilder.prototype.metronomeRelation = function (metronomeRelation) {
        this._p.metronomeRelation = metronomeRelation;
        this._m["metronomeRelation"] = true;
        return this;
    };
    MetronomeBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    MetronomeBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    MetronomeBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    MetronomeBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return MetronomeBuilder;
})();
function patchMetronome(base) { return new MetronomeBuilder(base); }
exports.patchMetronome = patchMetronome;
function buildMetronome() { return new MetronomeBuilder(); }
exports.buildMetronome = buildMetronome;
var BeatUnitDotBuilder = (function () {
    function BeatUnitDotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BeatUnitDotBuilder.prototype._i = function () {
    };
    BeatUnitDotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BeatUnitDot";
        return this._p;
    };
    BeatUnitDotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return BeatUnitDotBuilder;
})();
function patchBeatUnitDot(base) { return new BeatUnitDotBuilder(base); }
exports.patchBeatUnitDot = patchBeatUnitDot;
function buildBeatUnitDot() { return new BeatUnitDotBuilder(); }
exports.buildBeatUnitDot = buildBeatUnitDot;
var PerMinuteBuilder = (function () {
    function PerMinuteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PerMinuteBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    PerMinuteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PerMinute";
        return this._p;
    };
    PerMinuteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PerMinuteBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    PerMinuteBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    PerMinuteBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    PerMinuteBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    PerMinuteBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return PerMinuteBuilder;
})();
function patchPerMinute(base) { return new PerMinuteBuilder(base); }
exports.patchPerMinute = patchPerMinute;
function buildPerMinute() { return new PerMinuteBuilder(); }
exports.buildPerMinute = buildPerMinute;
var MetronomeNoteBuilder = (function () {
    function MetronomeNoteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MetronomeNoteBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["metronomeDots"]) || this._b["metronomeDots"] !== undefined || this._p.metronomeDots !== undefined, "metronomeDots is a required field");
        console.assert((this._o && !this._m["metronomeBeams"]) || this._b["metronomeBeams"] !== undefined || this._p.metronomeBeams !== undefined, "metronomeBeams is a required field");
        console.assert((this._o && !this._m["metronomeType"]) || this._b["metronomeType"] !== undefined || this._p.metronomeType !== undefined, "metronomeType is a required field");
        console.assert((this._o && !this._m["metronomeTuplet"]) || this._b["metronomeTuplet"] !== undefined || this._p.metronomeTuplet !== undefined, "metronomeTuplet is a required field");
    };
    MetronomeNoteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MetronomeNote";
        return this._p;
    };
    MetronomeNoteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MetronomeNoteBuilder.prototype.metronomeDots = function (metronomeDots) {
        this._p.metronomeDots = metronomeDots;
        this._m["metronomeDots"] = true;
        return this;
    };
    MetronomeNoteBuilder.prototype.metronomeBeams = function (metronomeBeams) {
        this._p.metronomeBeams = metronomeBeams;
        this._m["metronomeBeams"] = true;
        return this;
    };
    MetronomeNoteBuilder.prototype.metronomeType = function (metronomeType) {
        this._p.metronomeType = metronomeType;
        this._m["metronomeType"] = true;
        return this;
    };
    MetronomeNoteBuilder.prototype.metronomeTuplet = function (build) {
        this._b["metronomeTuplet"] = build(new MetronomeTupletBuilder(this._o && this._o["metronomeTuplet"]));
        this._m["metronomeTuplet"] = true;
        return this;
    };
    return MetronomeNoteBuilder;
})();
function patchMetronomeNote(base) { return new MetronomeNoteBuilder(base); }
exports.patchMetronomeNote = patchMetronomeNote;
function buildMetronomeNote() { return new MetronomeNoteBuilder(); }
exports.buildMetronomeNote = buildMetronomeNote;
var MetronomeDotBuilder = (function () {
    function MetronomeDotBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MetronomeDotBuilder.prototype._i = function () {
    };
    MetronomeDotBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MetronomeDot";
        return this._p;
    };
    MetronomeDotBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return MetronomeDotBuilder;
})();
function patchMetronomeDot(base) { return new MetronomeDotBuilder(base); }
exports.patchMetronomeDot = patchMetronomeDot;
function buildMetronomeDot() { return new MetronomeDotBuilder(); }
exports.buildMetronomeDot = buildMetronomeDot;
var MetronomeBeamBuilder = (function () {
    function MetronomeBeamBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MetronomeBeamBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    MetronomeBeamBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MetronomeBeam";
        return this._p;
    };
    MetronomeBeamBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MetronomeBeamBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    MetronomeBeamBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    return MetronomeBeamBuilder;
})();
function patchMetronomeBeam(base) { return new MetronomeBeamBuilder(base); }
exports.patchMetronomeBeam = patchMetronomeBeam;
function buildMetronomeBeam() { return new MetronomeBeamBuilder(); }
exports.buildMetronomeBeam = buildMetronomeBeam;
var MetronomeTupletBuilder = (function () {
    function MetronomeTupletBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MetronomeTupletBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["actualNotes"]) || this._b["actualNotes"] !== undefined || this._p.actualNotes !== undefined, "actualNotes is a required field");
        console.assert((this._o && !this._m["bracket"]) || this._b["bracket"] !== undefined || this._p.bracket !== undefined, "bracket is a required field");
        console.assert((this._o && !this._m["showNumber"]) || this._b["showNumber"] !== undefined || this._p.showNumber !== undefined, "showNumber is a required field");
        console.assert((this._o && !this._m["normalType"]) || this._b["normalType"] !== undefined || this._p.normalType !== undefined, "normalType is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["normalNotes"]) || this._b["normalNotes"] !== undefined || this._p.normalNotes !== undefined, "normalNotes is a required field");
        console.assert((this._o && !this._m["normalDots"]) || this._b["normalDots"] !== undefined || this._p.normalDots !== undefined, "normalDots is a required field");
    };
    MetronomeTupletBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MetronomeTuplet";
        return this._p;
    };
    MetronomeTupletBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MetronomeTupletBuilder.prototype.actualNotes = function (actualNotes) {
        this._p.actualNotes = actualNotes;
        this._m["actualNotes"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.bracket = function (bracket) {
        this._p.bracket = bracket;
        this._m["bracket"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.showNumber = function (showNumber) {
        this._p.showNumber = showNumber;
        this._m["showNumber"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.normalType = function (normalType) {
        this._p.normalType = normalType;
        this._m["normalType"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.normalNotes = function (normalNotes) {
        this._p.normalNotes = normalNotes;
        this._m["normalNotes"] = true;
        return this;
    };
    MetronomeTupletBuilder.prototype.normalDots = function (normalDots) {
        this._p.normalDots = normalDots;
        this._m["normalDots"] = true;
        return this;
    };
    return MetronomeTupletBuilder;
})();
function patchMetronomeTuplet(base) { return new MetronomeTupletBuilder(base); }
exports.patchMetronomeTuplet = patchMetronomeTuplet;
function buildMetronomeTuplet() { return new MetronomeTupletBuilder(); }
exports.buildMetronomeTuplet = buildMetronomeTuplet;
var OctaveShiftBuilder = (function () {
    function OctaveShiftBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OctaveShiftBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["size"]) || this._b["size"] !== undefined || this._p.size !== undefined, "size is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    OctaveShiftBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "OctaveShift";
        return this._p;
    };
    OctaveShiftBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OctaveShiftBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    OctaveShiftBuilder.prototype.size = function (size) {
        this._p.size = size;
        this._m["size"] = true;
        return this;
    };
    OctaveShiftBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    OctaveShiftBuilder.prototype.dashLength = function (dashLength) {
        this._p.dashLength = dashLength;
        this._m["dashLength"] = true;
        return this;
    };
    OctaveShiftBuilder.prototype.spaceLength = function (spaceLength) {
        this._p.spaceLength = spaceLength;
        this._m["spaceLength"] = true;
        return this;
    };
    return OctaveShiftBuilder;
})();
function patchOctaveShift(base) { return new OctaveShiftBuilder(base); }
exports.patchOctaveShift = patchOctaveShift;
function buildOctaveShift() { return new OctaveShiftBuilder(); }
exports.buildOctaveShift = buildOctaveShift;
var HarpPedalsBuilder = (function () {
    function HarpPedalsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HarpPedalsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["pedalTunings"]) || this._b["pedalTunings"] !== undefined || this._p.pedalTunings !== undefined, "pedalTunings is a required field");
    };
    HarpPedalsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "HarpPedals";
        return this._p;
    };
    HarpPedalsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HarpPedalsBuilder.prototype.pedalTunings = function (pedalTunings) {
        this._p.pedalTunings = pedalTunings;
        this._m["pedalTunings"] = true;
        return this;
    };
    HarpPedalsBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    HarpPedalsBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    HarpPedalsBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    HarpPedalsBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return HarpPedalsBuilder;
})();
function patchHarpPedals(base) { return new HarpPedalsBuilder(base); }
exports.patchHarpPedals = patchHarpPedals;
function buildHarpPedals() { return new HarpPedalsBuilder(); }
exports.buildHarpPedals = buildHarpPedals;
var PedalTuningBuilder = (function () {
    function PedalTuningBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PedalTuningBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["pedalStep"]) || this._b["pedalStep"] !== undefined || this._p.pedalStep !== undefined, "pedalStep is a required field");
        console.assert((this._o && !this._m["pedalAlter"]) || this._b["pedalAlter"] !== undefined || this._p.pedalAlter !== undefined, "pedalAlter is a required field");
    };
    PedalTuningBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PedalTuning";
        return this._p;
    };
    PedalTuningBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PedalTuningBuilder.prototype.pedalStep = function (pedalStep) {
        this._p.pedalStep = pedalStep;
        this._m["pedalStep"] = true;
        return this;
    };
    PedalTuningBuilder.prototype.pedalAlter = function (pedalAlter) {
        this._p.pedalAlter = pedalAlter;
        this._m["pedalAlter"] = true;
        return this;
    };
    return PedalTuningBuilder;
})();
function patchPedalTuning(base) { return new PedalTuningBuilder(base); }
exports.patchPedalTuning = patchPedalTuning;
function buildPedalTuning() { return new PedalTuningBuilder(); }
exports.buildPedalTuning = buildPedalTuning;
var DampBuilder = (function () {
    function DampBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DampBuilder.prototype._i = function () {
    };
    DampBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Damp";
        return this._p;
    };
    DampBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DampBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DampBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DampBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DampBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DampBuilder;
})();
function patchDamp(base) { return new DampBuilder(base); }
exports.patchDamp = patchDamp;
function buildDamp() { return new DampBuilder(); }
exports.buildDamp = buildDamp;
var DampAllBuilder = (function () {
    function DampAllBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DampAllBuilder.prototype._i = function () {
    };
    DampAllBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DampAll";
        return this._p;
    };
    DampAllBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DampAllBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DampAllBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DampAllBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DampAllBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DampAllBuilder;
})();
function patchDampAll(base) { return new DampAllBuilder(base); }
exports.patchDampAll = patchDampAll;
function buildDampAll() { return new DampAllBuilder(); }
exports.buildDampAll = buildDampAll;
var EyeglassesBuilder = (function () {
    function EyeglassesBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    EyeglassesBuilder.prototype._i = function () {
    };
    EyeglassesBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Eyeglasses";
        return this._p;
    };
    EyeglassesBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    EyeglassesBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    EyeglassesBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    EyeglassesBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    EyeglassesBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return EyeglassesBuilder;
})();
function patchEyeglasses(base) { return new EyeglassesBuilder(base); }
exports.patchEyeglasses = patchEyeglasses;
function buildEyeglasses() { return new EyeglassesBuilder(); }
exports.buildEyeglasses = buildEyeglasses;
var StringMuteBuilder = (function () {
    function StringMuteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StringMuteBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    StringMuteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "StringMute";
        return this._p;
    };
    StringMuteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StringMuteBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    StringMuteBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    StringMuteBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    StringMuteBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    StringMuteBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return StringMuteBuilder;
})();
function patchStringMute(base) { return new StringMuteBuilder(base); }
exports.patchStringMute = patchStringMute;
function buildStringMute() { return new StringMuteBuilder(); }
exports.buildStringMute = buildStringMute;
var ScordaturaBuilder = (function () {
    function ScordaturaBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScordaturaBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["accords"]) || this._b["accords"] !== undefined || this._p.accords !== undefined, "accords is a required field");
    };
    ScordaturaBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Scordatura";
        return this._p;
    };
    ScordaturaBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScordaturaBuilder.prototype.accords = function (accords) {
        this._p.accords = accords;
        this._m["accords"] = true;
        return this;
    };
    return ScordaturaBuilder;
})();
function patchScordatura(base) { return new ScordaturaBuilder(base); }
exports.patchScordatura = patchScordatura;
function buildScordatura() { return new ScordaturaBuilder(); }
exports.buildScordatura = buildScordatura;
var AccordBuilder = (function () {
    function AccordBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccordBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["tuningAlter"]) || this._b["tuningAlter"] !== undefined || this._p.tuningAlter !== undefined, "tuningAlter is a required field");
        console.assert((this._o && !this._m["string"]) || this._b["string"] !== undefined || this._p.string !== undefined, "string is a required field");
        console.assert((this._o && !this._m["tuningStep"]) || this._b["tuningStep"] !== undefined || this._p.tuningStep !== undefined, "tuningStep is a required field");
        console.assert((this._o && !this._m["tuningOctave"]) || this._b["tuningOctave"] !== undefined || this._p.tuningOctave !== undefined, "tuningOctave is a required field");
    };
    AccordBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Accord";
        return this._p;
    };
    AccordBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccordBuilder.prototype.tuningAlter = function (tuningAlter) {
        this._p.tuningAlter = tuningAlter;
        this._m["tuningAlter"] = true;
        return this;
    };
    AccordBuilder.prototype.string = function (string) {
        this._p.string = string;
        this._m["string"] = true;
        return this;
    };
    AccordBuilder.prototype.tuningStep = function (tuningStep) {
        this._p.tuningStep = tuningStep;
        this._m["tuningStep"] = true;
        return this;
    };
    AccordBuilder.prototype.tuningOctave = function (tuningOctave) {
        this._p.tuningOctave = tuningOctave;
        this._m["tuningOctave"] = true;
        return this;
    };
    return AccordBuilder;
})();
function patchAccord(base) { return new AccordBuilder(base); }
exports.patchAccord = patchAccord;
function buildAccord() { return new AccordBuilder(); }
exports.buildAccord = buildAccord;
var ImageBuilder = (function () {
    function ImageBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ImageBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["source"]) || this._b["source"] !== undefined || this._p.source !== undefined, "source is a required field");
    };
    ImageBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Image";
        return this._p;
    };
    ImageBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ImageBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    ImageBuilder.prototype.source = function (source) {
        this._p.source = source;
        this._m["source"] = true;
        return this;
    };
    ImageBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    ImageBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    ImageBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    ImageBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return ImageBuilder;
})();
function patchImage(base) { return new ImageBuilder(base); }
exports.patchImage = patchImage;
function buildImage() { return new ImageBuilder(); }
exports.buildImage = buildImage;
var PrincipalVoiceBuilder = (function () {
    function PrincipalVoiceBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrincipalVoiceBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["symbol"]) || this._b["symbol"] !== undefined || this._p.symbol !== undefined, "symbol is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    PrincipalVoiceBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PrincipalVoice";
        return this._p;
    };
    PrincipalVoiceBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrincipalVoiceBuilder.prototype.symbol = function (symbol) {
        this._p.symbol = symbol;
        this._m["symbol"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PrincipalVoiceBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PrincipalVoiceBuilder;
})();
function patchPrincipalVoice(base) { return new PrincipalVoiceBuilder(base); }
exports.patchPrincipalVoice = patchPrincipalVoice;
function buildPrincipalVoice() { return new PrincipalVoiceBuilder(); }
exports.buildPrincipalVoice = buildPrincipalVoice;
var AccordionRegistrationBuilder = (function () {
    function AccordionRegistrationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    AccordionRegistrationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["accordionMiddle"]) || this._b["accordionMiddle"] !== undefined || this._p.accordionMiddle !== undefined, "accordionMiddle is a required field");
        console.assert((this._o && !this._m["accordionHigh"]) || this._b["accordionHigh"] !== undefined || this._p.accordionHigh !== undefined, "accordionHigh is a required field");
        console.assert((this._o && !this._m["accordionLow"]) || this._b["accordionLow"] !== undefined || this._p.accordionLow !== undefined, "accordionLow is a required field");
    };
    AccordionRegistrationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "AccordionRegistration";
        return this._p;
    };
    AccordionRegistrationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    AccordionRegistrationBuilder.prototype.accordionMiddle = function (accordionMiddle) {
        this._p.accordionMiddle = accordionMiddle;
        this._m["accordionMiddle"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.accordionHigh = function (accordionHigh) {
        this._p.accordionHigh = accordionHigh;
        this._m["accordionHigh"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.accordionLow = function (accordionLow) {
        this._p.accordionLow = accordionLow;
        this._m["accordionLow"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    AccordionRegistrationBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return AccordionRegistrationBuilder;
})();
function patchAccordionRegistration(base) { return new AccordionRegistrationBuilder(base); }
exports.patchAccordionRegistration = patchAccordionRegistration;
function buildAccordionRegistration() { return new AccordionRegistrationBuilder(); }
exports.buildAccordionRegistration = buildAccordionRegistration;
var PercussionBuilder = (function () {
    function PercussionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PercussionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["stickLocation"]) || this._b["stickLocation"] !== undefined || this._p.stickLocation !== undefined, "stickLocation is a required field");
        console.assert((this._o && !this._m["otherPercussion"]) || this._b["otherPercussion"] !== undefined || this._p.otherPercussion !== undefined, "otherPercussion is a required field");
        console.assert((this._o && !this._m["wood"]) || this._b["wood"] !== undefined || this._p.wood !== undefined, "wood is a required field");
        console.assert((this._o && !this._m["effect"]) || this._b["effect"] !== undefined || this._p.effect !== undefined, "effect is a required field");
        console.assert((this._o && !this._m["glass"]) || this._b["glass"] !== undefined || this._p.glass !== undefined, "glass is a required field");
        console.assert((this._o && !this._m["timpani"]) || this._b["timpani"] !== undefined || this._p.timpani !== undefined, "timpani is a required field");
        console.assert((this._o && !this._m["stick"]) || this._b["stick"] !== undefined || this._p.stick !== undefined, "stick is a required field");
        console.assert((this._o && !this._m["metal"]) || this._b["metal"] !== undefined || this._p.metal !== undefined, "metal is a required field");
        console.assert((this._o && !this._m["pitched"]) || this._b["pitched"] !== undefined || this._p.pitched !== undefined, "pitched is a required field");
        console.assert((this._o && !this._m["membrane"]) || this._b["membrane"] !== undefined || this._p.membrane !== undefined, "membrane is a required field");
        console.assert((this._o && !this._m["beater"]) || this._b["beater"] !== undefined || this._p.beater !== undefined, "beater is a required field");
    };
    PercussionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Percussion";
        return this._p;
    };
    PercussionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PercussionBuilder.prototype.stickLocation = function (stickLocation) {
        this._p.stickLocation = stickLocation;
        this._m["stickLocation"] = true;
        return this;
    };
    PercussionBuilder.prototype.otherPercussion = function (otherPercussion) {
        this._p.otherPercussion = otherPercussion;
        this._m["otherPercussion"] = true;
        return this;
    };
    PercussionBuilder.prototype.wood = function (wood) {
        this._p.wood = wood;
        this._m["wood"] = true;
        return this;
    };
    PercussionBuilder.prototype.effect = function (effect) {
        this._p.effect = effect;
        this._m["effect"] = true;
        return this;
    };
    PercussionBuilder.prototype.glass = function (glass) {
        this._p.glass = glass;
        this._m["glass"] = true;
        return this;
    };
    PercussionBuilder.prototype.timpani = function (build) {
        this._b["timpani"] = build(new TimpaniBuilder(this._o && this._o["timpani"]));
        this._m["timpani"] = true;
        return this;
    };
    PercussionBuilder.prototype.stick = function (build) {
        this._b["stick"] = build(new StickBuilder(this._o && this._o["stick"]));
        this._m["stick"] = true;
        return this;
    };
    PercussionBuilder.prototype.metal = function (metal) {
        this._p.metal = metal;
        this._m["metal"] = true;
        return this;
    };
    PercussionBuilder.prototype.pitched = function (pitched) {
        this._p.pitched = pitched;
        this._m["pitched"] = true;
        return this;
    };
    PercussionBuilder.prototype.membrane = function (membrane) {
        this._p.membrane = membrane;
        this._m["membrane"] = true;
        return this;
    };
    PercussionBuilder.prototype.beater = function (build) {
        this._b["beater"] = build(new BeaterBuilder(this._o && this._o["beater"]));
        this._m["beater"] = true;
        return this;
    };
    PercussionBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PercussionBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PercussionBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PercussionBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PercussionBuilder;
})();
function patchPercussion(base) { return new PercussionBuilder(base); }
exports.patchPercussion = patchPercussion;
function buildPercussion() { return new PercussionBuilder(); }
exports.buildPercussion = buildPercussion;
var TimpaniBuilder = (function () {
    function TimpaniBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    TimpaniBuilder.prototype._i = function () {
    };
    TimpaniBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Timpani";
        return this._p;
    };
    TimpaniBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return TimpaniBuilder;
})();
function patchTimpani(base) { return new TimpaniBuilder(base); }
exports.patchTimpani = patchTimpani;
function buildTimpani() { return new TimpaniBuilder(); }
exports.buildTimpani = buildTimpani;
var BeaterBuilder = (function () {
    function BeaterBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BeaterBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["tip"]) || this._b["tip"] !== undefined || this._p.tip !== undefined, "tip is a required field");
    };
    BeaterBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Beater";
        return this._p;
    };
    BeaterBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BeaterBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    BeaterBuilder.prototype.tip = function (tip) {
        this._p.tip = tip;
        this._m["tip"] = true;
        return this;
    };
    return BeaterBuilder;
})();
function patchBeater(base) { return new BeaterBuilder(base); }
exports.patchBeater = patchBeater;
function buildBeater() { return new BeaterBuilder(); }
exports.buildBeater = buildBeater;
var StickBuilder = (function () {
    function StickBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    StickBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["stickMaterial"]) || this._b["stickMaterial"] !== undefined || this._p.stickMaterial !== undefined, "stickMaterial is a required field");
        console.assert((this._o && !this._m["stickType"]) || this._b["stickType"] !== undefined || this._p.stickType !== undefined, "stickType is a required field");
        console.assert((this._o && !this._m["tip"]) || this._b["tip"] !== undefined || this._p.tip !== undefined, "tip is a required field");
    };
    StickBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Stick";
        return this._p;
    };
    StickBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    StickBuilder.prototype.stickMaterial = function (stickMaterial) {
        this._p.stickMaterial = stickMaterial;
        this._m["stickMaterial"] = true;
        return this;
    };
    StickBuilder.prototype.stickType = function (stickType) {
        this._p.stickType = stickType;
        this._m["stickType"] = true;
        return this;
    };
    StickBuilder.prototype.tip = function (tip) {
        this._p.tip = tip;
        this._m["tip"] = true;
        return this;
    };
    return StickBuilder;
})();
function patchStick(base) { return new StickBuilder(base); }
exports.patchStick = patchStick;
function buildStick() { return new StickBuilder(); }
exports.buildStick = buildStick;
var OffsetBuilder = (function () {
    function OffsetBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OffsetBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["sound"]) || this._b["sound"] !== undefined || this._p.sound !== undefined, "sound is a required field");
    };
    OffsetBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Offset";
        return this._p;
    };
    OffsetBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    OffsetBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    OffsetBuilder.prototype.sound = function (sound) {
        this._p.sound = sound;
        this._m["sound"] = true;
        return this;
    };
    return OffsetBuilder;
})();
function patchOffset(base) { return new OffsetBuilder(base); }
exports.patchOffset = patchOffset;
function buildOffset() { return new OffsetBuilder(); }
exports.buildOffset = buildOffset;
var HarmonyChordBuilder = (function () {
    function HarmonyChordBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HarmonyChordBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["root"]) || this._b["root"] !== undefined || this._p.root !== undefined, "root is a required field");
        console.assert((this._o && !this._m["function"]) || this._b["function"] !== undefined || this._p.function !== undefined, "function is a required field");
        console.assert((this._o && !this._m["kind"]) || this._b["kind"] !== undefined || this._p.kind !== undefined, "kind is a required field");
        console.assert((this._o && !this._m["degrees"]) || this._b["degrees"] !== undefined || this._p.degrees !== undefined, "degrees is a required field");
        console.assert((this._o && !this._m["inversion"]) || this._b["inversion"] !== undefined || this._p.inversion !== undefined, "inversion is a required field");
        console.assert((this._o && !this._m["bass"]) || this._b["bass"] !== undefined || this._p.bass !== undefined, "bass is a required field");
    };
    HarmonyChordBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "HarmonyChord";
        return this._p;
    };
    HarmonyChordBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HarmonyChordBuilder.prototype.root = function (build) {
        this._b["root"] = build(new RootBuilder(this._o && this._o["root"]));
        this._m["root"] = true;
        return this;
    };
    HarmonyChordBuilder.prototype.function = function (build) {
        this._b["function"] = build(new FunctionBuilder(this._o && this._o["function"]));
        this._m["function"] = true;
        return this;
    };
    HarmonyChordBuilder.prototype.kind = function (build) {
        this._b["kind"] = build(new KindBuilder(this._o && this._o["kind"]));
        this._m["kind"] = true;
        return this;
    };
    HarmonyChordBuilder.prototype.degrees = function (degrees) {
        this._p.degrees = degrees;
        this._m["degrees"] = true;
        return this;
    };
    HarmonyChordBuilder.prototype.inversion = function (build) {
        this._b["inversion"] = build(new InversionBuilder(this._o && this._o["inversion"]));
        this._m["inversion"] = true;
        return this;
    };
    HarmonyChordBuilder.prototype.bass = function (build) {
        this._b["bass"] = build(new BassBuilder(this._o && this._o["bass"]));
        this._m["bass"] = true;
        return this;
    };
    return HarmonyChordBuilder;
})();
function patchHarmonyChord(base) { return new HarmonyChordBuilder(base); }
exports.patchHarmonyChord = patchHarmonyChord;
function buildHarmonyChord() { return new HarmonyChordBuilder(); }
exports.buildHarmonyChord = buildHarmonyChord;
var HarmonyBuilder = (function () {
    function HarmonyBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    HarmonyBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["frame"]) || this._b["frame"] !== undefined || this._p.frame !== undefined, "frame is a required field");
        console.assert((this._o && !this._m["printFrame"]) || this._b["printFrame"] !== undefined || this._p.printFrame !== undefined, "printFrame is a required field");
        console.assert((this._o && !this._m["staff"]) || this._b["staff"] !== undefined || this._p.staff !== undefined, "staff is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["offset"]) || this._b["offset"] !== undefined || this._p.offset !== undefined, "offset is a required field");
        console.assert((this._o && !this._m["root"]) || this._b["root"] !== undefined || this._p.root !== undefined, "root is a required field");
        console.assert((this._o && !this._m["function"]) || this._b["function"] !== undefined || this._p.function !== undefined, "function is a required field");
        console.assert((this._o && !this._m["kind"]) || this._b["kind"] !== undefined || this._p.kind !== undefined, "kind is a required field");
        console.assert((this._o && !this._m["degrees"]) || this._b["degrees"] !== undefined || this._p.degrees !== undefined, "degrees is a required field");
        console.assert((this._o && !this._m["inversion"]) || this._b["inversion"] !== undefined || this._p.inversion !== undefined, "inversion is a required field");
        console.assert((this._o && !this._m["bass"]) || this._b["bass"] !== undefined || this._p.bass !== undefined, "bass is a required field");
    };
    HarmonyBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Harmony";
        return this._p;
    };
    HarmonyBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    HarmonyBuilder.prototype.frame = function (build) {
        this._b["frame"] = build(new FrameBuilder(this._o && this._o["frame"]));
        this._m["frame"] = true;
        return this;
    };
    HarmonyBuilder.prototype.printFrame = function (printFrame) {
        this._p.printFrame = printFrame;
        this._m["printFrame"] = true;
        return this;
    };
    HarmonyBuilder.prototype.staff = function (staff) {
        this._p.staff = staff;
        this._m["staff"] = true;
        return this;
    };
    HarmonyBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    HarmonyBuilder.prototype.offset = function (build) {
        this._b["offset"] = build(new OffsetBuilder(this._o && this._o["offset"]));
        this._m["offset"] = true;
        return this;
    };
    HarmonyBuilder.prototype.root = function (build) {
        this._b["root"] = build(new RootBuilder(this._o && this._o["root"]));
        this._m["root"] = true;
        return this;
    };
    HarmonyBuilder.prototype.function = function (build) {
        this._b["function"] = build(new FunctionBuilder(this._o && this._o["function"]));
        this._m["function"] = true;
        return this;
    };
    HarmonyBuilder.prototype.kind = function (build) {
        this._b["kind"] = build(new KindBuilder(this._o && this._o["kind"]));
        this._m["kind"] = true;
        return this;
    };
    HarmonyBuilder.prototype.degrees = function (degrees) {
        this._p.degrees = degrees;
        this._m["degrees"] = true;
        return this;
    };
    HarmonyBuilder.prototype.inversion = function (build) {
        this._b["inversion"] = build(new InversionBuilder(this._o && this._o["inversion"]));
        this._m["inversion"] = true;
        return this;
    };
    HarmonyBuilder.prototype.bass = function (build) {
        this._b["bass"] = build(new BassBuilder(this._o && this._o["bass"]));
        this._m["bass"] = true;
        return this;
    };
    return HarmonyBuilder;
})();
function patchHarmony(base) { return new HarmonyBuilder(base); }
exports.patchHarmony = patchHarmony;
function buildHarmony() { return new HarmonyBuilder(); }
exports.buildHarmony = buildHarmony;
var RootBuilder = (function () {
    function RootBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RootBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["rootStep"]) || this._b["rootStep"] !== undefined || this._p.rootStep !== undefined, "rootStep is a required field");
        console.assert((this._o && !this._m["rootAlter"]) || this._b["rootAlter"] !== undefined || this._p.rootAlter !== undefined, "rootAlter is a required field");
    };
    RootBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Root";
        return this._p;
    };
    RootBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RootBuilder.prototype.rootStep = function (build) {
        this._b["rootStep"] = build(new RootStepBuilder(this._o && this._o["rootStep"]));
        this._m["rootStep"] = true;
        return this;
    };
    RootBuilder.prototype.rootAlter = function (build) {
        this._b["rootAlter"] = build(new RootAlterBuilder(this._o && this._o["rootAlter"]));
        this._m["rootAlter"] = true;
        return this;
    };
    return RootBuilder;
})();
function patchRoot(base) { return new RootBuilder(base); }
exports.patchRoot = patchRoot;
function buildRoot() { return new RootBuilder(); }
exports.buildRoot = buildRoot;
var RootStepBuilder = (function () {
    function RootStepBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RootStepBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    RootStepBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "RootStep";
        return this._p;
    };
    RootStepBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RootStepBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    RootStepBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    RootStepBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    RootStepBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    RootStepBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    RootStepBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return RootStepBuilder;
})();
function patchRootStep(base) { return new RootStepBuilder(base); }
exports.patchRootStep = patchRootStep;
function buildRootStep() { return new RootStepBuilder(); }
exports.buildRootStep = buildRootStep;
var RootAlterBuilder = (function () {
    function RootAlterBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    RootAlterBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["location"]) || this._b["location"] !== undefined || this._p.location !== undefined, "location is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    RootAlterBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "RootAlter";
        return this._p;
    };
    RootAlterBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    RootAlterBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    RootAlterBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    RootAlterBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return RootAlterBuilder;
})();
function patchRootAlter(base) { return new RootAlterBuilder(base); }
exports.patchRootAlter = patchRootAlter;
function buildRootAlter() { return new RootAlterBuilder(); }
exports.buildRootAlter = buildRootAlter;
var FunctionBuilder = (function () {
    function FunctionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FunctionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    FunctionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Function";
        return this._p;
    };
    FunctionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FunctionBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    FunctionBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FunctionBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FunctionBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FunctionBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FunctionBuilder;
})();
function patchFunction(base) { return new FunctionBuilder(base); }
exports.patchFunction = patchFunction;
function buildFunction() { return new FunctionBuilder(); }
exports.buildFunction = buildFunction;
var KindBuilder = (function () {
    function KindBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    KindBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["parenthesesDegrees"]) || this._b["parenthesesDegrees"] !== undefined || this._p.parenthesesDegrees !== undefined, "parenthesesDegrees is a required field");
        console.assert((this._o && !this._m["useSymbols"]) || this._b["useSymbols"] !== undefined || this._p.useSymbols !== undefined, "useSymbols is a required field");
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["stackDegrees"]) || this._b["stackDegrees"] !== undefined || this._p.stackDegrees !== undefined, "stackDegrees is a required field");
        console.assert((this._o && !this._m["bracketDegrees"]) || this._b["bracketDegrees"] !== undefined || this._p.bracketDegrees !== undefined, "bracketDegrees is a required field");
    };
    KindBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Kind";
        return this._p;
    };
    KindBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    KindBuilder.prototype.parenthesesDegrees = function (parenthesesDegrees) {
        this._p.parenthesesDegrees = parenthesesDegrees;
        this._m["parenthesesDegrees"] = true;
        return this;
    };
    KindBuilder.prototype.useSymbols = function (useSymbols) {
        this._p.useSymbols = useSymbols;
        this._m["useSymbols"] = true;
        return this;
    };
    KindBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    KindBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    KindBuilder.prototype.stackDegrees = function (stackDegrees) {
        this._p.stackDegrees = stackDegrees;
        this._m["stackDegrees"] = true;
        return this;
    };
    KindBuilder.prototype.bracketDegrees = function (bracketDegrees) {
        this._p.bracketDegrees = bracketDegrees;
        this._m["bracketDegrees"] = true;
        return this;
    };
    KindBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    KindBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    KindBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    KindBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return KindBuilder;
})();
function patchKind(base) { return new KindBuilder(base); }
exports.patchKind = patchKind;
function buildKind() { return new KindBuilder(); }
exports.buildKind = buildKind;
var InversionBuilder = (function () {
    function InversionBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    InversionBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    InversionBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Inversion";
        return this._p;
    };
    InversionBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    InversionBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    InversionBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    InversionBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    InversionBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    InversionBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return InversionBuilder;
})();
function patchInversion(base) { return new InversionBuilder(base); }
exports.patchInversion = patchInversion;
function buildInversion() { return new InversionBuilder(); }
exports.buildInversion = buildInversion;
var BassBuilder = (function () {
    function BassBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BassBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["bassStep"]) || this._b["bassStep"] !== undefined || this._p.bassStep !== undefined, "bassStep is a required field");
        console.assert((this._o && !this._m["bassAlter"]) || this._b["bassAlter"] !== undefined || this._p.bassAlter !== undefined, "bassAlter is a required field");
    };
    BassBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Bass";
        return this._p;
    };
    BassBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BassBuilder.prototype.bassStep = function (build) {
        this._b["bassStep"] = build(new BassStepBuilder(this._o && this._o["bassStep"]));
        this._m["bassStep"] = true;
        return this;
    };
    BassBuilder.prototype.bassAlter = function (build) {
        this._b["bassAlter"] = build(new BassAlterBuilder(this._o && this._o["bassAlter"]));
        this._m["bassAlter"] = true;
        return this;
    };
    return BassBuilder;
})();
function patchBass(base) { return new BassBuilder(base); }
exports.patchBass = patchBass;
function buildBass() { return new BassBuilder(); }
exports.buildBass = buildBass;
var BassStepBuilder = (function () {
    function BassStepBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BassStepBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    BassStepBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BassStep";
        return this._p;
    };
    BassStepBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BassStepBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    BassStepBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    BassStepBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    BassStepBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    BassStepBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    BassStepBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return BassStepBuilder;
})();
function patchBassStep(base) { return new BassStepBuilder(base); }
exports.patchBassStep = patchBassStep;
function buildBassStep() { return new BassStepBuilder(); }
exports.buildBassStep = buildBassStep;
var BassAlterBuilder = (function () {
    function BassAlterBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BassAlterBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["location"]) || this._b["location"] !== undefined || this._p.location !== undefined, "location is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    BassAlterBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "BassAlter";
        return this._p;
    };
    BassAlterBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BassAlterBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    BassAlterBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    BassAlterBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return BassAlterBuilder;
})();
function patchBassAlter(base) { return new BassAlterBuilder(base); }
exports.patchBassAlter = patchBassAlter;
function buildBassAlter() { return new BassAlterBuilder(); }
exports.buildBassAlter = buildBassAlter;
var DegreeBuilder = (function () {
    function DegreeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DegreeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["degreeAlter"]) || this._b["degreeAlter"] !== undefined || this._p.degreeAlter !== undefined, "degreeAlter is a required field");
        console.assert((this._o && !this._m["degreeValue"]) || this._b["degreeValue"] !== undefined || this._p.degreeValue !== undefined, "degreeValue is a required field");
        console.assert((this._o && !this._m["degreeType"]) || this._b["degreeType"] !== undefined || this._p.degreeType !== undefined, "degreeType is a required field");
    };
    DegreeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Degree";
        return this._p;
    };
    DegreeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DegreeBuilder.prototype.degreeAlter = function (build) {
        this._b["degreeAlter"] = build(new DegreeAlterBuilder(this._o && this._o["degreeAlter"]));
        this._m["degreeAlter"] = true;
        return this;
    };
    DegreeBuilder.prototype.degreeValue = function (build) {
        this._b["degreeValue"] = build(new DegreeValueBuilder(this._o && this._o["degreeValue"]));
        this._m["degreeValue"] = true;
        return this;
    };
    DegreeBuilder.prototype.degreeType = function (build) {
        this._b["degreeType"] = build(new DegreeTypeBuilder(this._o && this._o["degreeType"]));
        this._m["degreeType"] = true;
        return this;
    };
    DegreeBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return DegreeBuilder;
})();
function patchDegree(base) { return new DegreeBuilder(base); }
exports.patchDegree = patchDegree;
function buildDegree() { return new DegreeBuilder(); }
exports.buildDegree = buildDegree;
var DegreeValueBuilder = (function () {
    function DegreeValueBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DegreeValueBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["symbol"]) || this._b["symbol"] !== undefined || this._p.symbol !== undefined, "symbol is a required field");
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    DegreeValueBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DegreeValue";
        return this._p;
    };
    DegreeValueBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DegreeValueBuilder.prototype.symbol = function (symbol) {
        this._p.symbol = symbol;
        this._m["symbol"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DegreeValueBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DegreeValueBuilder;
})();
function patchDegreeValue(base) { return new DegreeValueBuilder(base); }
exports.patchDegreeValue = patchDegreeValue;
function buildDegreeValue() { return new DegreeValueBuilder(); }
exports.buildDegreeValue = buildDegreeValue;
var DegreeAlterBuilder = (function () {
    function DegreeAlterBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DegreeAlterBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["plusMinus"]) || this._b["plusMinus"] !== undefined || this._p.plusMinus !== undefined, "plusMinus is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    DegreeAlterBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DegreeAlter";
        return this._p;
    };
    DegreeAlterBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DegreeAlterBuilder.prototype.plusMinus = function (plusMinus) {
        this._p.plusMinus = plusMinus;
        this._m["plusMinus"] = true;
        return this;
    };
    DegreeAlterBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    DegreeAlterBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DegreeAlterBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DegreeAlterBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DegreeAlterBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DegreeAlterBuilder;
})();
function patchDegreeAlter(base) { return new DegreeAlterBuilder(base); }
exports.patchDegreeAlter = patchDegreeAlter;
function buildDegreeAlter() { return new DegreeAlterBuilder(); }
exports.buildDegreeAlter = buildDegreeAlter;
var DegreeTypeBuilder = (function () {
    function DegreeTypeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DegreeTypeBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    DegreeTypeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "DegreeType";
        return this._p;
    };
    DegreeTypeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DegreeTypeBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    DegreeTypeBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    DegreeTypeBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    DegreeTypeBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    DegreeTypeBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    DegreeTypeBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return DegreeTypeBuilder;
})();
function patchDegreeType(base) { return new DegreeTypeBuilder(base); }
exports.patchDegreeType = patchDegreeType;
function buildDegreeType() { return new DegreeTypeBuilder(); }
exports.buildDegreeType = buildDegreeType;
var FrameBuilder = (function () {
    function FrameBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FrameBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["frameStrings"]) || this._b["frameStrings"] !== undefined || this._p.frameStrings !== undefined, "frameStrings is a required field");
        console.assert((this._o && !this._m["frameNotes"]) || this._b["frameNotes"] !== undefined || this._p.frameNotes !== undefined, "frameNotes is a required field");
        console.assert((this._o && !this._m["unplayed"]) || this._b["unplayed"] !== undefined || this._p.unplayed !== undefined, "unplayed is a required field");
        console.assert((this._o && !this._m["frameFrets"]) || this._b["frameFrets"] !== undefined || this._p.frameFrets !== undefined, "frameFrets is a required field");
        console.assert((this._o && !this._m["firstFret"]) || this._b["firstFret"] !== undefined || this._p.firstFret !== undefined, "firstFret is a required field");
        console.assert((this._o && !this._m["width"]) || this._b["width"] !== undefined || this._p.width !== undefined, "width is a required field");
        console.assert((this._o && !this._m["height"]) || this._b["height"] !== undefined || this._p.height !== undefined, "height is a required field");
    };
    FrameBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Frame";
        return this._p;
    };
    FrameBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FrameBuilder.prototype.frameStrings = function (frameStrings) {
        this._p.frameStrings = frameStrings;
        this._m["frameStrings"] = true;
        return this;
    };
    FrameBuilder.prototype.frameNotes = function (frameNotes) {
        this._p.frameNotes = frameNotes;
        this._m["frameNotes"] = true;
        return this;
    };
    FrameBuilder.prototype.unplayed = function (unplayed) {
        this._p.unplayed = unplayed;
        this._m["unplayed"] = true;
        return this;
    };
    FrameBuilder.prototype.frameFrets = function (frameFrets) {
        this._p.frameFrets = frameFrets;
        this._m["frameFrets"] = true;
        return this;
    };
    FrameBuilder.prototype.firstFret = function (build) {
        this._b["firstFret"] = build(new FirstFretBuilder(this._o && this._o["firstFret"]));
        this._m["firstFret"] = true;
        return this;
    };
    FrameBuilder.prototype.width = function (width) {
        this._p.width = width;
        this._m["width"] = true;
        return this;
    };
    FrameBuilder.prototype.height = function (height) {
        this._p.height = height;
        this._m["height"] = true;
        return this;
    };
    FrameBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    FrameBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    FrameBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    FrameBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return FrameBuilder;
})();
function patchFrame(base) { return new FrameBuilder(base); }
exports.patchFrame = patchFrame;
function buildFrame() { return new FrameBuilder(); }
exports.buildFrame = buildFrame;
var FirstFretBuilder = (function () {
    function FirstFretBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FirstFretBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
        console.assert((this._o && !this._m["location"]) || this._b["location"] !== undefined || this._p.location !== undefined, "location is a required field");
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    FirstFretBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "FirstFret";
        return this._p;
    };
    FirstFretBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FirstFretBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    FirstFretBuilder.prototype.location = function (location) {
        this._p.location = location;
        this._m["location"] = true;
        return this;
    };
    FirstFretBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    return FirstFretBuilder;
})();
function patchFirstFret(base) { return new FirstFretBuilder(base); }
exports.patchFirstFret = patchFirstFret;
function buildFirstFret() { return new FirstFretBuilder(); }
exports.buildFirstFret = buildFirstFret;
var FrameNoteBuilder = (function () {
    function FrameNoteBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FrameNoteBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["barre"]) || this._b["barre"] !== undefined || this._p.barre !== undefined, "barre is a required field");
        console.assert((this._o && !this._m["string"]) || this._b["string"] !== undefined || this._p.string !== undefined, "string is a required field");
        console.assert((this._o && !this._m["fingering"]) || this._b["fingering"] !== undefined || this._p.fingering !== undefined, "fingering is a required field");
        console.assert((this._o && !this._m["fret"]) || this._b["fret"] !== undefined || this._p.fret !== undefined, "fret is a required field");
    };
    FrameNoteBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "FrameNote";
        return this._p;
    };
    FrameNoteBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FrameNoteBuilder.prototype.barre = function (build) {
        this._b["barre"] = build(new BarreBuilder(this._o && this._o["barre"]));
        this._m["barre"] = true;
        return this;
    };
    FrameNoteBuilder.prototype.string = function (build) {
        this._b["string"] = build(new StringBuilder(this._o && this._o["string"]));
        this._m["string"] = true;
        return this;
    };
    FrameNoteBuilder.prototype.fingering = function (build) {
        this._b["fingering"] = build(new FingeringBuilder(this._o && this._o["fingering"]));
        this._m["fingering"] = true;
        return this;
    };
    FrameNoteBuilder.prototype.fret = function (build) {
        this._b["fret"] = build(new FretBuilder(this._o && this._o["fret"]));
        this._m["fret"] = true;
        return this;
    };
    return FrameNoteBuilder;
})();
function patchFrameNote(base) { return new FrameNoteBuilder(base); }
exports.patchFrameNote = patchFrameNote;
function buildFrameNote() { return new FrameNoteBuilder(); }
exports.buildFrameNote = buildFrameNote;
var BarreBuilder = (function () {
    function BarreBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    BarreBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    BarreBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Barre";
        return this._p;
    };
    BarreBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    BarreBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    BarreBuilder.prototype.color = function (color) {
        this._p.color = color;
        this._m["color"] = true;
        return this;
    };
    return BarreBuilder;
})();
function patchBarre(base) { return new BarreBuilder(base); }
exports.patchBarre = patchBarre;
function buildBarre() { return new BarreBuilder(); }
exports.buildBarre = buildBarre;
var GroupingBuilder = (function () {
    function GroupingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupingBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["features"]) || this._b["features"] !== undefined || this._p.features !== undefined, "features is a required field");
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["memberOf"]) || this._b["memberOf"] !== undefined || this._p.memberOf !== undefined, "memberOf is a required field");
    };
    GroupingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Grouping";
        return this._p;
    };
    GroupingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupingBuilder.prototype.features = function (features) {
        this._p.features = features;
        this._m["features"] = true;
        return this;
    };
    GroupingBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    GroupingBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    GroupingBuilder.prototype.memberOf = function (memberOf) {
        this._p.memberOf = memberOf;
        this._m["memberOf"] = true;
        return this;
    };
    GroupingBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return GroupingBuilder;
})();
function patchGrouping(base) { return new GroupingBuilder(base); }
exports.patchGrouping = patchGrouping;
function buildGrouping() { return new GroupingBuilder(); }
exports.buildGrouping = buildGrouping;
var FeatureBuilder = (function () {
    function FeatureBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    FeatureBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
    };
    FeatureBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Feature";
        return this._p;
    };
    FeatureBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    FeatureBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    FeatureBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    return FeatureBuilder;
})();
function patchFeature(base) { return new FeatureBuilder(base); }
exports.patchFeature = patchFeature;
function buildFeature() { return new FeatureBuilder(); }
exports.buildFeature = buildFeature;
var PrintBuilder = (function () {
    function PrintBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PrintBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["measureNumbering"]) || this._b["measureNumbering"] !== undefined || this._p.measureNumbering !== undefined, "measureNumbering is a required field");
        console.assert((this._o && !this._m["partNameDisplay"]) || this._b["partNameDisplay"] !== undefined || this._p.partNameDisplay !== undefined, "partNameDisplay is a required field");
        console.assert((this._o && !this._m["newSystem"]) || this._b["newSystem"] !== undefined || this._p.newSystem !== undefined, "newSystem is a required field");
        console.assert((this._o && !this._m["newPage"]) || this._b["newPage"] !== undefined || this._p.newPage !== undefined, "newPage is a required field");
        console.assert((this._o && !this._m["blankPage"]) || this._b["blankPage"] !== undefined || this._p.blankPage !== undefined, "blankPage is a required field");
        console.assert((this._o && !this._m["measureLayout"]) || this._b["measureLayout"] !== undefined || this._p.measureLayout !== undefined, "measureLayout is a required field");
        console.assert((this._o && !this._m["partAbbreviationDisplay"]) || this._b["partAbbreviationDisplay"] !== undefined || this._p.partAbbreviationDisplay !== undefined, "partAbbreviationDisplay is a required field");
        console.assert((this._o && !this._m["pageLayout"]) || this._b["pageLayout"] !== undefined || this._p.pageLayout !== undefined, "pageLayout is a required field");
        console.assert((this._o && !this._m["systemLayout"]) || this._b["systemLayout"] !== undefined || this._p.systemLayout !== undefined, "systemLayout is a required field");
        console.assert((this._o && !this._m["staffSpacing"]) || this._b["staffSpacing"] !== undefined || this._p.staffSpacing !== undefined, "staffSpacing is a required field");
        console.assert((this._o && !this._m["staffLayouts"]) || this._b["staffLayouts"] !== undefined || this._p.staffLayouts !== undefined, "staffLayouts is a required field");
        console.assert((this._o && !this._m["pageNumber"]) || this._b["pageNumber"] !== undefined || this._p.pageNumber !== undefined, "pageNumber is a required field");
    };
    PrintBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Print";
        return this._p;
    };
    PrintBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PrintBuilder.prototype.measureNumbering = function (build) {
        this._b["measureNumbering"] = build(new MeasureNumberingBuilder(this._o && this._o["measureNumbering"]));
        this._m["measureNumbering"] = true;
        return this;
    };
    PrintBuilder.prototype.partNameDisplay = function (build) {
        this._b["partNameDisplay"] = build(new PartNameDisplayBuilder(this._o && this._o["partNameDisplay"]));
        this._m["partNameDisplay"] = true;
        return this;
    };
    PrintBuilder.prototype.newSystem = function (newSystem) {
        this._p.newSystem = newSystem;
        this._m["newSystem"] = true;
        return this;
    };
    PrintBuilder.prototype.newPage = function (newPage) {
        this._p.newPage = newPage;
        this._m["newPage"] = true;
        return this;
    };
    PrintBuilder.prototype.blankPage = function (blankPage) {
        this._p.blankPage = blankPage;
        this._m["blankPage"] = true;
        return this;
    };
    PrintBuilder.prototype.measureLayout = function (build) {
        this._b["measureLayout"] = build(new MeasureLayoutBuilder(this._o && this._o["measureLayout"]));
        this._m["measureLayout"] = true;
        return this;
    };
    PrintBuilder.prototype.partAbbreviationDisplay = function (build) {
        this._b["partAbbreviationDisplay"] = build(new PartAbbreviationDisplayBuilder(this._o && this._o["partAbbreviationDisplay"]));
        this._m["partAbbreviationDisplay"] = true;
        return this;
    };
    PrintBuilder.prototype.pageLayout = function (build) {
        this._b["pageLayout"] = build(new PageLayoutBuilder(this._o && this._o["pageLayout"]));
        this._m["pageLayout"] = true;
        return this;
    };
    PrintBuilder.prototype.systemLayout = function (build) {
        this._b["systemLayout"] = build(new SystemLayoutBuilder(this._o && this._o["systemLayout"]));
        this._m["systemLayout"] = true;
        return this;
    };
    PrintBuilder.prototype.staffSpacing = function (staffSpacing) {
        this._p.staffSpacing = staffSpacing;
        this._m["staffSpacing"] = true;
        return this;
    };
    PrintBuilder.prototype.staffLayouts = function (staffLayouts) {
        this._p.staffLayouts = staffLayouts;
        this._m["staffLayouts"] = true;
        return this;
    };
    PrintBuilder.prototype.pageNumber = function (pageNumber) {
        this._p.pageNumber = pageNumber;
        this._m["pageNumber"] = true;
        return this;
    };
    PrintBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return PrintBuilder;
})();
function patchPrint(base) { return new PrintBuilder(base); }
exports.patchPrint = patchPrint;
function buildPrint() { return new PrintBuilder(); }
exports.buildPrint = buildPrint;
var MeasureNumberingBuilder = (function () {
    function MeasureNumberingBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MeasureNumberingBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    MeasureNumberingBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MeasureNumbering";
        return this._p;
    };
    MeasureNumberingBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MeasureNumberingBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    MeasureNumberingBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    MeasureNumberingBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    MeasureNumberingBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    MeasureNumberingBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return MeasureNumberingBuilder;
})();
function patchMeasureNumbering(base) { return new MeasureNumberingBuilder(base); }
exports.patchMeasureNumbering = patchMeasureNumbering;
function buildMeasureNumbering() { return new MeasureNumberingBuilder(); }
exports.buildMeasureNumbering = buildMeasureNumbering;
var SoundBuilder = (function () {
    function SoundBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SoundBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["softPedal"]) || this._b["softPedal"] !== undefined || this._p.softPedal !== undefined, "softPedal is a required field");
        console.assert((this._o && !this._m["midiInstruments"]) || this._b["midiInstruments"] !== undefined || this._p.midiInstruments !== undefined, "midiInstruments is a required field");
        console.assert((this._o && !this._m["pan"]) || this._b["pan"] !== undefined || this._p.pan !== undefined, "pan is a required field");
        console.assert((this._o && !this._m["tocoda"]) || this._b["tocoda"] !== undefined || this._p.tocoda !== undefined, "tocoda is a required field");
        console.assert((this._o && !this._m["decapo"]) || this._b["decapo"] !== undefined || this._p.decapo !== undefined, "decapo is a required field");
        console.assert((this._o && !this._m["divisions"]) || this._b["divisions"] !== undefined || this._p.divisions !== undefined, "divisions is a required field");
        console.assert((this._o && !this._m["pizzicato"]) || this._b["pizzicato"] !== undefined || this._p.pizzicato !== undefined, "pizzicato is a required field");
        console.assert((this._o && !this._m["coda"]) || this._b["coda"] !== undefined || this._p.coda !== undefined, "coda is a required field");
        console.assert((this._o && !this._m["segno"]) || this._b["segno"] !== undefined || this._p.segno !== undefined, "segno is a required field");
        console.assert((this._o && !this._m["elevation"]) || this._b["elevation"] !== undefined || this._p.elevation !== undefined, "elevation is a required field");
        console.assert((this._o && !this._m["fine"]) || this._b["fine"] !== undefined || this._p.fine !== undefined, "fine is a required field");
        console.assert((this._o && !this._m["damperPedal"]) || this._b["damperPedal"] !== undefined || this._p.damperPedal !== undefined, "damperPedal is a required field");
        console.assert((this._o && !this._m["dynamics"]) || this._b["dynamics"] !== undefined || this._p.dynamics !== undefined, "dynamics is a required field");
        console.assert((this._o && !this._m["plays"]) || this._b["plays"] !== undefined || this._p.plays !== undefined, "plays is a required field");
        console.assert((this._o && !this._m["offset"]) || this._b["offset"] !== undefined || this._p.offset !== undefined, "offset is a required field");
        console.assert((this._o && !this._m["sostenutoPedal"]) || this._b["sostenutoPedal"] !== undefined || this._p.sostenutoPedal !== undefined, "sostenutoPedal is a required field");
        console.assert((this._o && !this._m["dalsegno"]) || this._b["dalsegno"] !== undefined || this._p.dalsegno !== undefined, "dalsegno is a required field");
        console.assert((this._o && !this._m["midiDevices"]) || this._b["midiDevices"] !== undefined || this._p.midiDevices !== undefined, "midiDevices is a required field");
        console.assert((this._o && !this._m["tempo"]) || this._b["tempo"] !== undefined || this._p.tempo !== undefined, "tempo is a required field");
        console.assert((this._o && !this._m["forwardRepeat"]) || this._b["forwardRepeat"] !== undefined || this._p.forwardRepeat !== undefined, "forwardRepeat is a required field");
    };
    SoundBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Sound";
        return this._p;
    };
    SoundBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    SoundBuilder.prototype.softPedal = function (softPedal) {
        this._p.softPedal = softPedal;
        this._m["softPedal"] = true;
        return this;
    };
    SoundBuilder.prototype.midiInstruments = function (midiInstruments) {
        this._p.midiInstruments = midiInstruments;
        this._m["midiInstruments"] = true;
        return this;
    };
    SoundBuilder.prototype.pan = function (pan) {
        this._p.pan = pan;
        this._m["pan"] = true;
        return this;
    };
    SoundBuilder.prototype.tocoda = function (tocoda) {
        this._p.tocoda = tocoda;
        this._m["tocoda"] = true;
        return this;
    };
    SoundBuilder.prototype.decapo = function (decapo) {
        this._p.decapo = decapo;
        this._m["decapo"] = true;
        return this;
    };
    SoundBuilder.prototype.divisions = function (divisions) {
        this._p.divisions = divisions;
        this._m["divisions"] = true;
        return this;
    };
    SoundBuilder.prototype.pizzicato = function (pizzicato) {
        this._p.pizzicato = pizzicato;
        this._m["pizzicato"] = true;
        return this;
    };
    SoundBuilder.prototype.coda = function (coda) {
        this._p.coda = coda;
        this._m["coda"] = true;
        return this;
    };
    SoundBuilder.prototype.segno = function (segno) {
        this._p.segno = segno;
        this._m["segno"] = true;
        return this;
    };
    SoundBuilder.prototype.elevation = function (elevation) {
        this._p.elevation = elevation;
        this._m["elevation"] = true;
        return this;
    };
    SoundBuilder.prototype.fine = function (fine) {
        this._p.fine = fine;
        this._m["fine"] = true;
        return this;
    };
    SoundBuilder.prototype.damperPedal = function (damperPedal) {
        this._p.damperPedal = damperPedal;
        this._m["damperPedal"] = true;
        return this;
    };
    SoundBuilder.prototype.dynamics = function (dynamics) {
        this._p.dynamics = dynamics;
        this._m["dynamics"] = true;
        return this;
    };
    SoundBuilder.prototype.plays = function (plays) {
        this._p.plays = plays;
        this._m["plays"] = true;
        return this;
    };
    SoundBuilder.prototype.offset = function (build) {
        this._b["offset"] = build(new OffsetBuilder(this._o && this._o["offset"]));
        this._m["offset"] = true;
        return this;
    };
    SoundBuilder.prototype.sostenutoPedal = function (sostenutoPedal) {
        this._p.sostenutoPedal = sostenutoPedal;
        this._m["sostenutoPedal"] = true;
        return this;
    };
    SoundBuilder.prototype.dalsegno = function (dalsegno) {
        this._p.dalsegno = dalsegno;
        this._m["dalsegno"] = true;
        return this;
    };
    SoundBuilder.prototype.midiDevices = function (midiDevices) {
        this._p.midiDevices = midiDevices;
        this._m["midiDevices"] = true;
        return this;
    };
    SoundBuilder.prototype.tempo = function (tempo) {
        this._p.tempo = tempo;
        this._m["tempo"] = true;
        return this;
    };
    SoundBuilder.prototype.forwardRepeat = function (forwardRepeat) {
        this._p.forwardRepeat = forwardRepeat;
        this._m["forwardRepeat"] = true;
        return this;
    };
    SoundBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    SoundBuilder.prototype.timeOnly = function (timeOnly) {
        this._p.timeOnly = timeOnly;
        this._m["timeOnly"] = true;
        return this;
    };
    return SoundBuilder;
})();
function patchSound(base) { return new SoundBuilder(base); }
exports.patchSound = patchSound;
function buildSound() { return new SoundBuilder(); }
exports.buildSound = buildSound;
var WorkBuilder = (function () {
    function WorkBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WorkBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["workNumber"]) || this._b["workNumber"] !== undefined || this._p.workNumber !== undefined, "workNumber is a required field");
        console.assert((this._o && !this._m["workTitle"]) || this._b["workTitle"] !== undefined || this._p.workTitle !== undefined, "workTitle is a required field");
        console.assert((this._o && !this._m["opus"]) || this._b["opus"] !== undefined || this._p.opus !== undefined, "opus is a required field");
    };
    WorkBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Work";
        return this._p;
    };
    WorkBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WorkBuilder.prototype.workNumber = function (workNumber) {
        this._p.workNumber = workNumber;
        this._m["workNumber"] = true;
        return this;
    };
    WorkBuilder.prototype.workTitle = function (workTitle) {
        this._p.workTitle = workTitle;
        this._m["workTitle"] = true;
        return this;
    };
    WorkBuilder.prototype.opus = function (build) {
        this._b["opus"] = build(new OpusBuilder(this._o && this._o["opus"]));
        this._m["opus"] = true;
        return this;
    };
    return WorkBuilder;
})();
function patchWork(base) { return new WorkBuilder(base); }
exports.patchWork = patchWork;
function buildWork() { return new WorkBuilder(); }
exports.buildWork = buildWork;
var OpusBuilder = (function () {
    function OpusBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    OpusBuilder.prototype._i = function () {
    };
    OpusBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Opus";
        return this._p;
    };
    OpusBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return OpusBuilder;
})();
function patchOpus(base) { return new OpusBuilder(base); }
exports.patchOpus = patchOpus;
function buildOpus() { return new OpusBuilder(); }
exports.buildOpus = buildOpus;
var DefaultsBuilder = (function () {
    function DefaultsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    DefaultsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["wordFont"]) || this._b["wordFont"] !== undefined || this._p.wordFont !== undefined, "wordFont is a required field");
        console.assert((this._o && !this._m["lyricLanguages"]) || this._b["lyricLanguages"] !== undefined || this._p.lyricLanguages !== undefined, "lyricLanguages is a required field");
        console.assert((this._o && !this._m["lyricFonts"]) || this._b["lyricFonts"] !== undefined || this._p.lyricFonts !== undefined, "lyricFonts is a required field");
        console.assert((this._o && !this._m["pageLayout"]) || this._b["pageLayout"] !== undefined || this._p.pageLayout !== undefined, "pageLayout is a required field");
        console.assert((this._o && !this._m["systemLayout"]) || this._b["systemLayout"] !== undefined || this._p.systemLayout !== undefined, "systemLayout is a required field");
        console.assert((this._o && !this._m["appearance"]) || this._b["appearance"] !== undefined || this._p.appearance !== undefined, "appearance is a required field");
        console.assert((this._o && !this._m["scaling"]) || this._b["scaling"] !== undefined || this._p.scaling !== undefined, "scaling is a required field");
        console.assert((this._o && !this._m["staffLayouts"]) || this._b["staffLayouts"] !== undefined || this._p.staffLayouts !== undefined, "staffLayouts is a required field");
        console.assert((this._o && !this._m["musicFont"]) || this._b["musicFont"] !== undefined || this._p.musicFont !== undefined, "musicFont is a required field");
    };
    DefaultsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Defaults";
        return this._p;
    };
    DefaultsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    DefaultsBuilder.prototype.wordFont = function (build) {
        this._b["wordFont"] = build(new WordFontBuilder(this._o && this._o["wordFont"]));
        this._m["wordFont"] = true;
        return this;
    };
    DefaultsBuilder.prototype.lyricLanguages = function (lyricLanguages) {
        this._p.lyricLanguages = lyricLanguages;
        this._m["lyricLanguages"] = true;
        return this;
    };
    DefaultsBuilder.prototype.lyricFonts = function (lyricFonts) {
        this._p.lyricFonts = lyricFonts;
        this._m["lyricFonts"] = true;
        return this;
    };
    DefaultsBuilder.prototype.pageLayout = function (build) {
        this._b["pageLayout"] = build(new PageLayoutBuilder(this._o && this._o["pageLayout"]));
        this._m["pageLayout"] = true;
        return this;
    };
    DefaultsBuilder.prototype.systemLayout = function (build) {
        this._b["systemLayout"] = build(new SystemLayoutBuilder(this._o && this._o["systemLayout"]));
        this._m["systemLayout"] = true;
        return this;
    };
    DefaultsBuilder.prototype.appearance = function (build) {
        this._b["appearance"] = build(new AppearanceBuilder(this._o && this._o["appearance"]));
        this._m["appearance"] = true;
        return this;
    };
    DefaultsBuilder.prototype.scaling = function (build) {
        this._b["scaling"] = build(new ScalingBuilder(this._o && this._o["scaling"]));
        this._m["scaling"] = true;
        return this;
    };
    DefaultsBuilder.prototype.staffLayouts = function (staffLayouts) {
        this._p.staffLayouts = staffLayouts;
        this._m["staffLayouts"] = true;
        return this;
    };
    DefaultsBuilder.prototype.musicFont = function (build) {
        this._b["musicFont"] = build(new MusicFontBuilder(this._o && this._o["musicFont"]));
        this._m["musicFont"] = true;
        return this;
    };
    return DefaultsBuilder;
})();
function patchDefaults(base) { return new DefaultsBuilder(base); }
exports.patchDefaults = patchDefaults;
function buildDefaults() { return new DefaultsBuilder(); }
exports.buildDefaults = buildDefaults;
var MusicFontBuilder = (function () {
    function MusicFontBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MusicFontBuilder.prototype._i = function () {
    };
    MusicFontBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "MusicFont";
        return this._p;
    };
    MusicFontBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MusicFontBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    MusicFontBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    MusicFontBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    MusicFontBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return MusicFontBuilder;
})();
function patchMusicFont(base) { return new MusicFontBuilder(base); }
exports.patchMusicFont = patchMusicFont;
function buildMusicFont() { return new MusicFontBuilder(); }
exports.buildMusicFont = buildMusicFont;
var WordFontBuilder = (function () {
    function WordFontBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    WordFontBuilder.prototype._i = function () {
    };
    WordFontBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "WordFont";
        return this._p;
    };
    WordFontBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    WordFontBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    WordFontBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    WordFontBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    WordFontBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return WordFontBuilder;
})();
function patchWordFont(base) { return new WordFontBuilder(base); }
exports.patchWordFont = patchWordFont;
function buildWordFont() { return new WordFontBuilder(); }
exports.buildWordFont = buildWordFont;
var LyricFontBuilder = (function () {
    function LyricFontBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LyricFontBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    LyricFontBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LyricFont";
        return this._p;
    };
    LyricFontBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LyricFontBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    LyricFontBuilder.prototype.name = function (name) {
        this._p.name = name;
        this._m["name"] = true;
        return this;
    };
    LyricFontBuilder.prototype.fontFamily = function (fontFamily) {
        this._p.fontFamily = fontFamily;
        this._m["fontFamily"] = true;
        return this;
    };
    LyricFontBuilder.prototype.fontWeight = function (fontWeight) {
        this._p.fontWeight = fontWeight;
        this._m["fontWeight"] = true;
        return this;
    };
    LyricFontBuilder.prototype.fontStyle = function (fontStyle) {
        this._p.fontStyle = fontStyle;
        this._m["fontStyle"] = true;
        return this;
    };
    LyricFontBuilder.prototype.fontSize = function (fontSize) {
        this._p.fontSize = fontSize;
        this._m["fontSize"] = true;
        return this;
    };
    return LyricFontBuilder;
})();
function patchLyricFont(base) { return new LyricFontBuilder(base); }
exports.patchLyricFont = patchLyricFont;
function buildLyricFont() { return new LyricFontBuilder(); }
exports.buildLyricFont = buildLyricFont;
var LyricLanguageBuilder = (function () {
    function LyricLanguageBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    LyricLanguageBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    LyricLanguageBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "LyricLanguage";
        return this._p;
    };
    LyricLanguageBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    LyricLanguageBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    LyricLanguageBuilder.prototype.name = function (name) {
        this._p.name = name;
        this._m["name"] = true;
        return this;
    };
    return LyricLanguageBuilder;
})();
function patchLyricLanguage(base) { return new LyricLanguageBuilder(base); }
exports.patchLyricLanguage = patchLyricLanguage;
function buildLyricLanguage() { return new LyricLanguageBuilder(); }
exports.buildLyricLanguage = buildLyricLanguage;
var CreditBuilder = (function () {
    function CreditBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CreditBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["creditTypes"]) || this._b["creditTypes"] !== undefined || this._p.creditTypes !== undefined, "creditTypes is a required field");
        console.assert((this._o && !this._m["creditWords"]) || this._b["creditWords"] !== undefined || this._p.creditWords !== undefined, "creditWords is a required field");
        console.assert((this._o && !this._m["creditImage"]) || this._b["creditImage"] !== undefined || this._p.creditImage !== undefined, "creditImage is a required field");
        console.assert((this._o && !this._m["page"]) || this._b["page"] !== undefined || this._p.page !== undefined, "page is a required field");
    };
    CreditBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Credit";
        return this._p;
    };
    CreditBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CreditBuilder.prototype.creditTypes = function (creditTypes) {
        this._p.creditTypes = creditTypes;
        this._m["creditTypes"] = true;
        return this;
    };
    CreditBuilder.prototype.creditWords = function (creditWords) {
        this._p.creditWords = creditWords;
        this._m["creditWords"] = true;
        return this;
    };
    CreditBuilder.prototype.creditImage = function (build) {
        this._b["creditImage"] = build(new CreditImageBuilder(this._o && this._o["creditImage"]));
        this._m["creditImage"] = true;
        return this;
    };
    CreditBuilder.prototype.page = function (page) {
        this._p.page = page;
        this._m["page"] = true;
        return this;
    };
    return CreditBuilder;
})();
function patchCredit(base) { return new CreditBuilder(base); }
exports.patchCredit = patchCredit;
function buildCredit() { return new CreditBuilder(); }
exports.buildCredit = buildCredit;
var CreditWordsBuilder = (function () {
    function CreditWordsBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CreditWordsBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["words"]) || this._b["words"] !== undefined || this._p.words !== undefined, "words is a required field");
    };
    CreditWordsBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "CreditWords";
        return this._p;
    };
    CreditWordsBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CreditWordsBuilder.prototype.words = function (words) {
        this._p.words = words;
        this._m["words"] = true;
        return this;
    };
    CreditWordsBuilder.prototype.justify = function (justify) {
        this._p.justify = justify;
        this._m["justify"] = true;
        return this;
    };
    return CreditWordsBuilder;
})();
function patchCreditWords(base) { return new CreditWordsBuilder(base); }
exports.patchCreditWords = patchCreditWords;
function buildCreditWords() { return new CreditWordsBuilder(); }
exports.buildCreditWords = buildCreditWords;
var CreditImageBuilder = (function () {
    function CreditImageBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    CreditImageBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["source"]) || this._b["source"] !== undefined || this._p.source !== undefined, "source is a required field");
    };
    CreditImageBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "CreditImage";
        return this._p;
    };
    CreditImageBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    CreditImageBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    CreditImageBuilder.prototype.source = function (source) {
        this._p.source = source;
        this._m["source"] = true;
        return this;
    };
    CreditImageBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    CreditImageBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    CreditImageBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    CreditImageBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return CreditImageBuilder;
})();
function patchCreditImage(base) { return new CreditImageBuilder(base); }
exports.patchCreditImage = patchCreditImage;
function buildCreditImage() { return new CreditImageBuilder(); }
exports.buildCreditImage = buildCreditImage;
var ScorePartBuilder = (function () {
    function ScorePartBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScorePartBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["identification"]) || this._b["identification"] !== undefined || this._p.identification !== undefined, "identification is a required field");
        console.assert((this._o && !this._m["partNameDisplay"]) || this._b["partNameDisplay"] !== undefined || this._p.partNameDisplay !== undefined, "partNameDisplay is a required field");
        console.assert((this._o && !this._m["scoreInstruments"]) || this._b["scoreInstruments"] !== undefined || this._p.scoreInstruments !== undefined, "scoreInstruments is a required field");
        console.assert((this._o && !this._m["midiDevices"]) || this._b["midiDevices"] !== undefined || this._p.midiDevices !== undefined, "midiDevices is a required field");
        console.assert((this._o && !this._m["partName"]) || this._b["partName"] !== undefined || this._p.partName !== undefined, "partName is a required field");
        console.assert((this._o && !this._m["partAbbreviationDisplay"]) || this._b["partAbbreviationDisplay"] !== undefined || this._p.partAbbreviationDisplay !== undefined, "partAbbreviationDisplay is a required field");
        console.assert((this._o && !this._m["partAbbreviation"]) || this._b["partAbbreviation"] !== undefined || this._p.partAbbreviation !== undefined, "partAbbreviation is a required field");
        console.assert((this._o && !this._m["groups"]) || this._b["groups"] !== undefined || this._p.groups !== undefined, "groups is a required field");
        console.assert((this._o && !this._m["midiInstruments"]) || this._b["midiInstruments"] !== undefined || this._p.midiInstruments !== undefined, "midiInstruments is a required field");
        console.assert((this._o && !this._m["id"]) || this._b["id"] !== undefined || this._p.id !== undefined, "id is a required field");
        console.assert((this._o && !this._m["_class"]) || this._b["_class"] !== undefined || this._p._class !== undefined, "_class is a required field");
    };
    ScorePartBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ScorePart";
        return this._p;
    };
    ScorePartBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScorePartBuilder.prototype.identification = function (build) {
        this._b["identification"] = build(new IdentificationBuilder(this._o && this._o["identification"]));
        this._m["identification"] = true;
        return this;
    };
    ScorePartBuilder.prototype.partNameDisplay = function (build) {
        this._b["partNameDisplay"] = build(new PartNameDisplayBuilder(this._o && this._o["partNameDisplay"]));
        this._m["partNameDisplay"] = true;
        return this;
    };
    ScorePartBuilder.prototype.scoreInstruments = function (scoreInstruments) {
        this._p.scoreInstruments = scoreInstruments;
        this._m["scoreInstruments"] = true;
        return this;
    };
    ScorePartBuilder.prototype.midiDevices = function (midiDevices) {
        this._p.midiDevices = midiDevices;
        this._m["midiDevices"] = true;
        return this;
    };
    ScorePartBuilder.prototype.partName = function (build) {
        this._b["partName"] = build(new PartNameBuilder(this._o && this._o["partName"]));
        this._m["partName"] = true;
        return this;
    };
    ScorePartBuilder.prototype.partAbbreviationDisplay = function (build) {
        this._b["partAbbreviationDisplay"] = build(new PartAbbreviationDisplayBuilder(this._o && this._o["partAbbreviationDisplay"]));
        this._m["partAbbreviationDisplay"] = true;
        return this;
    };
    ScorePartBuilder.prototype.partAbbreviation = function (build) {
        this._b["partAbbreviation"] = build(new PartAbbreviationBuilder(this._o && this._o["partAbbreviation"]));
        this._m["partAbbreviation"] = true;
        return this;
    };
    ScorePartBuilder.prototype.groups = function (groups) {
        this._p.groups = groups;
        this._m["groups"] = true;
        return this;
    };
    ScorePartBuilder.prototype.midiInstruments = function (midiInstruments) {
        this._p.midiInstruments = midiInstruments;
        this._m["midiInstruments"] = true;
        return this;
    };
    ScorePartBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    ScorePartBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    return ScorePartBuilder;
})();
function patchScorePart(base) { return new ScorePartBuilder(base); }
exports.patchScorePart = patchScorePart;
function buildScorePart() { return new ScorePartBuilder(); }
exports.buildScorePart = buildScorePart;
var PartNameBuilder = (function () {
    function PartNameBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartNameBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["partName"]) || this._b["partName"] !== undefined || this._p.partName !== undefined, "partName is a required field");
    };
    PartNameBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartName";
        return this._p;
    };
    PartNameBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartNameBuilder.prototype.partName = function (partName) {
        this._p.partName = partName;
        this._m["partName"] = true;
        return this;
    };
    PartNameBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PartNameBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PartNameBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PartNameBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PartNameBuilder;
})();
function patchPartName(base) { return new PartNameBuilder(base); }
exports.patchPartName = patchPartName;
function buildPartName() { return new PartNameBuilder(); }
exports.buildPartName = buildPartName;
var PartAbbreviationBuilder = (function () {
    function PartAbbreviationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartAbbreviationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["abbreviation"]) || this._b["abbreviation"] !== undefined || this._p.abbreviation !== undefined, "abbreviation is a required field");
    };
    PartAbbreviationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartAbbreviation";
        return this._p;
    };
    PartAbbreviationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartAbbreviationBuilder.prototype.abbreviation = function (abbreviation) {
        this._p.abbreviation = abbreviation;
        this._m["abbreviation"] = true;
        return this;
    };
    PartAbbreviationBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    PartAbbreviationBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    PartAbbreviationBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    PartAbbreviationBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return PartAbbreviationBuilder;
})();
function patchPartAbbreviation(base) { return new PartAbbreviationBuilder(base); }
exports.patchPartAbbreviation = patchPartAbbreviation;
function buildPartAbbreviation() { return new PartAbbreviationBuilder(); }
exports.buildPartAbbreviation = buildPartAbbreviation;
var PartGroupBuilder = (function () {
    function PartGroupBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    PartGroupBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["groupNameDisplay"]) || this._b["groupNameDisplay"] !== undefined || this._p.groupNameDisplay !== undefined, "groupNameDisplay is a required field");
        console.assert((this._o && !this._m["groupSymbol"]) || this._b["groupSymbol"] !== undefined || this._p.groupSymbol !== undefined, "groupSymbol is a required field");
        console.assert((this._o && !this._m["groupName"]) || this._b["groupName"] !== undefined || this._p.groupName !== undefined, "groupName is a required field");
        console.assert((this._o && !this._m["groupAbbreviationDisplay"]) || this._b["groupAbbreviationDisplay"] !== undefined || this._p.groupAbbreviationDisplay !== undefined, "groupAbbreviationDisplay is a required field");
        console.assert((this._o && !this._m["groupBarline"]) || this._b["groupBarline"] !== undefined || this._p.groupBarline !== undefined, "groupBarline is a required field");
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["groupAbbreviation"]) || this._b["groupAbbreviation"] !== undefined || this._p.groupAbbreviation !== undefined, "groupAbbreviation is a required field");
        console.assert((this._o && !this._m["type"]) || this._b["type"] !== undefined || this._p.type !== undefined, "type is a required field");
        console.assert((this._o && !this._m["groupTime"]) || this._b["groupTime"] !== undefined || this._p.groupTime !== undefined, "groupTime is a required field");
    };
    PartGroupBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "PartGroup";
        return this._p;
    };
    PartGroupBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    PartGroupBuilder.prototype.groupNameDisplay = function (build) {
        this._b["groupNameDisplay"] = build(new GroupNameDisplayBuilder(this._o && this._o["groupNameDisplay"]));
        this._m["groupNameDisplay"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupSymbol = function (build) {
        this._b["groupSymbol"] = build(new GroupSymbolBuilder(this._o && this._o["groupSymbol"]));
        this._m["groupSymbol"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupName = function (build) {
        this._b["groupName"] = build(new GroupNameBuilder(this._o && this._o["groupName"]));
        this._m["groupName"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupAbbreviationDisplay = function (build) {
        this._b["groupAbbreviationDisplay"] = build(new GroupAbbreviationDisplayBuilder(this._o && this._o["groupAbbreviationDisplay"]));
        this._m["groupAbbreviationDisplay"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupBarline = function (build) {
        this._b["groupBarline"] = build(new GroupBarlineBuilder(this._o && this._o["groupBarline"]));
        this._m["groupBarline"] = true;
        return this;
    };
    PartGroupBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupAbbreviation = function (build) {
        this._b["groupAbbreviation"] = build(new GroupAbbreviationBuilder(this._o && this._o["groupAbbreviation"]));
        this._m["groupAbbreviation"] = true;
        return this;
    };
    PartGroupBuilder.prototype.type = function (type) {
        this._p.type = type;
        this._m["type"] = true;
        return this;
    };
    PartGroupBuilder.prototype.groupTime = function (build) {
        this._b["groupTime"] = build(new GroupTimeBuilder(this._o && this._o["groupTime"]));
        this._m["groupTime"] = true;
        return this;
    };
    PartGroupBuilder.prototype._class = function (_class) {
        this._p._class = _class;
        this._m["_class"] = true;
        return this;
    };
    PartGroupBuilder.prototype.footnote = function (build) {
        this._b["footnote"] = build(new FootnoteBuilder(this._o && this._o["footnote"]));
        this._m["footnote"] = true;
        return this;
    };
    PartGroupBuilder.prototype.level = function (build) {
        this._b["level"] = build(new LevelBuilder(this._o && this._o["level"]));
        this._m["level"] = true;
        return this;
    };
    return PartGroupBuilder;
})();
function patchPartGroup(base) { return new PartGroupBuilder(base); }
exports.patchPartGroup = patchPartGroup;
function buildPartGroup() { return new PartGroupBuilder(); }
exports.buildPartGroup = buildPartGroup;
var GroupNameBuilder = (function () {
    function GroupNameBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupNameBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    GroupNameBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupName";
        return this._p;
    };
    GroupNameBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupNameBuilder.prototype.name = function (name) {
        this._p.name = name;
        this._m["name"] = true;
        return this;
    };
    GroupNameBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    GroupNameBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    GroupNameBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    GroupNameBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return GroupNameBuilder;
})();
function patchGroupName(base) { return new GroupNameBuilder(base); }
exports.patchGroupName = patchGroupName;
function buildGroupName() { return new GroupNameBuilder(); }
exports.buildGroupName = buildGroupName;
var GroupNameDisplayBuilder = (function () {
    function GroupNameDisplayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupNameDisplayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    GroupNameDisplayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupNameDisplay";
        return this._p;
    };
    GroupNameDisplayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupNameDisplayBuilder.prototype.name = function (build) {
        this._b["name"] = build(new TextArrayBuilder(this._o && this._o["name"]));
        this._m["name"] = true;
        return this;
    };
    GroupNameDisplayBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return GroupNameDisplayBuilder;
})();
function patchGroupNameDisplay(base) { return new GroupNameDisplayBuilder(base); }
exports.patchGroupNameDisplay = patchGroupNameDisplay;
function buildGroupNameDisplay() { return new GroupNameDisplayBuilder(); }
exports.buildGroupNameDisplay = buildGroupNameDisplay;
var GroupAbbreviationBuilder = (function () {
    function GroupAbbreviationBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupAbbreviationBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["text"]) || this._b["text"] !== undefined || this._p.text !== undefined, "text is a required field");
    };
    GroupAbbreviationBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupAbbreviation";
        return this._p;
    };
    GroupAbbreviationBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupAbbreviationBuilder.prototype.text = function (text) {
        this._p.text = text;
        this._m["text"] = true;
        return this;
    };
    GroupAbbreviationBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    GroupAbbreviationBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    GroupAbbreviationBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    GroupAbbreviationBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return GroupAbbreviationBuilder;
})();
function patchGroupAbbreviation(base) { return new GroupAbbreviationBuilder(base); }
exports.patchGroupAbbreviation = patchGroupAbbreviation;
function buildGroupAbbreviation() { return new GroupAbbreviationBuilder(); }
exports.buildGroupAbbreviation = buildGroupAbbreviation;
var GroupAbbreviationDisplayBuilder = (function () {
    function GroupAbbreviationDisplayBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupAbbreviationDisplayBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["name"]) || this._b["name"] !== undefined || this._p.name !== undefined, "name is a required field");
    };
    GroupAbbreviationDisplayBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupAbbreviationDisplay";
        return this._p;
    };
    GroupAbbreviationDisplayBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupAbbreviationDisplayBuilder.prototype.name = function (build) {
        this._b["name"] = build(new TextArrayBuilder(this._o && this._o["name"]));
        this._m["name"] = true;
        return this;
    };
    GroupAbbreviationDisplayBuilder.prototype.printObject = function (printObject) {
        this._p.printObject = printObject;
        this._m["printObject"] = true;
        return this;
    };
    return GroupAbbreviationDisplayBuilder;
})();
function patchGroupAbbreviationDisplay(base) { return new GroupAbbreviationDisplayBuilder(base); }
exports.patchGroupAbbreviationDisplay = patchGroupAbbreviationDisplay;
function buildGroupAbbreviationDisplay() { return new GroupAbbreviationDisplayBuilder(); }
exports.buildGroupAbbreviationDisplay = buildGroupAbbreviationDisplay;
var GroupSymbolBuilder = (function () {
    function GroupSymbolBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupSymbolBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    GroupSymbolBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupSymbol";
        return this._p;
    };
    GroupSymbolBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupSymbolBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    GroupSymbolBuilder.prototype.defaultX = function (defaultX) {
        this._p.defaultX = defaultX;
        this._m["defaultX"] = true;
        return this;
    };
    GroupSymbolBuilder.prototype.relativeY = function (relativeY) {
        this._p.relativeY = relativeY;
        this._m["relativeY"] = true;
        return this;
    };
    GroupSymbolBuilder.prototype.defaultY = function (defaultY) {
        this._p.defaultY = defaultY;
        this._m["defaultY"] = true;
        return this;
    };
    GroupSymbolBuilder.prototype.relativeX = function (relativeX) {
        this._p.relativeX = relativeX;
        this._m["relativeX"] = true;
        return this;
    };
    return GroupSymbolBuilder;
})();
function patchGroupSymbol(base) { return new GroupSymbolBuilder(base); }
exports.patchGroupSymbol = patchGroupSymbol;
function buildGroupSymbol() { return new GroupSymbolBuilder(); }
exports.buildGroupSymbol = buildGroupSymbol;
var GroupBarlineBuilder = (function () {
    function GroupBarlineBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupBarlineBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["data"]) || this._b["data"] !== undefined || this._p.data !== undefined, "data is a required field");
    };
    GroupBarlineBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupBarline";
        return this._p;
    };
    GroupBarlineBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    GroupBarlineBuilder.prototype.data = function (data) {
        this._p.data = data;
        this._m["data"] = true;
        return this;
    };
    GroupBarlineBuilder.prototype.color = function (color) {
        this._p.color = color;
        this._m["color"] = true;
        return this;
    };
    return GroupBarlineBuilder;
})();
function patchGroupBarline(base) { return new GroupBarlineBuilder(base); }
exports.patchGroupBarline = patchGroupBarline;
function buildGroupBarline() { return new GroupBarlineBuilder(); }
exports.buildGroupBarline = buildGroupBarline;
var GroupTimeBuilder = (function () {
    function GroupTimeBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    GroupTimeBuilder.prototype._i = function () {
    };
    GroupTimeBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "GroupTime";
        return this._p;
    };
    GroupTimeBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return GroupTimeBuilder;
})();
function patchGroupTime(base) { return new GroupTimeBuilder(base); }
exports.patchGroupTime = patchGroupTime;
function buildGroupTime() { return new GroupTimeBuilder(); }
exports.buildGroupTime = buildGroupTime;
var ScoreInstrumentBuilder = (function () {
    function ScoreInstrumentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScoreInstrumentBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["instrumentName"]) || this._b["instrumentName"] !== undefined || this._p.instrumentName !== undefined, "instrumentName is a required field");
        console.assert((this._o && !this._m["instrumentSound"]) || this._b["instrumentSound"] !== undefined || this._p.instrumentSound !== undefined, "instrumentSound is a required field");
        console.assert((this._o && !this._m["ensemble"]) || this._b["ensemble"] !== undefined || this._p.ensemble !== undefined, "ensemble is a required field");
        console.assert((this._o && !this._m["virtualInstrument"]) || this._b["virtualInstrument"] !== undefined || this._p.virtualInstrument !== undefined, "virtualInstrument is a required field");
        console.assert((this._o && !this._m["instrumentAbbreviation"]) || this._b["instrumentAbbreviation"] !== undefined || this._p.instrumentAbbreviation !== undefined, "instrumentAbbreviation is a required field");
        console.assert((this._o && !this._m["solo"]) || this._b["solo"] !== undefined || this._p.solo !== undefined, "solo is a required field");
        console.assert((this._o && !this._m["id"]) || this._b["id"] !== undefined || this._p.id !== undefined, "id is a required field");
    };
    ScoreInstrumentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ScoreInstrument";
        return this._p;
    };
    ScoreInstrumentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScoreInstrumentBuilder.prototype.instrumentName = function (instrumentName) {
        this._p.instrumentName = instrumentName;
        this._m["instrumentName"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.instrumentSound = function (instrumentSound) {
        this._p.instrumentSound = instrumentSound;
        this._m["instrumentSound"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.ensemble = function (ensemble) {
        this._p.ensemble = ensemble;
        this._m["ensemble"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.virtualInstrument = function (build) {
        this._b["virtualInstrument"] = build(new VirtualInstrumentBuilder(this._o && this._o["virtualInstrument"]));
        this._m["virtualInstrument"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.instrumentAbbreviation = function (instrumentAbbreviation) {
        this._p.instrumentAbbreviation = instrumentAbbreviation;
        this._m["instrumentAbbreviation"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.solo = function (build) {
        this._b["solo"] = build(new SoloBuilder(this._o && this._o["solo"]));
        this._m["solo"] = true;
        return this;
    };
    ScoreInstrumentBuilder.prototype.id = function (id) {
        this._p.id = id;
        this._m["id"] = true;
        return this;
    };
    return ScoreInstrumentBuilder;
})();
function patchScoreInstrument(base) { return new ScoreInstrumentBuilder(base); }
exports.patchScoreInstrument = patchScoreInstrument;
function buildScoreInstrument() { return new ScoreInstrumentBuilder(); }
exports.buildScoreInstrument = buildScoreInstrument;
var SoloBuilder = (function () {
    function SoloBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    SoloBuilder.prototype._i = function () {
    };
    SoloBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Solo";
        return this._p;
    };
    SoloBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    return SoloBuilder;
})();
function patchSolo(base) { return new SoloBuilder(base); }
exports.patchSolo = patchSolo;
function buildSolo() { return new SoloBuilder(); }
exports.buildSolo = buildSolo;
var VirtualInstrumentBuilder = (function () {
    function VirtualInstrumentBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    VirtualInstrumentBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["virtualLibrary"]) || this._b["virtualLibrary"] !== undefined || this._p.virtualLibrary !== undefined, "virtualLibrary is a required field");
        console.assert((this._o && !this._m["virtualName"]) || this._b["virtualName"] !== undefined || this._p.virtualName !== undefined, "virtualName is a required field");
    };
    VirtualInstrumentBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "VirtualInstrument";
        return this._p;
    };
    VirtualInstrumentBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    VirtualInstrumentBuilder.prototype.virtualLibrary = function (virtualLibrary) {
        this._p.virtualLibrary = virtualLibrary;
        this._m["virtualLibrary"] = true;
        return this;
    };
    VirtualInstrumentBuilder.prototype.virtualName = function (virtualName) {
        this._p.virtualName = virtualName;
        this._m["virtualName"] = true;
        return this;
    };
    return VirtualInstrumentBuilder;
})();
function patchVirtualInstrument(base) { return new VirtualInstrumentBuilder(base); }
exports.patchVirtualInstrument = patchVirtualInstrument;
function buildVirtualInstrument() { return new VirtualInstrumentBuilder(); }
exports.buildVirtualInstrument = buildVirtualInstrument;
var ScoreHeaderBuilder = (function () {
    function ScoreHeaderBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScoreHeaderBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["movementTitle"]) || this._b["movementTitle"] !== undefined || this._p.movementTitle !== undefined, "movementTitle is a required field");
        console.assert((this._o && !this._m["identification"]) || this._b["identification"] !== undefined || this._p.identification !== undefined, "identification is a required field");
        console.assert((this._o && !this._m["defaults"]) || this._b["defaults"] !== undefined || this._p.defaults !== undefined, "defaults is a required field");
        console.assert((this._o && !this._m["work"]) || this._b["work"] !== undefined || this._p.work !== undefined, "work is a required field");
        console.assert((this._o && !this._m["credits"]) || this._b["credits"] !== undefined || this._p.credits !== undefined, "credits is a required field");
        console.assert((this._o && !this._m["partList"]) || this._b["partList"] !== undefined || this._p.partList !== undefined, "partList is a required field");
        console.assert((this._o && !this._m["movementNumber"]) || this._b["movementNumber"] !== undefined || this._p.movementNumber !== undefined, "movementNumber is a required field");
    };
    ScoreHeaderBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ScoreHeader";
        return this._p;
    };
    ScoreHeaderBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScoreHeaderBuilder.prototype.movementTitle = function (movementTitle) {
        this._p.movementTitle = movementTitle;
        this._m["movementTitle"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.identification = function (build) {
        this._b["identification"] = build(new IdentificationBuilder(this._o && this._o["identification"]));
        this._m["identification"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.defaults = function (build) {
        this._b["defaults"] = build(new DefaultsBuilder(this._o && this._o["defaults"]));
        this._m["defaults"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.work = function (build) {
        this._b["work"] = build(new WorkBuilder(this._o && this._o["work"]));
        this._m["work"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.credits = function (credits) {
        this._p.credits = credits;
        this._m["credits"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.partList = function (partList) {
        this._p.partList = partList;
        this._m["partList"] = true;
        return this;
    };
    ScoreHeaderBuilder.prototype.movementNumber = function (movementNumber) {
        this._p.movementNumber = movementNumber;
        this._m["movementNumber"] = true;
        return this;
    };
    return ScoreHeaderBuilder;
})();
function patchScoreHeader(base) { return new ScoreHeaderBuilder(base); }
exports.patchScoreHeader = patchScoreHeader;
function buildScoreHeader() { return new ScoreHeaderBuilder(); }
exports.buildScoreHeader = buildScoreHeader;
var ScoreTimewiseBuilder = (function () {
    function ScoreTimewiseBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    ScoreTimewiseBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["measures"]) || this._b["measures"] !== undefined || this._p.measures !== undefined, "measures is a required field");
        console.assert((this._o && !this._m["version"]) || this._b["version"] !== undefined || this._p.version !== undefined, "version is a required field");
    };
    ScoreTimewiseBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "ScoreTimewise";
        return this._p;
    };
    ScoreTimewiseBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    ScoreTimewiseBuilder.prototype.measures = function (measures) {
        this._p.measures = measures;
        this._m["measures"] = true;
        return this;
    };
    ScoreTimewiseBuilder.prototype.version = function (version) {
        this._p.version = version;
        this._m["version"] = true;
        return this;
    };
    return ScoreTimewiseBuilder;
})();
function patchScoreTimewise(base) { return new ScoreTimewiseBuilder(base); }
exports.patchScoreTimewise = patchScoreTimewise;
function buildScoreTimewise() { return new ScoreTimewiseBuilder(); }
exports.buildScoreTimewise = buildScoreTimewise;
var MeasureBuilder = (function () {
    function MeasureBuilder(toPatch) {
        this._p = {};
        this._b = {};
        this._m = {};
        this._o = toPatch;
    }
    MeasureBuilder.prototype._i = function () {
        console.assert((this._o && !this._m["number"]) || this._b["number"] !== undefined || this._p.number !== undefined, "number is a required field");
        console.assert((this._o && !this._m["implicit"]) || this._b["implicit"] !== undefined || this._p.implicit !== undefined, "implicit is a required field");
        console.assert((this._o && !this._m["width"]) || this._b["width"] !== undefined || this._p.width !== undefined, "width is a required field");
        console.assert((this._o && !this._m["nonControlling"]) || this._b["nonControlling"] !== undefined || this._p.nonControlling !== undefined, "nonControlling is a required field");
    };
    MeasureBuilder.prototype.build = function () {
        console.assert(!this._o, "Refusing to create in patch mode.");
        this._i();
        this._p._class = "Measure";
        return this._p;
    };
    MeasureBuilder.prototype.patch = function () {
        var _this = this;
        console.assert(Boolean(this._o), "The builder is in build mode.");
        this._i();
        var patches = Object.keys(this._m).map(function (key) {
            if (_this._b[key] !== undefined)
                return;
            if (_this._p[key] === _this._o[key] || _this._p[key] !== _this._p[key] && _this._o[key] !== _this._o[key])
                return;
            if (_this._p[key] === undefined)
                return { p: [key], od: _this._o[key] };
            if (_this._o[key] === undefined)
                return { p: [key], oi: _this._p[key] };
            return { p: [key], od: _this._o[key], oi: _this._p[key] };
        }).filter(function (p) { return Boolean(p); });
        Object.keys(this._b).map(function (key) {
            if (_this._o[key] === undefined)
                patches.push({ p: [key], oi: _this._b[key].build() });
            var subpatches = _this._b[key].patch().map(function (patch) {
                patch.p = [key].concat(patch.p);
                return patch;
            });
            patches = patches.concat(subpatches);
        });
        return patches;
    };
    MeasureBuilder.prototype.number = function (number) {
        this._p.number = number;
        this._m["number"] = true;
        return this;
    };
    MeasureBuilder.prototype.implicit = function (implicit) {
        this._p.implicit = implicit;
        this._m["implicit"] = true;
        return this;
    };
    MeasureBuilder.prototype.width = function (width) {
        this._p.width = width;
        this._m["width"] = true;
        return this;
    };
    MeasureBuilder.prototype.set = function (key, val) {
        this._p[key] = val;
        this._m[key] = true;
        return this;
    };
    MeasureBuilder.prototype.nonControlling = function (nonControlling) {
        this._p.nonControlling = nonControlling;
        this._m["nonControlling"] = true;
        return this;
    };
    return MeasureBuilder;
})();
function patchMeasure(base) { return new MeasureBuilder(base); }
exports.patchMeasure = patchMeasure;
function buildMeasure() { return new MeasureBuilder(); }
exports.buildMeasure = buildMeasure;
